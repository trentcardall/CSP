{
  
    
        "post0": {
            "title": "Final Exam Review",
            "content": ". Challenges . Although I got a 50/50, some of the questions took some additional research. Most of the questions I had to put additional research into were the ones involving binary, which I happened to know nearly nothing about. With the help of my table mates, and some additional research, I ended up learning a lot about binary when storing the test and how data is stored, specifically in 4 bits. . 4 bit binary . | Number | Binary | | — | — | | 0 | 0000 | | 1 | 0001 | | 2 | 0010 | | 3 | 0011 | | 4 | 0100 | | 5 | 0101 | | 6 | 0110 | | 7 | 0111 | | 8 | 1000 | | 9 | 1001 | | 10 | 1010 | | 11 | 1011 | | 12 | 1100 | | 13 | 1101 | | 14 | 1110 | | 15 | 1111 | . Other Challenges . Other challenging questions were not necessarily confusing in concept, but required some time to think about the question. For example there were a lot of questions that included lots of swapping of variables. I would have to read it over multiple times to make sure my answer was correct and I got the final alignment of variables right. There were also questions that were very math oriented. Although the level of math was not very complicated, you would have to look over the code multiple times to find out the order of operations being used. . Takeaways . Overall, I think this shows that I am on good pace for the AP test and I have a good chance of scoring high if I continue on this trend. I still have a long way to go and a lot to learn though. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/collegeboard/2022/11/08/final.html",
            "relUrl": "/markdown/collegeboard/2022/11/08/final.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Night at the Museum Experience",
            "content": "My Experience . When I first arrived at the school, I wasn’t exactly sure what to expect or how many people would be there. As I walked into the computer science classroom, I was shocked by the crowds and how many people were inside. . . This was a pleasant surprise because if I’m being honest I did not think that many people would be interested in computer science. It was really fun to present our project to strangers who were passing through as well as other students, some who were involved in CS and others who weren’t. It was also really fun to see the programs that other CS students created and it really showcased the talent we have at this school. . Other Classrooms . After meeting with Mr. Mortensen and showing him our project, I decided to visit some of the other classrooms to see what they had to offer. Just outside this classroom, I saw a table which had maps on it to direct visitors where the different art classes were. . . I decided to visit the ceramics room because I have several friends who are in that class and I wanted to see what they created. I was actually impressed by the things which they created because I hear stories about that class and it sounds like they spend most of their time messing around, but they actually showed effort on their pieces. . . One thing I noticed, however, was that a lot more people were in the CS classroom as compared to the other art rooms. Although I did come late to the Night at the Museum, I was genuinely surprised about how CS seemed to be the main attraction, at least when I was there. I must say that I wasn’t expecting that, and I was glad to see all our hard work being recognized. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2022/11/04/natm.html",
            "relUrl": "/markdown/2022/11/04/natm.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Alarm API",
            "content": "Please listen to the alarm tones found here to choose which alarm to vote for. You may like or dislike any alarm as many times as you like. The alarm with the most likes (with dislikes taken into account) will be implemented as the default. . Alarm Likes Dislikes .",
            "url": "https://trentcardall.github.io/cuddly-succotash/data/alarms",
            "relUrl": "/data/alarms",
            "date": " • Oct 27, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Python Height Calculator",
            "content": "print(&quot;Python Height Calculator&quot;) msg = input(&quot;Enter your height:&quot;) print(&quot;Your height: &quot; + msg) . Python Height Calculator Your height: 16 .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/10/21/height.html",
            "relUrl": "/fastpages/jupyter/2022/10/21/height.html",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) .",
            "url": "https://trentcardall.github.io/cuddly-succotash/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "CollegeBoard-The Internet",
            "content": ". Takeaways . Path: Direct connection of computing devices from sender to receiver . Route: Finding a path from sender to receiver . Computer System: Group of computing devices/programs which work together for a common purpose . Computer Device: Physical artifact which can run program (computers, tablets) . Bandwidth: Maximum amount of data which can be sent in a fixed amount of time . Computer Network: Interconnected devices sending/receiving data . Packet: Small amount of data sent over a network .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/collegeboard/2022/10/16/internet.html",
            "relUrl": "/markdown/collegeboard/2022/10/16/internet.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Weather API",
            "content": "import requests url = &quot;https://yahoo-weather5.p.rapidapi.com/weather&quot; querystring = {&quot;location&quot;:&quot;San Diego&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-weather5.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) #print(response.text) print(&quot;San Diego Weather Forecast:&quot; + &quot; n&quot;) forecast = response.json().get(&quot;forecasts&quot;) i = 0 while i &lt; len(forecast): for key, value in forecast[i].items(): print(&quot; t&quot; + key, value) i += 1 print(&quot; n&quot;) . San Diego Weather Forecast: day Mon date 1665370800 low 64 high 74 text Partly Cloudy code 30 day Tue date 1665457200 low 64 high 73 text Partly Cloudy code 30 day Wed date 1665543600 low 63 high 75 text Partly Cloudy code 30 day Thu date 1665630000 low 64 high 77 text Partly Cloudy code 30 day Fri date 1665716400 low 63 high 73 text Partly Cloudy code 30 day Sat date 1665802800 low 62 high 71 text Partly Cloudy code 30 day Sun date 1665889200 low 61 high 80 text Mostly Cloudy code 28 day Mon date 1665975600 low 56 high 78 text Partly Cloudy code 30 day Tue date 1666062000 low 60 high 80 text Partly Cloudy code 30 day Wed date 1666148400 low 59 high 81 text Cloudy code 26 day Thu date 1666234800 low 58 high 84 text Mostly Cloudy code 28 .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/10/10/API.html",
            "relUrl": "/fastpages/jupyter/2022/10/10/API.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "CollegeBoard Progress",
            "content": "Completed Assignments . .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/collegeboard/2022/10/03/collegeboard.html",
            "relUrl": "/markdown/collegeboard/2022/10/03/collegeboard.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter z is the 26 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 1 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter a is the 1 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #ideally the code should prompt the user multiple times def order(): global total item = input(&quot;Please select an item from the menu&quot;) for food, price in menu.items(): if food == item: print(food + &quot;: $&quot; + str(price)) total =+ price more = input(&quot;Anything else?&quot;) if more == &quot;yes&quot;: order() else: print(&quot;Thank you, your total for today is &quot; + str(total)) print(&quot; n&quot;) print(&quot;Your order:&quot;) order() #code should add the price of the menu items selected by the user . Menu burger $3.99 fries $1.99 drink $0.99 Your order: burger: $3.99 fries: $1.99 Thank you, your total for today is 1.99 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Program Design-Work Watch",
            "content": "The Work Watch . For our program design project, my group will be creating something we will call the Work Watch. This idea came as some of our group members were experimenting with the time function in python. Someone in our group realized that this could be a good idea put to use as a program to help people work more efficiently. . The Work Watch is effectively a clock that runs as you are studying or doing some kind of work. However, it is good for mental health to take occasional breaks while you are working. It can also give you another boost of productivity. With the Work Watch, you can put in how long you are planning on working for and then listing some of your interests. The Watch will time you and tell you when it is time to take a short break and suggest some things you can do during the break to de-stress. . Certain Needs . We don’t know exactly all of our needs, but our ideas are based on internal clocks which we will build using lists of numbers and loops. We will simply allow the code to tell it to print activities when the clock hits a certain time. . User Preferences . -User can decide whether to show or not show the timer . -User can decide how long breaks should be beforehand . -User can decide how much work time goes between breaks . -This will take more work, but we could add a sound that plays when it is time to break/work if we have the time/resources. . College Board 6 Points . Program Purpose and Function . The purpose of this project is to help people get work done more healthy and efficiently. It is to be used in daily life to create a better personal work atmosphere that promotes good mental health . Data Abstraction . We will abstract data from lists of numbers and hobbies in order to set timers and provide break time activities which the user can do. . Managing Complexity . Each member has been assigned different roles for which they will manage different aspects of the project. That being said, we can still help each other and we are not strictly limited to our roles. . Procedural Abstraction . Our project will prompt the user for certain questions so we can determine how much time to give them before and during their break. . Algorithm Implementation . The project will use an internal timer which will use an algorithm to accurately run . Testing . We plan on testing for all possible errors and glitches which could happen before we determine that we are done with the project. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/project/2022/09/29/design.html",
            "relUrl": "/markdown/project/2022/09/29/design.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "HTML Table",
            "content": "Attribute Value About . Name | Trent Cardall | Born on March 9, 2005 | . Age | 17 | Senior in High School | . Hobbies | Playing music, surfing, lacrosse | Play drums and guitar | . Pets | Dog | Named Oscar, Owned for about 5 years | . Class | APCSP | Period 3 | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/table/html/2022/09/25/table.html",
            "relUrl": "/markdown/table/html/2022/09/25/table.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Using JavaScript Kernels",
            "content": "Defining Function to Create Lists . function attribute(category, value, info) { this.category=category; this.value=value; this.info=info; } attribute.prototype.toJSON = function() { const obj = {category: this.category, value: this.value, info: this.info}; const json = JSON.stringify(obj); return json; } function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } var basic = new attribute(&quot;Name&quot;, &quot;Trent&quot;, &quot;Born on March 9, 2005&quot;) logItType(basic) logItType(basic.toJSON()); . object ; attribute { category: &#39;Name&#39;, value: &#39;Trent&#39;, info: &#39;Born on March 9, 2005&#39; } string ; {&#34;category&#34;:&#34;Name&#34;,&#34;value&#34;:&#34;Trent&#34;,&#34;info&#34;:&#34;Born on March 9, 2005&#34;} . Adding Additional Attributes to Person . var additional = [ new attribute(&quot;Age&quot;, &quot;17&quot;, &quot;Senior in high school&quot;), new attribute(&quot;Hobbies&quot;, &quot;Playing music, lacrosse, surfing&quot;, &quot;Plays both drums and guitar&quot;), new attribute(&quot;Pets&quot;, &quot;Dog&quot;, &quot;Named Oscar, owned for about 5 years&quot;), new attribute(&quot;Class&quot;, &quot;APCSP&quot;, &quot;Period 3&quot;) ] function person(basic, additional){ this.basic = basic this.additional = additional this.person = [basic] this.additional.forEach(additional =&gt; { this.person.push(additional) }) this.json = [] this.person.forEach(attribute =&gt; this.json.push(attribute.toJSON())); } me = new person(basic, additional) logItType(me.person); logItType(me.person[0].name); logItType(me.json[0]); logItType(JSON.parse(me.json[0])); . object ; [ attribute { category: &#39;Name&#39;, value: &#39;Trent&#39;, info: &#39;Born on March 9, 2005&#39; }, attribute { category: &#39;Age&#39;, value: &#39;17&#39;, info: &#39;Senior in high school&#39; }, attribute { category: &#39;Hobbies&#39;, value: &#39;Playing music, lacrosse, surfing&#39;, info: &#39;Plays both drums and guitar&#39; }, attribute { category: &#39;Pets&#39;, value: &#39;Dog&#39;, info: &#39;Named Oscar, owned for about 5 years&#39; }, attribute { category: &#39;Class&#39;, value: &#39;APCSP&#39;, info: &#39;Period 3&#39; } ] undefined ; undefined string ; {&#34;category&#34;:&#34;Name&#34;,&#34;value&#34;:&#34;Trent&#34;,&#34;info&#34;:&#34;Born on March 9, 2005&#34;} object ; { category: &#39;Name&#39;, value: &#39;Trent&#39;, info: &#39;Born on March 9, 2005&#39; } . Attempting to create HTML Table . person.prototype._toHtml = function () { var style = ( &quot;display:inline-block;&quot; + &quot;background: #804175;&quot; + &quot;border: 2 px white;&quot; + &quot;box-shadow: 0.8 em 0.4 em 0.4 em black;&quot; ); var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Attribute&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Value&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;More Info&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row of me.person) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.category + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.value + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.info + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); } $$.html(me._toHtml()); . AttributeValueMore Info . Name | Trent | Born on March 9, 2005 | Age | 17 | Senior in high school | Hobbies | Playing music, lacrosse, surfing | Plays both drums and guitar | Pets | Dog | Named Oscar, owned for about 5 years | Class | APCSP | Period 3 | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/09/22/scriptkernel.html",
            "relUrl": "/fastpages/jupyter/2022/09/22/scriptkernel.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Focus and Habits",
            "content": "Main Takeaways . -Nobody’s life is easy . -Everybody goes through tough times . -Anybody can be happy . -It is not necessarily lots of success and money which will make us happy . -We should be grateful for all the privileges we have and all which we have in our lives. Many people don’t realize this until they are taken away. . Things I am Grateful For . -Every day I am alive -Loving, financially stable family -Living in nice neighborhood and city -Friends who care for me . Goals . -Finish high school with straight A’s -Be more social throughout the rest of high school (nothing to lose!) -Get into a good college -Become closer to my friends and family -Remember that if any of the goals above don’t work out, it will be okay! .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2022/09/19/focus.html",
            "relUrl": "/markdown/2022/09/19/focus.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Countdown",
            "content": "Original plan . I originally decided to make a 10 second timer. This was not very hard to make and as I was making the code I realized it was very repetitive, but it worked. . import time def countdown(sec): print(sec + &quot; seconds remaining&quot;) time.sleep(1) countdown(&quot;10&quot;) countdown(&quot;9&quot;) countdown(&quot;8&quot;) countdown(&quot;7&quot;) countdown(&quot;6&quot;) countdown(&quot;5&quot;) countdown(&quot;4&quot;) countdown(&quot;3&quot;) countdown(&quot;2&quot;) countdown(&quot;1&quot;) countdown(&quot;0&quot;) print(&quot;Time&#39;s up!&quot;) . 10 seconds remaining 9 seconds remaining 8 seconds remaining 7 seconds remaining 6 seconds remaining 5 seconds remaining 4 seconds remaining 3 seconds remaining 2 seconds remaining 1 seconds remaining 0 seconds remaining Time&#39;s up! . Using a list . I realized as I was making the code that this is something which could be done by abstracting data. I did not want to type the whole list myself, so I found code on the internet which can create a list with any numbers you want. I chose 0-60 as that made the most sense, regarding the timer is only in seconds. You can make the list as big as you want though. . def create_list(r1, r2): if r1 == r2: return r1 else: res = [] while (r1 &lt; r2+1 ): res.append(r1) r1 += 1 return res # create list of number 0-60 for one minute r1, r2 = 0, 60 print(create_list(r1, r2)) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60] . I then turned this list created into a defined list in my code: . seconds = [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;, &quot;16&quot;, &quot;17&quot;, &quot;18&quot;, &quot;19&quot;, &quot;20&quot;, &quot;21&quot;, &quot;22&quot;, &quot;23&quot;, &quot;24&quot;, &quot;25&quot;, &quot;26&quot;, &quot;27&quot;, &quot;28&quot;, &quot;29&quot;, &quot;30&quot;, &quot;31&quot;, &quot;32&quot;, &quot;33&quot;, &quot;34&quot;, &quot;35&quot;, &quot;36&quot;, &quot;37&quot;, &quot;38&quot;, &quot;39&quot;, &quot;40&quot;, &quot;41&quot;, &quot;42&quot;, &quot;43&quot;, &quot;44&quot;, &quot;45&quot;, &quot;46&quot;, &quot;47&quot;, &quot;48&quot;, &quot;49&quot;, &quot;50&quot;, &quot;51&quot;, &quot;52&quot;, &quot;53&quot;, &quot;54&quot;, &quot;55&quot;, &quot;56&quot;, &quot;57&quot;, &quot;58&quot;, &quot;59&quot;, &quot;60&quot;] print(seconds) . [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;10&#39;, &#39;11&#39;, &#39;12&#39;, &#39;13&#39;, &#39;14&#39;, &#39;15&#39;, &#39;16&#39;, &#39;17&#39;, &#39;18&#39;, &#39;19&#39;, &#39;20&#39;, &#39;21&#39;, &#39;22&#39;, &#39;23&#39;, &#39;24&#39;, &#39;25&#39;, &#39;26&#39;, &#39;27&#39;, &#39;28&#39;, &#39;29&#39;, &#39;30&#39;, &#39;31&#39;, &#39;32&#39;, &#39;33&#39;, &#39;34&#39;, &#39;35&#39;, &#39;36&#39;, &#39;37&#39;, &#39;38&#39;, &#39;39&#39;, &#39;40&#39;, &#39;41&#39;, &#39;42&#39;, &#39;43&#39;, &#39;44&#39;, &#39;45&#39;, &#39;46&#39;, &#39;47&#39;, &#39;48&#39;, &#39;49&#39;, &#39;50&#39;, &#39;51&#39;, &#39;52&#39;, &#39;53&#39;, &#39;54&#39;, &#39;55&#39;, &#39;56&#39;, &#39;57&#39;, &#39;58&#39;, &#39;59&#39;, &#39;60&#39;] . Here is the code for the actual program I created. I realized along the way that it would be really cool if you could choose how long you wanted the timer be instead of just having it a minute long. Using what I learned about loops recently, I realized a while loop can create the function I wanted. However, I ran into multiple problems such as the list counting backwards and the loop never stopping, but after changing parts and a couple internet searches I figured out how to make it work the way I wanted to. You can input any number from 0-60 and it will give you a timer of that long. . def timer(): time_wanted = int(input(&quot;How many seconds do you need?&quot;)) while time_wanted &lt; len(seconds): record = seconds[time_wanted] countdown(record) time_wanted -= 1 if time_wanted == -1: break return timer() print(&quot;Time&#39;s up!&quot;) . 10 seconds remaining 9 seconds remaining 8 seconds remaining 7 seconds remaining 6 seconds remaining 5 seconds remaining 4 seconds remaining 3 seconds remaining 2 seconds remaining 1 seconds remaining 0 seconds remaining Time&#39;s up! .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/09/13/countdown.html",
            "relUrl": "/fastpages/jupyter/2022/09/13/countdown.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "JavaScript Quiz",
            "content": "Planning . I decided to make my quiz about basketball, and have the questions and answers go as follows: . What year was basketball invented? A. 1642 B. 1864 C. 1891 (correct) D. 1492 . | Which of these players is LeBron James? A. Picture of Michael Jordan B. Picture of LeBron James (correct) C. Picture of Tom Brady D. Picture of Giannis Antetokounmpo . | Which team won the championship in 2022? A. Phoenix Suns (+ logo) B. Boston Celtics (+ logo) C. Dallas Mavericks (+ logo) D. Golden State Warriors (+ logo) (correct) . | Who won the MVP in 2022? A. Luka Doncic B. LeBron James C. Stephen Curry D. Nikola Jokic (correct) . | Each correct answer will take the user to the next question. Each wrong answer will take them to an incorrect screen and ask them to try again. . Changes . In order to make my game more original, I decided to have wrong answers take you to a wrong screen which would ask you try again, and have correct answers take you to a correct screen which could take you to the next question. . I also decided to have a screen towards the beginning which would ask the player for their name and welcome them to the quiz. . I tried to make the 4th question free response, where you could type in any answer and try to get the right one, and after some research was able to find the code to do that. However, the website did not seem to recognize one of the functions I was trying to run, and after changing some things I was not able to fix it. I decided to settle by creating a dropdown system with multiple options to still maintain some originality. After running into similar issues, I settled for traditional multiple choice. . I decided to also add a screen at the end which congratulated the player using the same name they entered at the beginning of the quiz and giving them the option to either play again or view my fastpages site. . Link to the quiz: https://studio.code.org/projects/applab/uNCEq2vDZhWKgeIb4BX-sOUqC1NYM_AKitRGIJa3bvo .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/project/2022/09/07/javascriptquiz.html",
            "relUrl": "/markdown/project/2022/09/07/javascriptquiz.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Links and More",
            "content": "About me Notebooks Posts . https://trentcardall.github.io/cuddly-succotash/markdown/2022/09/02/about.html | https://trentcardall.github.io/cuddly-succotash/categories/#jupyter | https://trentcardall.github.io/cuddly-succotash/categories/#markdown | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/info/2022/09/02/markdown-table.html",
            "relUrl": "/info/2022/09/02/markdown-table.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "More about me",
            "content": ". Hi! My name is Trent Cardall and I am currently a student in AP Computer Science Principles. I do not know a whole lot about coding right now but I have already learned so much in the short time I have been in this class. I am taking this class because I want to see if I can potentially have a future in computer science, a field that will only get bigger from now on. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2022/09/02/about.html",
            "relUrl": "/markdown/2022/09/02/about.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Python Game",
            "content": "def word_hint(hint): print(&quot;Can you guess the word?&quot;) print(&quot;Hint:&quot; + hint) msg = input() return msg print(&quot;Welcome to the word guessing game called &#39;Can You Guess the Word?&#39;!&quot;) print(&quot;Press enter to continue:&quot;+&quot; n&quot;) input() rsp = word_hint(&quot;It starts with the letter p and is a common language used in coding.&quot;) if rsp == &quot;python&quot;: print (&quot;Correct! Nicely done!&quot;) else: print(&quot;Wrong! The answer we were looking for was &#39;python&#39;.&quot;) print(&quot;On to the next word...&quot;+&quot; n&quot;) rsp = word_hint(&quot;The word starts with a p and is very common function used in python.&quot;) if rsp == &quot;print&quot;: print(&quot;Wow! Amazing! Great answer!&quot;) else: print(&quot;Oh no! That was wrong! The answer we were looking for was &#39;print&#39;.&quot;) print(&quot;This next word will be the last one! Finish strong!&quot;+&quot; n&quot;) rsp = word_hint(&quot;A common greeting that starts with an H and ends with an O.&quot;) if rsp == &quot;hello&quot;: print(&quot;That is right! Great job!&quot;) else: print(&quot;That was wrong! You can do better than that!&quot;) print(&quot;Thank you for playing Can You Guess the Word! We will catch you on the flippity-flip!&quot;) . Welcome to the word guessing game called &#39;Can You Guess the Word?&#39;! Press enter to continue: Can you guess the word? Hint:It starts with the letter p and is a common language used in coding. Correct! Nicely done! On to the next word... Can you guess the word? Hint:The word starts with a p and is very common function used in python. Wow! Amazing! Great answer! This next word will be the last one! Finish strong! Can you guess the word? Hint:A common greeting that starts with an H and ends with an O. That was wrong! You can do better than that! Thank you for playing Can You Guess the Word! We will catch you on the flippity-flip! .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/08/31/coinflip.html",
            "relUrl": "/fastpages/jupyter/2022/08/31/coinflip.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "InfoDb Lists",
            "content": "In the cell below, the code creates a &quot;dictionary&quot; where all the data is stored. I decided to define certain things about me to show my understanding of data structures. tesst . InfoDb = [] # Creating keys and values for the data structure InfoDb.append({ &quot;FirstName&quot;: &quot;Trent&quot;, &quot;LastName&quot;: &quot;Cardall&quot;, &quot;Class&quot;: &quot;APCSP&quot;, &quot;Date of Birth&quot;: &quot;March 9, 2005&quot;, &quot;Place of Birth&quot;: &quot;Scottsdale, AZ&quot;, &quot;Hobbies&quot;: [&quot;Playing music&quot;, &quot;Surfing&quot;, &quot;Playing Lacrosse&quot;] # [] makes ordered list }) print (InfoDb) . [{&#39;FirstName&#39;: &#39;Trent&#39;, &#39;LastName&#39;: &#39;Cardall&#39;, &#39;Class&#39;: &#39;APCSP&#39;, &#39;Date of Birth&#39;: &#39;March 9, 2005&#39;, &#39;Place of Birth&#39;: &#39;Scottsdale, AZ&#39;, &#39;Hobbies&#39;: [&#39;Playing music&#39;, &#39;Surfing&#39;, &#39;Playing Lacrosse&#39;]}] . The data structure was printed which shows proof that it works. However, it is not exactly easy for the average person to read. By using other functions we can format the list to make the output more organized. There are multiple ways to pull data out of the structure, but all of them will produce the same output. . For loop . Pulls records one by one out of data structure until there is nothing left . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;-Class:&quot;, d_rec[&quot;Class&quot;]) print(&quot; t&quot;, &quot;-Date of Birth:&quot;, d_rec[&quot;Date of Birth&quot;]) print(&quot; t&quot;, &quot;-Place of Birth:&quot;, d_rec[&quot;Place of Birth&quot;]) print(&quot; t&quot;, &quot;-Hobbies:&quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) def for_loop(): print(&quot;A little about myself:&quot;) for record in InfoDb: print_data(record) for_loop() # activating function . A little about myself: Trent Cardall -Class: APCSP -Date of Birth: March 9, 2005 -Place of Birth: Scottsdale, AZ -Hobbies:Playing music, Surfing, Playing Lacrosse . While loop . Counts through the items in the list until record is passed. . def while_loop(): print(&quot;A little about myself:&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i +=1 return while_loop() . A little about myself: Trent Cardall -Class: APCSP -Date of Birth: March 9, 2005 -Place of Birth: Scottsdale, AZ -Hobbies:Playing music, Surfing, Playing Lacrosse . Recursion . Using a function defined as recursive_loop(i), each time data is pulled out it will add a number to i to move on to the next item in the list. Eventually i &lt; len(InfoDb) will be false, and the loop will end . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) print (&quot;A little about myself:&quot;) recursive_loop(0) . A little about myself: Trent Cardall -Class: APCSP -Date of Birth: March 9, 2005 -Place of Birth: Scottsdale, AZ -Hobbies:Playing music, Surfing, Playing Lacrosse . Reverse Order . One of the hacks is to attempt to display the list in reverse order. The first idea that came to mind and seemed easiest was to change the recursive loop so that it subtracts each time, and start it at the highest number of the list. . def reverse_order(i): if i &lt;= len(InfoDb): record = InfoDb[i] print_data(record) reverse_order(i - 1) print(&quot;Reverse order&quot;+&quot; n&quot;) print(&quot;A little about myself:&quot;) reverse_order(6) . Reverse order A little about myself: . That didn&#39;t seem to work, and I couldn&#39;t think of any other ideas, so I tried a quick google search, and attempted new methods . InfoDb.reverse() print(InfoDb) . [{&#39;FirstName&#39;: &#39;Trent&#39;, &#39;LastName&#39;: &#39;Cardall&#39;, &#39;Class&#39;: &#39;APCSP&#39;, &#39;Date of Birth&#39;: &#39;March 9, 2005&#39;, &#39;Place of Birth&#39;: &#39;Scottsdale, AZ&#39;, &#39;Hobbies&#39;: [&#39;Playing music&#39;, &#39;Surfing&#39;, &#39;Playing Lacrosse&#39;]}] . That didn&#39;t seem to do anything either. I am not quite sure how to reverse this particular list, so I am going to attempt making a simpler list and reversing it. . alphabet = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;v&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;] print(&quot;Normal order:&quot;, alphabet, &quot; n&quot;) alphabet.reverse() print(&quot;Reverse order:&quot;, alphabet) . Normal order: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;v&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] Reverse order: [&#39;z&#39;, &#39;y&#39;, &#39;x&#39;, &#39;w&#39;, &#39;v&#39;, &#39;u&#39;, &#39;t&#39;, &#39;s&#39;, &#39;r&#39;, &#39;q&#39;, &#39;v&#39;, &#39;o&#39;, &#39;n&#39;, &#39;m&#39;, &#39;l&#39;, &#39;k&#39;, &#39;j&#39;, &#39;i&#39;, &#39;h&#39;, &#39;g&#39;, &#39;f&#39;, &#39;e&#39;, &#39;d&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;] . That worked! Unfortunately I was not able to find a way to reverse the previous, more complicated list I made but I did reverse a list. . Turning list into a table: . A little about myself: |Key|Value| || | |Class|APCSP| |Date of Birth|March 9, 2005| |Place of Birth|Scottsdale, AZ| |Hobbies|Playing music, Surfing, Playing Lacrosse| .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/08/30/infodb.html",
            "relUrl": "/fastpages/jupyter/2022/08/30/infodb.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;Trent Cardall&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 17 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;BASH&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Trent Cardall &lt;class &#39;str&#39;&gt; age 17 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;BASH&#39;] &lt;class &#39;list&#39;&gt; - langs[3] BASH &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Trent Cardall&#39;, &#39;age&#39;: 17, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;BASH&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Trent Cardall &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # My list InfoDb.append({ &quot;FirstName&quot;: &quot;Trent&quot;, &quot;LastName&quot;: &quot;Cardall&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;trentcardall@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Accord&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Trent&#39;, &#39;LastName&#39;: &#39;Cardall&#39;, &#39;DOB&#39;: &#39;March 9&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;trentcardall@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Accord&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Trent Cardall Residence: San Diego Birth Day: March 9 Cars: Accord . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Trent Cardall Residence: San Diego Birth Day: March 9 Cars: Accord . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Ap Gov",
            "content": "8/26/22: . Event: Passage of a Bipartisan Gun Safety Law . Legislative Process: Bill must pass by majority of house and 60 votes in the Senate. . | the 2nd Amendment is interpreted differently by conservatives and liberals. Liberals believe limits can be placed on the right to bear arms while conservatives believe it means that gun ownership rights should not be limited. . | Not the only gun law under consideration, Assault Weapons ban passed in House but probably won’t pass in Senate . | Uvalde, Texas school shooting made gun control a big topic of debate in the government. Democrats and Republicans worked together to create a gun control bill which they agreed on called the Bipartisan Safer Communities Act (BCSA) . | More specifics on background checks so that guns don’t get in the hands of potentially violent people . Juvenile records for under age of 21 . | Keep guns away from people convicted of abuse . | Provides grants to states to implement red flag laws, where people can petition courts to prevent certain people from owning guns. . | . | Although both Republicans and Democrats generally agreed on the passing of this bill, some think it did not do enough and others think it will make it too hard for civilized people to own guns. . | The passing of this bill signifies that the government truly is under pressure from the public and the people still hold the power. Since gun violence was a pressing topic the government worked quickly to address this issue and make some changes to satisfy the public . | . Event: Recession? . National Bureau of Economic Research defines recession as two quarters of economic decline . | Can lead to unemployment, business failures, bankruptcies . | Pandemic and war in Ukraine are affecting aspects of the economy . | Inflation: rise on prices, decline in purchasing power . | Recession≠depression . | US has experienced 2 quarters of decline and inflation . Fits definition, but economists say it does not necessarily indicate recession . | . | Other signs=higher interest rates, dip in stock market . | Strong signs: Low unemployment, good job growth, low debt . | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2022/08/29/AP-Gov.html",
            "relUrl": "/2022/08/29/AP-Gov.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Bash Hacks",
            "content": "-By typing in the tool you want to verify, followed by --version, you can see what version of the tool you install. For example, running python --version will tell you which version of Python you have installed, which is Python 3.9.12 for me. . -You can use Anaconda to verify tools as well. For example running conda list will reveal all the packages and versions which you have installed. Running conda info will verify which version of Anaconda you have installed. . -By using some of the GitHub commands you can update a repository with BASH. There are many commands involving updating a repository, but some of the main ones that would be used are git pull and git commit. I personally think it is much easier to update a repository through VSCode by using git clone and code . to edit in VSCode and then push the changes onto GitHub, which is what I did to make this post. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2022/08/28/Bash-Hacks.html",
            "relUrl": "/markdown/2022/08/28/Bash-Hacks.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Terminal Commands",
            "content": ". -mkdir: make new directory . -cd:change directory . -pwd: lets you know what directory you are currently in . -ls: lists files in directory . -clear: clear terminal, clean it up when it gets messy . -echo: echos whatever phrase you put in, can be used to organize outputs . -ls -a: list hidden files . -ls -al: lists files in long format, shows certain properties about them which you can only see in terminal. . -code: code file in VSCode .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2022/08/25/Terminal-Commands.html",
            "relUrl": "/markdown/2022/08/25/Terminal-Commands.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Usingmarkdown",
            "content": "Big heading . smaller heading . very small heading . Normal bold italicized .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2022/08/21/usingmarkdown.html",
            "relUrl": "/2022/08/21/usingmarkdown.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Notebook test",
            "content": "Below should be python code . print (&quot;Hello&quot;) .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/08/21/good-notebook.html",
            "relUrl": "/fastpages/jupyter/2022/08/21/good-notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". Hi! My name is Trent Cardall and I am currently a student in AP Computer Science Principles. I do not know a whole lot about coding right now but I have already learned so much in the short time I have been in this class. I am taking this class because I want to see if I can potentially have a future in computer science, a field that will only get bigger from now on. .",
          "url": "https://trentcardall.github.io/cuddly-succotash/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "API",
          "content": ". Live Weather API .",
          "url": "https://trentcardall.github.io/cuddly-succotash/api/",
          "relUrl": "/api/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "JavaScript",
          "content": "Links: . JavaScript notebook . HTML Table .",
          "url": "https://trentcardall.github.io/cuddly-succotash/javascript/",
          "relUrl": "/javascript/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://trentcardall.github.io/cuddly-succotash/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}