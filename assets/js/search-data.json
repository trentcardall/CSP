{
  
    
        "post0": {
            "title": "P3-M 4/28 Introduction to SASS",
            "content": "What is SASS? . Sass is a preprocessor language that&#39;s interpreted into CSS. A preprocessor language takes input data and converts it to an output that&#39;s used as input by another program. This means when you run Sass code, you&#39;re actually converting your code to CSS. That CSS code output is then used directly by a browser. Fun fact CSS stands for Cascading Style Sheets and SASS stands for Syntactically Awesome Style Sheets. . SCSS vs. CSS . Understanding the differences between SCSS and CSS . What is CSS . CSS is the default technology that most programmers use when styling webpage. It is one of the 3 fundamental web technologies along with HTML and JavaScript. HTML manages the structure, JavaScript makes pages interactive, and CSS changes the style by taking a markup language like HTML and describes how it should be presented to the user. . | However, CSS is not very easy to work with lacking a lot features often making using CSS very confusing and difficult or hard to work with on lengthy projects. This is why there are tools like Bootstrap, Sass, and Tailwind that make styling a lot easier and more efficient. We will be using Sass in this course. . | . CSS Example . This is an example of CSS that can be used to change body text of an HTML document | Hack Question:Can you guess what its changing style of the text to? - I think it is changing the text to a gray color (I was wrong it is blue) | . body{ color: #0000FF; font-family: Ariel, sans-serif; font-size: 16px; } . What is SCSS . SCSS is short for Sassy Cascading Style Sheets. | SCSS very similar to CSS but the difference comes with the fact that SCSS extends the functionality of CSS while also making it simpler. What this allows us to do is it enables us to things like nested styling, functions, mixins, variables, inheritance (more on these later) and so on. | . Sass Code Example . $blue: #0000FF; body{ color: $blue; font-family: Ariel, sans-serif; font-size: 16px; } . This example is doing the same thing as the other code segment above but the difference being that here we defined the color as $blue which makes it much easier for us to recall later on. In fact, we have done this before, if you have been using the dark mode/midnight theme then go ahead and navigate your your _sass folder and check out the dark-mode.scss and you&#39;ll see something similar to the example above | . So which one is better to use? . CSS tends to be better for really simple styling where not many complex or nested styles are required and small projects that doesn&#39;t require a lot of customization. | SCSS on the other hand is very good for more complex styling and working with a project with more than one page where maybe lots of customization is needed. Such as the projects we made last and first trimester. | . Modular SCSS . Understanding how to use modular SCSS . Modular SCSS allows you to break multiple different files and then be able to compile them into a single CSS file | How do you do this? Well all you need to do is have _filenames.scss so that is compiled into its own file | Now after adding the to the file name you can import it into you file without the and all the styles will be carried over. | The benefits of a partial is that it allows you to big websites and allows you to break up the code in multiple components and easily make changes instead of having to go through a huge file. | All styles in the partial will be added and can be used into the main file as if they were defined in the main file. | . File 1 _variable.scss . $primary-button-color: #009494; $hover-color: black; $menu-color: #f2f2f2; . File 2 style.scss . We can see the importing of the .scss file&#39;s content into the other main .scss file style.scss | . {@import &#39;variables&#39;; @import &quot;{{ site.theme }}&quot;;} /* &quot;row style&quot; is flexible size and aligns pictures in center */ .row { align-items: center; display: flex; } /* &quot;column style&quot; is one-third of the width with padding */ .column { flex: 33.33%; padding: 5px; } .menu a { // float: left; display: block; color: $menu-color; text-align: center; // padding: 14px 16px; text-decoration: none; } .menu a:hover { background: $primary-button-color; color: $hover-color; } . Nesting . What is nesting? Where did the birds come from? . Nesting is a way to organize your code and make it easier to read. It also helps keep your code DRY (Don&#39;t Repeat Yourself). | Nesting is when you put one selector inside another selector. This is a great way to keep your code organized and make it easier to read. | When we make HTML we often nest different elements within each other and have a clear structure when we look at it. | The problem is that in regular CSS we don&#39;t have that so we need to use SASS to help us organize our code. | . Warning:Don&#39;t nest too much as when the CSS is processed it can make overqualified selectors which can be hard to read and maintain. Which means that it would only target that specific element type and not any other elements that have the same class name. ## Sass Nesting | Through nesting the ul, li, and a selectors within the nav selector makes your CSS better and increases its readability overall. | . nav { ul { margin: 0; padding: 0; list-style: none; } li { display: inline-block; } a { display: block; padding: 6px 12px; text-decoration: none; } } . CSS - Lack of Nesting . We can see that through the lack of nesting the CSS is not as organized and needs extra information to be able to make it more clear exactly what is being targeted. | . nav ul { margin: 0; padding: 0; list-style: none; } nav li { display: inline-block; } nav a { display: block; padding: 6px 12px; text-decoration: none; } . Variables . What is a variable? . A variable is a container that stores information so for instance when you multiple places that refer to one value you can just use the variable name instead of the value. | This is valuable in SASS because it allows you to reuse that value in multiple places throughout you stylesheet. | Variables in CSS preprocessors such as Sass allow you to store information that you can reuse in your stylesheet, such as font stacks, colors, or any other CSS value you anticipate needing. The $ symbol is used in Sass to designate a variable. | . Pro Tip:The reason SASS variables are better than variables in regular CSS is that they are more consider and easier to read with a much simpler syntax. Fun Fact: Variables in SASS came before CSS and often SASS has features long before they are actually added to CSS as a whole. . Variable Example Syntax . $variable-name: value; | Once the sass is processed the variable name is replaced with the value throughout the program. | . $main-font: Calibri, sans-serif; $main-color: #000; $main-color-hover: #000; . Operators . Operators are used to perform operations on variables and other aspects of the language like in python we can use operators to see if values are equal, add, divide, subtract, multiply, etc. | SASS has a lot of operators that can be used to perform operations on variables and other aspects of the language as well. They can include == to check if two values are equal and != to check if two values are not equal | + to add two values together | - to subtract two values | * to multiply two values | / to divide two values | % to find the remainder of two values | &lt; to check if one value is less than another | &gt; to check if one value is greater than another | &lt;= to check if one value is less than or equal to another | &gt;= to check if one value is greater than or equal to another | Also there is and, or, &amp; not to be able to use boolean operations | . | . Operator Example Syntax . Operators are used in this example to perform string concatenation | . // Html &lt;p id=&quot;testing&quot;&gt;original text and&lt;/p&gt; // SASS #testing:after{ content: &quot; some&quot; + &quot; more&quot; + &quot; text&quot;; } // Output original text and some more text . Conditional Statements . There are conditional statements in SASS just like in Python and JavaScript they work the same way as well. | Conditional statements are used to perform different actions based on different conditions. Such as if a certain condition is true then do this, if it is false then do that and so on. | SASS has @if which allows for different styles based on if a boolean expression was true or false. | SASS has @else which allows for different set of styles if the if condition was not met or false. | SASS has @else if which allows for an alternative conditions to be run if the first is not met. | . $color: red; button { @if $color == red { background-color: $color; } } // @else: allows you to provide an alternative set of styles to apply if the condition in the @if statement isn&#39;t met $color: blue; button { @if $color == red { background-color: red; } @else { background-color: $color; } } // @else if: allows you to provide multiple alternative conditions to test $color: green; button { @if $color == red { background-color: red; } @else if $color == blue { background-color: blue; } @else { background-color: $color; } } . Loops In Sass . Loops are present in SASS through the @for and @while decorators, along with @each. | Loops are used to repeat a block of code a certain number of times or until a certain condition is met just like in any other programming language. . For Loops: Are used to iterate through a value like a list or a range of numbers | While Loops: Are used to iterate through a block of code until a certain condition is met such as a value is being equal to a certain value through an incrementing or decrementing a variable or any other condition that is met. | . | When using while loops they can be necessary but it is better to use @each and @for as it will make it clear and be able to compile faster. . | Side Note: In SASS lists care a any group of values that are separated by a comma or a space there is no special brackets used like in python or javascript. Lists can be searched for values however they are immutable meaning that they cannot be changed once they are created. . | . Some Code Examples of Loops and Lists . // A for each loop is used to interact with a group of sizes changing // the size of the element for each item in the list $sizes: 40px, 50px, 80px; @each $size in $sizes { .icon-#{$size} { font-size: $size; height: $size; width: $size; } } // @each: allows you to loop over a list of values and generate styles $colors: red, green, blue; @each $color in $colors { .color-#{$color} { background-color: $color; } } . @debug list.index(1px solid red, 1px); // 1 @debug list.index(1px solid red, solid); // 2 @debug list.index(1px solid red, dashed); // null . @use &quot;sass:math&quot;; /// Divides `$value` by `$ratio` until it&#39;s below `$base`. @function scale-below($value, $base, $ratio: 1.618) { @while $value &gt; $base { $value: math.div($value, $ratio); } @return $value; } $normal-font-size: 16px; sup { font-size: scale-below(20px, 16px); } . $base-color: #036; @for $i from 1 through 3 { ul:nth-child(3n + #{$i}) { background-color: lighten($base-color, $i * 5%); } } // @for: allows you to loop over a range of values and generate styles @for $i from 1 through 3 { .item-#{$i} { width: 100px * $i; } } . Functions in SASS . What is a function? . A function is a block of code that performs a specific task. This is a great method to be able to reuse code and processes in a manner that is more efficient and allows for the reuse of code. We do this all the time in programming languages such as JavaScript and Python. | . SASS functions . Sass Functions allow you to define complex calculations and transformations that can be used throughout your stylesheet and allow you to perform complex operations on values, manipulate data, plus you can generate content dynamically. . | There a are built in functions and ones you can make on your own like languages such as JavaScript and Python. . | SASS functions can be used to perform arithmetic operations, manipulate colors, work with strings, and more. . | Functions in SASS are similar to functions in programming languages, but they can be used within SASS stylesheets to generate CSS code dynamically. . | . Using Built-in Functions . Like Python and Javascript SASS provides a variety of built-in functions for math, color manipulation, string manipulation, and more. | . Math Functions . SASS has many functions that allow you to be able to perform wide range of math operations similar to the ones present in python including more complex operations. | . .round(1.2); // returns 1 .ceil(1.2); // returns 2 .floor(1.2); // returns 1 .abs(-1.2); // returns 1.2 .min(1, 2, 3); // returns 1 .max(1, 2, 3); // returns 3 .random(1, 100); // returns a random number between 1 and 100 . Color Functions . Color is an important component of any website and SASS provides a wide range of functions that allow you to manipulate colors in a variety of ways. | . .lighten(#007fff, 20%); // returns a lighter shade of blue .darken(#007fff, 20%); // returns a darker shade of blue .opacify(#007fff, 0.2); // makes the color more opaque .transparentize(#007fff, 0.2); // makes the color more transparent .mix(#007fff, #ff0000, 50%); // returns a mix of two colors . String Functions . SASS provides a variety of string functions that allow you to manipulate strings. Here are some examples: | . .to-upper-case(&quot;hello world&quot;); // returns &quot;HELLO WORLD&quot; .to-lower-case(&quot;HELLO WORLD&quot;); // returns &quot;hello world&quot; .str-index(&quot;hello world&quot;, &quot;world&quot;); // returns the index of the first occurrence of &quot;world&quot; .str-insert(&quot;hello&quot;, &quot; world&quot;, 5); // inserts &quot; world&quot; into &quot;hello&quot; at position 5 . Creating Custom Functions . In addition to using built-in functions, you can also create your own functions in SASS using the @function name(arguments){} | @return is similar to the return statement in JavaScript and Python. It returns a value from a function. | Functions take input values, perform calculations, and return a result. Here&#39;s an example of a simple function that calculates the area of a rectangle: | . @function rectangle-area($width, $height) { @return $width * $height; } // Usage: $area: rectangle-area(10px, 20px); // Returns 200px . Or you can also make a different kind of function that increases the font size to the factorial of a inputted number. | . @function factorial($number){ $calculated: 1; @for $_ from 1 through $number { $calculated: $calculated*$number; } @return $calculated; } #testing { font-size: factorial(3); } . //Combining functions and loops to achieve different sass effects @function sum($numList){ $sum: 0; @each $num in $numList { $sum: $sum+$num; } @return $num; } @function tri($num){ $sum: 0; @for $i from 1 through $num { $sum: $sum+$num; } @return $sum; } @function max($nums){ $i:0; $value:0px; @while $i&lt;length($nums){ @if $value&lt;list.nth($nums,$i){ $value:list.nth($nums,$i); } } } . Custom functions are very powerful, and can be used to create reusable pieces of code that can be used throughout your stylesheets. . | SASS functions are a powerful feature that allow you to perform complex operations on values, manipulate data, and generate content dynamically. By using built-in functions and creating your own custom functions, you can greatly extend the capabilities of your SASS stylesheets. . | . Mixins . Mixin what is a mix in what are we mixing in? . Mixins are a way to make groups of CSS that you want to reuse throughout your site anywhere you please. | Mixins are a form of template and that you can use to build on top of to make different features later on this prevents you from having to write the same code over and over again. | This is a form of encapsulation in your CSS and is a great way to make your code more organized and easier to read. | Mixins can also take in arguments and be able to be used to apply effects on certain elements if that is a feature you want to add to your site. However unlike functions which also take arguments mixins cannot return values. | To use a mixin declare it with @mixin and then incorporate with @include. | . Inheritance . What is inheritance? . In general programming concept where the child class can inherit properties from the parent class. These properties can be changed and modified in the child class. This prevents code from being repeated and makes the code more usable and flexible. | In SASS we have a similar concept that can be used as well we can create base styles and then have other styles inherit from them and then we can change them as we please. | We can do that by through using @extend .name-of-class and then we can add more styles to it as we please. Simple as that | . Mixin &amp; Inheritance Code Example . // example of @mixin @mixin button { width: auto; height: auto; border-radius: 10px; background-color: #21807c; border: 3px solid black; font-size: 1.5em; display: flex; justify-content: center; align-items: center; grid-column: span 1; grid-row: span 1; // creates smooth animation effect transition: all 0.5s; } // default button theme for calculator and stopwatch buttons. Both will follow the same button format .button { // uses the scss from the @mixin @include button; } /* styling for the calculator clear button */ .calculator-button-clear { // @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e68b1c; } /* styling for the calculator equals button */ .calculator-button-equals { // another @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e70f0f; } . Hacks &amp; Hack Helper - Calculator &amp; Hack Helper - Stopwatch . All hacks are pair/trio hacks, individual hacks are not recommended and will not be accepted unless a valid reason is given. We will respond in the appropriate slack channel if we have any questions. Hacks are due by 11:59pm on Wednesday 4/26/2023 at 11:59 p.m. PST. Any late submission will have a deduction of 0.1 points from their total grade. | . Part 1: Reflections 0.4 Points . Write a short description of each key feature of Sass and compare it to how it to CSS and how using Sass makes your life easier when using all the features. Include examples of how it would have made prior features from past projects simpler to implement. Also answer the questions indicated as hack questions. | . Part 2: Sass Demo 0.5+ Points . Using at least 3 or more sass features create a UI demo that may be used for future or current projects and reflect on how this was more effective than doing the same task using only regular features of CSS. Extra points will be awarded based on creativity and extra addition of features from SASS. | . Credits: Team Mortalicously Sassy 💖 . Part 1 . Variables: Sass allows you to define and use variables to store reusable values such as colors, font sizes, and spacing. This makes it easier to maintain consistency across your stylesheet. | Nesting: Sass allows you to nest your CSS rules inside other rules, which makes it easier to write and read your code. This feature also allows you to target specific elements more easily. | Mixins: Sass provides mixins, which are reusable pieces of code that can be included in different parts of your stylesheet. Mixins allow you to define complex styles once and use them throughout your codebase. | Inheritance: Sass allows you to use inheritance to create a hierarchy of styles. This makes it easier to maintain consistency across your codebase and reduces the amount of code you need to write. | Operators: Sass provides operators such as +, -, *, /, and %. These operators can be used to perform calculations on values, which makes it easier to create responsive designs. | Functions: Sass provides functions that allow you to manipulate values, such as converting between units or performing color operations. Functions can be used to simplify your code and make it more efficient. | . Part 2 . Here is an example of an SCSS file which uses variables, mixins, functions, and operators. | . $primary-color: #007bff; $secondary-color: #6c757d; $font-size-base: 16px; $padding-base: 1rem; @mixin card-style { border: 1px solid $secondary-color; padding: $padding-base; border-radius: 4px; } .card { @include card-style; background-color: #fff; font-size: $font-size-base; h2 { color: $primary-color; font-size: $font-size-base * 1.5; margin-bottom: $padding-base; } p { color: $secondary-color; } } @function px-to-rem($px) { @return ($px / $font-size-base) * 1rem; } .container { max-width: px-to-rem(1200px); margin: 0 auto; } .",
            "url": "https://trentcardall.github.io/cuddly-succotash/student/2023/04/28/P3M-SASSFundamentals.html",
            "relUrl": "/student/2023/04/28/P3M-SASSFundamentals.html",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "P3 4/27 Big Idea 3 Data Structures",
            "content": "Leaderboard Database . How do you set up a database model? . What is a database model . A database model shows the of a database | It fundamentally determines in which manner data can be , , and __ | Some popular database models are relational models, object oriented models, hierarchial models, flat file models, and network models | The one below is an Object-Relational Model which is a combination of a model and an __ model | . Creating SQLAlchemy App . from flask import Flask from flask_sqlalchemy import SQLAlchemy # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///sqlite.db&#39; app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = False app.config[&quot;SECRET_KEY&quot;] = &quot;SECRET_KEY&quot; db = SQLAlchemy(app) # Images storage app.config[&quot;MAX_CONTENT_LENGTH&quot;] = 5 * 1024 * 1024 # maximum size of uploaded content app.config[&quot;UPLOAD_EXTENSIONS&quot;] = [&quot;.jpg&quot;, &quot;.png&quot;, &quot;.gif&quot;] # supported file types app.config[&quot;UPLOAD_FOLDER&quot;] = &quot;volumes/uploads/&quot; # location of user uploaded content . Creating Database Template . from sqlalchemy import Column, Integer, String, Text from sqlalchemy.exc import IntegrityError import json from werkzeug.security import generate_password_hash, check_password_hash # # Leaderboard DB class that maps leaderboard SQL table # class Leaderboard(db.Model): __tablename__ = &quot;leaderboard&quot; # # Leaderboard DB columns for easy, medium and hard points with user info # id = Column(Integer, primary_key=True) _username = Column(String(255), unique=True, nullable=False) _password = Column(String(255), nullable=False) _pointsEasy = Column(Integer, nullable=False) _pointsMedium = Column(Integer, nullable=False) _pointsHard = Column(Integer, nullable=False) # # Leaderboard DB class constructor # def __init__(self, username, password, pointsEasy, pointsMedium, pointsHard): self._username = username self.set_password(password) self._pointsEasy = pointsEasy self._pointsMedium = pointsMedium self._pointsHard = pointsHard # # Leaderboard DB class string representation of an object # def __repr__(self): return &quot;&lt;Leaderboard(id=&#39;%s&#39;, username=&#39;%s&#39;, pointsEasy=&#39;%s&#39;, pointsMedium=&#39;%s&#39;, pointsHard=&#39;%s&#39;)&gt;&quot; % ( self.id, self.username, self.pointsEasy, self.pointsMedium, self.pointsHard, ) # # Returns Leaderboard username # @property def username(self): return self._username # # Sets Leaderboard username # @username.setter def username(self, value): self._username = value # # checks Leaderboard username valid # def is_username(self, username): return self._username == username # # Returns Leaderboard easy points # @property def pointsEasy(self): return self._pointsEasy # # Sets Leaderboard easy points # @pointsEasy.setter def pointsEasy(self, value): self._pointsEasy = value # # Sets Leaderboard medium points # @property def pointsMedium(self): return self._pointsMedium # # Sets Leaderboard medium points # @pointsMedium.setter def pointsMedium(self, value): self._pointsMedium = value # # Returns Leaderboard hard points # @property def pointsHard(self): return self._pointsHard # # Sets Leaderboard hard points # @pointsHard.setter def pointsHard(self, value): self._pointsHard = value # # Returns Leaderboard password # @property def password(self): return self._password[0:10] + &quot;...&quot; # # Sets Leaderboard password # def set_password(self, password): self._password = generate_password_hash(password, method=&#39;sha512&#39;) # # Checks Leaderboard password validity # def is_password(self, password): result = check_password_hash(self._password, password) if result: return True else: return False # # Converts Leaderboard to dictionary # def to_dict(self): return {&quot;id&quot;: self.id, &quot;username&quot;: self.username, &quot;password&quot;: self.password, &quot;pointsEasy&quot;: self._pointsEasy, &quot;pointsMedium&quot;: self._pointsMedium, &quot;pointsHard&quot;: self._pointsHard} # # Converts Leaderboard to string values # def __str__(self): return json.dumps(self.read()) # # Creates Leaderboard database # def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None # # Returns Leaderboard name value pairs # def read(self): return { &quot;id&quot;: self.id, &quot;username&quot;: self.name, &quot;password&quot;: self.uid, &quot;pointsEasy&quot;: self.pointsEasy, &quot;pointsMedium&quot;: self.pointsMedium, &quot;pointsHard&quot;: self.pointsHard } # # Updates Leaderboard DB rows for points and user data # def update(self, username=&quot;&quot;, password=&quot;&quot;, pointsEasy=&quot;&quot;, pointsMedium=&quot;&quot;, pointsHard=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(username) &gt; 0: self.username = username if len(pointsEasy) &gt; 0: self.pointsEasy = pointsEasy if len(pointsMedium) &gt; 0: self.pointsMedium = pointsMedium if len(pointsHard) &gt; 0: self.pointsHard = pointsHard if len(password) &gt; 0: self.set_password(password) db.session.add(self) db.session.commit() return self # # Delets Leaderboard row from teh DB # def delete(self): db.session.delete(self) db.session.commit() return None . Initialization of Data . # Initializes Leaderboard DB with test data # def init_leaderboards(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; l1 = Leaderboard(username=&quot;bob&quot;, password=&quot;apple&quot;, pointsEasy=2, pointsMedium=5, pointsHard=3) l2 = Leaderboard(username=&quot;bobby&quot;, password=&quot;appley&quot;, pointsEasy=20, pointsMedium=50, pointsHard=30) l3 = Leaderboard(username=&quot;bobbert&quot;, password=&quot;appled&quot;, pointsEasy=200, pointsMedium=500, pointsHard=300) l4 = Leaderboard(username=&quot;bobruth&quot;, password=&quot;appler&quot;, pointsEasy=100, pointsMedium=300, pointsHard=500) leaderboards = [l1, l2, l3, l4] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for l in leaderboards: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = l.create() print(f&quot;Created new uid {object.username}&quot;) db.session.add(l) db.session.commit() except: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {l.username}, or error.&quot;) init_leaderboards() . DO THESE FOR THIS SECTION . fill in the blanks | add a new leaderboard, and edit the bobbert leaderboard; add proof with a screenshot of the sqlite.db | add a new set of keys and values to the leaderboard; add proof with a screenshot of the sqlite.db | . Picture Database . | Used CRUD methods which have create, read, update, and delete rows in the table. There is a function called initEasyImages which populates the &#39;Images&#39; table with data. | The init method is used to create a new row in the table with a given imagePath, xCoord, yCoord, and difficulty. The repr method returns a string representation of the object when it is printed. | The table has five columns: id, _imagePath, _xCoord, _yCoord, and _difficulty. | | This part of the code defines getter and setter methods for the columns in the Images model. It sets and retrieves the metadata of the image. | | The initEasyImages function initializes the database with image metadata for easy difficulty images. | . from sqlalchemy import Column, Integer, String, Text, LargeBinary from sqlalchemy.exc import IntegrityError from pathlib import Path class Images(db.Model): __tablename__ = &#39;images&#39; id = Column(Integer, primary_key=True) _imagePath = Column(Text, unique=True, nullable=False) _xCoord = Column(Integer, nullable=False) _yCoord = Column(Integer, nullable=False) _difficulty = Column(Integer, nullable=False) def __init__(self, imagePath, xCoord, yCoord, difficulty): self._imagePath = imagePath self.xCoord = xCoord self.yCoord = yCoord self.difficulty = difficulty def __repr__(self): return &quot;&lt;image(id=&#39;%s&#39;, imagePath=&#39;%s&#39;, xCoord=&#39;%s&#39;, yCoord=&#39;%s&#39;, difficulty=&#39;%s&#39;)&gt;&quot; % ( self.id, self.imagePath, self.xCoord, self.yCoord, self.difficulty ) @property def imagePath(self): return self._imagePath @imagePath.setter def imagePath(self, value): self._imagePath = value @property def xCoord(self): return self._xCoord @xCoord.setter def xCoord(self, value): self._xCoord = value @property def yCoord(self): return self._yCoord @yCoord.setter def yCoord(self, value): self._yCoord = value @property def difficulty(self): return self._difficulty @difficulty.setter def difficulty(self, value): self._difficulty = value def to_dict(self): return {&quot;id&quot;: self.id, &quot;imagePath&quot;: self._imagePath, &quot;xCoord&quot;: self._xCoord, &quot;yCoord&quot;: self._yCoord, &quot;difficulty&quot;: self._difficulty} def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;path&quot;: self.imagePath, &quot;xCoord&quot;: self.xCoord, &quot;yCoord&quot;: self.yCoord, &quot;difficulty&quot;: self.difficulty } # CRUD update: updates user name, password, phone # returns self def update(self, path=&quot;&quot;, xCoord=&quot;&quot;, yCoord=&quot;&quot;, difficulty=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; xCoord = int(xCoord) yCoord = int(yCoord) if path: self.imagePath = path if xCoord &gt;= 0: self.xCoord = xCoord if yCoord &gt;= 0: self.yCoord = yCoord if difficulty in range(3): self.difficulty = difficulty db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None . def initEasyImages(): with app.app_context(): db.create_all() image_dir = Path.cwd()/&quot;images/easy&quot; images_paths = [i.name for i in image_dir.iterdir()] images = [Images(&quot;images/easy/&quot; + image, 250, 250, 0) for image in images_paths] for image in images: try: image.create() print(&quot;Successfully added entry&quot;) except: db.session.remove() print(&quot;Error adding image: &quot;, image.imagePath) initEasyImages() . Popcorn Hacks . The init method initializes a new Images object with the following parameters: imagePath, xCoord, yCoord, and __. | In the Images class, the tablename attribute specifies the name of the __. | The update method updates the values of the object&#39;s attributes imagePath, xCoord, yCoord, and difficulty based on the input parameters, and then uses the db.session.commit method to __ the changes to the database. | The db module used in this code is part of a larger library called __, which provides a set of tools for working with databases in Python. | . Picture Encoding . Essential Question: What are some methods that we could store and access images in the backend, and how can we send them to a frontend application? . The image encoding process for this project is done within the endpoints created on our backend application. The overarching process is split into three seperate sub-processes, each handling a different level of game-difficulty. For this lesson, we will look at the easy images sub-process as our example. . def get_random_easy_image(): images = Images.query.filter_by(_difficulty=0).all() image = random.choice(images) return image . This procedure is a void function that takes in no arguments directly, but does access the database via the Images object imported from the models that we created . The first line filters all database entries and searches for all image entries with the difficulty column set to 0, which we established as the identifying factor for easy images. The .all() method attached to the end of the query serves to return all matching image objects in a list called image. . The procedure finally returns a random image using the random.choice method. . class ImagesAPI: class _EasyImages(Resource): def get(self): image = get_random_easy_image() json_data = {} if image: image_path = project_path + &quot;/&quot; + image.imagePath with open(image_path, &quot;rb&quot;) as image_file: json_data[&quot;bytes&quot;] = str(base64.b64encode(image_file.read()))[2:][:-1] json_data[&quot;xCoord&quot;] = image.xCoord json_data[&quot;yCoord&quot;] = image.yCoord return jsonify(json_data) . If the first procedure locates and selects the image, the second procedure then encodes, formats, and returns the JSON data containing the image and its metadata. . The procedure first calls the get_random_easy_image() procedure created earlier to store our image object and also initializes an empty dictionary to store our json data. . If a valid image object is found, the procedure will attempt to create an absolute path to the image file on the computer running flask application. This is achieved by concatenating the absolute path of the working project directory to the relative image path stored in the database. The aboslute path of the directory is generated in our namespace package (__init__.py) in our _nighthawkguessr_api_ package. The line calculating the project path is shown below, and uses the Path object from the pathlib library. . project_path = Path.cwd().as_posix() . After creating the image path, the procedure attempts to open the image file, and procedes to use the base64.b64encode method to encode the image file bytes into base64 data. This is convinient for us as HTML on the frontend pages allows us to render images with base64 bytes (Not sure about normal image bytes). The base64 bytes are then encoded into a python literal string in order to be jsonified and displayed on the api endpoint. The [2:][:-1] appended to the end is a type of string slicing which removes the b&#39; generated at the start of the data and the &#39; generated at the end of the data. These extraneous characters are used to indicate a base64 string, and are not part of the original data. . The procedure finally appends the metadata (position of the right coordinates on the map) to the json_data dictionary, completing the process. . Finally, the procedure returns the JSONified data, which is accessible from our API. As you can see, the images we process are extremely large and possess high resolution (typically a few megabytes!) . Popcorn Hack: . Please write a few sentences answering the essential question, &quot;What are some methods that we could store and access images in the backend, and how can we send them to a frontend application?&quot; . - . Endpoints . What are endpoints and how do we use them to transfer data from one part of the internet to another? . Backend: . The backend creates endpoints that are used to edit the properties of the database constructed by the model. | ____, ____, ____, and ____ methods are used in order to define HTTP endpoints in the API. These endpoints are based on requests that can be made to __ the database. | Variables defined in the __ file are used to call data from the database in order to be manipulated. | . | . Methods in Backend Example . Modules are being imported with specified classes which are used later in the program. Blueprint: used to organize __ and functions | request: used to access data sent to the Flask app. through the __ request | Api: creates a Flask instance that handles requests | Resource: this allows for the definition of custom HTTP requests | reqparse: used to __ (sort and search) and validate data that is requested | . | The blueprint and api are then defined as variables and are used to store any future __ that is requested. | Some preliminary functions, such as find_by_username, are created to be used later in the API code, allowing for __ code. In this case, these functions are used to search through the database to find specific usernames. | . | . from flask import Blueprint, request from flask_restful import Api, Resource, reqparse # setting variables used to store future data leaderboard_bp = Blueprint(&quot;leaderboards&quot;, __name__) leaderboard_api = Api(leaderboard_bp) # pre-made function created to search for usernames, allows for simplified program def find_by_username(username): users = Leaderboard.query.filter_by(_username=username).all() return users[0] . GET Method . This method is used to __ specific data points from the database by searching through the usernames. | This will be different for each type of database being made, however the general format stays the same. Since this is a text database, to pull specific information from the database, the API will __ through the data using the username, which is unique. | The function defined previously, find_by_username(), is used to search through the database and pull the specific data point that is being searched. | If the user exists, the data of that user will be returned, being sent to the __ of the program. | If a user isn&#39;t found, an error will be returned that the user does not exist. | . | In general, the program will always be searching for a piece of information that is unique and that will be used to pull data to wherever it is being requested. | . def get(self): # requested username turned into variable for later use username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) # username used to search for data and the found data is made into a variable user = find_by_username(username) if user: # data is sent to the frontend return user.to_dict() # error checking return {&quot;message&quot;: user}, 404 . POST Method . This method is used to __ a specific piece of information in the database based on searching by usernames. | This is again different for each database that is made, however the general structure stays the same. In this example, a parser is being used to extract data from an incoming __. In this case, the RequestParser class is used from the Flask module. All required arguments are added to the parser, specifying what type of data it is. | The ____ variable is added in order to parse and store all incoming data. | . | The variable leaderboard is created to make a new object that will contain the values from the incoming data. | The function will attempt to add a new entry in the leaderboard database and return a status of a successful addition of the data. | If there is an error in the data being inputted, a status code of __ will be returned. | . | . def post(self): # using parsers to gather and data that is to be posted and validate it&#39;s true parser = reqparse.RequestParser() parser.add_argument(&quot;username&quot;, required=True, type=str) parser.add_argument(&quot;password&quot;, required=True, type=str) parser.add_argument(&quot;pointsEasy&quot;, required=True, type=int) parser.add_argument(&quot;pointsMedium&quot;, required=True, type=int) parser.add_argument(&quot;pointsHard&quot;, required=True, type=int) # variable made to store data args = parser.parse_args() # variable created to format all data into one place and send to database for logging leaderboard = Leaderboard(args[&quot;username&quot;], args[&quot;password&quot;], args[&quot;pointsEasy&quot;], args[&quot;pointsMedium&quot;], args[&quot;pointsHard&quot;]) try: # data is sent to the database for storage db.session.add(leaderboard) db.session.commit() return leaderboard.to_dict(), 201 except Exception as e: # error checking db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . PUT Method . This method is used to __ a specific piece of information in the database based on searching by usernames. | For each data base that is made, there will be different specific but the overall structure stays the same. First, the username variable is defined, which __ the requested username and sets it as a variable that will be used later to edit a specific dataset. | The function find_by_username() is again used to search through the data to look for the username requested. This is set to a variable to be used later. | If the username is found in the database, the rest of the dataset is updated with the new __ requested. This is updated into the database. | If there is an error found with the data requested of it the user isn&#39;t found, an error is returned. | . | . def put(self): # variable created to make requested username into something that can be used to search for data in future username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) try: # attempts to find the data in the database user = find_by_username(username) if user: # if the data is found, the data points are updates user.pointsEasy = int(request.get_json().get(&quot;pointsEasy&quot;)) user.pointsMedium = int(request.get_json().get(&quot;pointsMedium&quot;)) user.pointsHard = int(request.get_json().get(&quot;pointsHard&quot;)) db.session.commit() return user.to_dict(), 201 else: # if user not found, error is returned return {&quot;message&quot;: &quot;leaderboard not found&quot;}, 404 except Exception as e: # checks for errors in request db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . DELETE Method . This method is used to __ a specific information from the database, again searching by username. | The overall structure stays the same between different databases, but the specific __ will need to be changed to personalize the database. A variable for the username is created in order to search for for the user name requested later in the code with the function find_by_username(). | If the user is found, the user is deleted, along with that user&#39;s data and the change is saved to the database. | If the user isn&#39;t found or if an error is found with the data requested, an __ is returned. | . | . def delete(self): # username variable defined to store requested value username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) try: # finds the username and stores data in variable user = find_by_username(username) if user: # if the user is found, the user and their data is deleted db.session.delete(user) db.session.commit() return user.to_dict() else: # if user not found, error is returned return {&quot;message&quot;: &quot;leaderboard not found&quot;}, 404 except Exception as e: # error checking for request error db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . Displaying the Full Database . Another class is created in order to __ the entire database at once and also to delete the entire database if necessary. | This uses the same functions as before to GET and DELETE the data, however it is modified slightly to look through the entire database abd display or delete all data points. | An example of where this would be useful is to create a table of data in the __. | . class LeaderboardListAPI(Resource): # GET method def get(self): try: # attempts to find the entire database requested and is stored in variable leaderboards = db.session.query(Leaderboard).all() # sends back the entire database return [leaderboard.to_dict() for leaderboard in leaderboards] except Exception as e: # error checking for request errors db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 # DELETE method def delete(self): try: # deletes entire database db.session.query(Leaderboard).delete() db.session.commit() return [] except Exception as e: # checks for errors in request db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . Popcorn Hacks . Please answer these questions to earn points for the popcorn hacks. . What are the four HTTP request methods that are used with Flask? | What is a parser and how would it be aid with data validation? | What is the role endpoints in Flask? | Frontend and How it Communicates to Backend . This first part of the frontend logic simply finds out of the site is running locally or not, off of which is figures out whether or not to pull data from the local backend link or the global backend link. In this example, a global backend link hasn&#39;t been sent, however it would go in the second set of quotations after the local address. This isn&#39;t something you need to know, but it is nice to use when developing full stack applications. . // checks if site is run locally const isLocalhost = Boolean( window.location.hostname === &quot;localhost&quot; || window.location.hostname === &quot;[::1]&quot; || window.location.hostname.match(/^127(?: .(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/) ) // defines database url const api = isLocalhost ? &quot;http://localhost:8200&quot; : &quot;&quot;; . GET Method . This method is more complicated in terms of requesting, simply because in order to, for example, print all data points into a __, the function needs to iterate through the entire database. | In this example, the function getList() is used to asynchronously fetch the entire database and set it to a variable called list. The list is returned for later use outside of this __ in order to print the data. | . | . Printing the Data . In order to print the data, the function getList() is run and once it is run, it __ through the data to pull out each individual data point and enter it into the function used to make the table. For each class in the database, which is each row in the database, the variables corresponding to that specific class are pulled and inserted into the addTask() function as __ to create the table of users. | . | The function addTask() is used to create the visual table that the user sees. A row is created and for each table cell in that row, the data is added by iterating through the __ of variables that are parameters pulled directly from the database. | A new row is added into table for each new class of information pulled from the database. | . | . // fetches entire database const getList = async () =&gt; { // stores it in variable list const list = await fetch(api + &quot;/leaderboardList&quot;).then((r) =&gt; r.json()); return list }; // goes through entire database and pulls each individual class getList().then(list =&gt; { // for each class (row), data is pulled and added into addTask() function to be put in visual table list.forEach(cls =&gt; { addTask(cls.username, cls.pointsEasy, cls.pointsMedium, cls.pointsHard) }) }) // adds visual representation of data in table function addTask(username, pointsEasy, pointsMedium, pointsHard) { // array of variables defining data points var tableCells = [username, pointsEasy, pointsMedium, pointsHard] // creates new row in variable var row = document.createElement(&#39;tr&#39;) // goes through entire data set and places data into cells for (var i = 0; i &lt; tableCells.length; i++) { var tableCell = document.createElement(&#39;th&#39;) tableCell.textContent = tableCells[i] tableCell.className = &#39;cell&#39; row.appendChild(tableCell) } // creates new row as child of schedule element schedule.appendChild(row) } . POST Method . This method is used to push data to the backend using the __ POST method. The function addData is defined with the parameters that are going to be pushed into the backend. | An object is created to define the variables that are going to be pushed into the backend. This is basically the __ string that will be sent to the backend to get decoded and inserted into the database. | The fetch() function is called with the api variable, which is a variable representing the url for the backend API, and the extension specific to where the data will be posted, in this case being /leaderboard. The method, __, and body of the data are defined in order to complete a successful HTTP request to the backend. The object data which was created earlier, is converted to a JSON string here and sent to the backend. | . | If an error is detected, it is returned and the request will fail. | . | . // calls addData function function addData(username, password, pointsEasy, pointsMedium, pointsHard){ // creates object defining the variables that will be added to the backend, corresponding with the backend variables let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // POST method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . PUT and DELETE Methods . These two methods are almost identical to the POST method above in the way they work, the only difference being that the __ requested is different. The name of the function defined is also changes, in this case being editData() and deleteData(). | . // editing function defined function editData(username, password, pointsEasy, pointsMedium, pointsHard){ // has object with variables that are required in backend let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // PUT method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;PUT&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . // deleting function defined function deleteData(username, password, pointsEasy, pointsMedium, pointsHard){ // object defined with variables that are same as backend let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // DELETE method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;DELETE&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . Calling Images (GET Method) . The process for calling images is basically the same as anything else, except you need to be able to reconstruct the images based on the __ that is requested from the backend. | In this case, the image in the api is being called to the frontend and is returned as the variable list. This is then inserted directly into the html by getting the element that needs to be edited and styling with __ by using the built-in function data:image/png;base64, which translated from bytes to pixel. | . | . // GET method calling info from backend url const getList = async () =&gt; { const list = await fetch(api + &quot;/api/images/GetEasyImage&quot;).then((r) =&gt; r.json()); return list }; // inserting image into frontend getList().then(list =&gt; { document.getElementsByTagName(&quot;body&quot;)[0].style = &quot;background-image: url(&#39;data:image/png;base64, &quot; + list.bytes +&quot;&#39;);&quot; }) . Popcorn Hacks . Please answer these questions to earn points for the popcorn hacks. . How is data for images stored in a Flask API and how is it displayed on the frontend when requested? | What is the fetch() function and how is it used in frontend logic? | How is data formatted and sent to the backend? (mention JSON in your answer) | Time and Space Complexity of Algorithms . The lesson for time and space complexity of algorithms will consist of demonstrations of sorting algorithms and the different time complexities that they come with on a small scale. This can be acomplished using things such as a deck of cards or even with actual people. An example of how this will work is laying out the cards in a random order on the table, and demonstrating different ways of sorting it. From methods such as bubble sort to methods such as bogo sort, it will be really easy to see exactly how much time it would take for these different sorting algoritms to complete. Then after that, it is easy to understand the concept of time complexity when given a real world example. . Space complexity can be demonstrated by using the same method, however, adding in the extra step of having the cards in a pile. This will show how much space is needed to complete the sorting algorithm. This will easily reveal the concept of space complexity because it allows people to witness a real world, physical example of the concept, turning a really hard to grasp concept into something that is easy to understand. . Additionally, we are also going to analyze certain algorithms within our project to show how such analysis is applicable to real world projects. . Essential Question: What is the quicksort algorithm, and how does it work? How does it&#39;s time and space complexities scale with input sizes? . QuickSort Algorithm . The main algorithm we&#39;ve employed is an recursive implementation of quickSort in the backend to sort the database entries to obtain the user with the highest overall score. Typically this algorithm is implemented to sort in ascending order, but to make it easier to extract the top 10 users, we sill be modifying the algorithm to sort in descending order (so the top players show up first in the list). . class LeaderboardTop10(Resource): def partition(self, arr, lo, hi): pivot = arr[hi][1] # Pivot value set to the 2nd index of the last element pivot_pos = lo - 1 # Set our base pivot position, ensure that lower picoit index == lo for idx in range(lo, hi): # Iterate over all elements in the partition array if arr[idx][1] &gt;= pivot: # Found an element creater than pivot pivot_pos+=1 # Increment correct position for pivot arr[pivot_pos], arr[idx] = arr[idx], arr[pivot_pos] # Swap the larger element with the element at the current pivot position arr[pivot_pos + 1], arr[hi] = arr[hi], arr[pivot_pos + 1] # Swap element at pivot position with the pivot element return pivot_pos+1 # Return index of pivot element def qSortUserList(self, arr, lo, hi): if lo &lt; hi: last_pivot = self.partition(arr, lo, hi) self.qSortUserList(arr, lo, last_pivot-1) self.qSortUserList(arr, last_pivot+1, hi) def get(self): users_list = get_user_list() top10 = {} self.qSortUserList(users_list, 0, len(users_list)-1) for user in users_list: top10[user[0]] = user[1] print(top10) if len(top10) &lt;= 10: return top10 return top10[:10] . To understand how the algorithm first, we must first familiarize ourselves with the process. . Our backend grabs all users from our leaderboard | Returns all users and their scores in a 2-D array, each element is a list of length two that contains the username and cumulative score of the player | The sorting algorithm will use the second element representing the user score to sort the array of users. ┌─────────────────────┐ ┌──────────────────┐ ┌─────────────────┐ │ │ │ │ │ │ │ │ │ Split │ │ display │ │ Database │ │ the ├──────────────► sorted list │ │ │ │ List into │ │ on endpoint │ │ │ │ top 10 users │ │ │ └──────────┬──────────┘ └─────────▲────────┘ └─────────────────┘ │ │ │ │ │ │ │ │ ┌──────────▼──────────┐ ┌─────────┴────────┐ │ │ │ │ │ 2-D User Array │ │ QuickSort │ │ ├───────────────► │ │ [(username, score)] │ │ Algorithm │ │ │ │ │ └─────────────────────┘ └──────────────────┘ . Our quickSort algorithm consists of 2 procedures, a partition() procedure that pivots and sorts individual elements, and a qSortUserList() that performs recursion which finishes the sorting. | The Logic . The partition procedure will serve to &quot;partition&quot; our list into 2 parts, a smaller portion and a larger portion around a certain pivot value (Note: These portions don&#39;t have to sorted yet!). . Partition procedure . First, partition selects a certain element in a list to be a ___. This pivot value will be used to make comparisons to every other value in the array. For simplicity, we have selected our pivot element as the last element in the unsorted list. The procedure defines a pivot_pos variable to denote the correct position of the pivot index after each iteration. Although it may seem weird that the variable intially starts with a value of 0-1 = -1, this negative index is resolved by the return statement, which always returns an index that&#39;s one higher than pivot_pos. This serves to ensure that the lowest pivot index would be 0, which is the smallest element in any given partition. . pivot = arr[hi][1] pivot_pos = lo - 1 . The partition will then iterate over each element in the list from the starting and ending indexes indicated by the parameters. if a particular value is found to be larger than the pivot, the algorithm well then increment the recorded pivot position and swap the pivot with the found element. . for idx in range(lo, hi): if arr[idx][1] &gt;= pivot: pivot_pos+=1 arr[pivot_pos], arr[idx] = arr[idx], arr[pivot_pos] . Finally, the partition procedure swaps the element at the pivot_pos+1 index with our pivot element at the hi index to place the pivot at it&#39;s rightful place. We know that pivot_pos+1 must be smaller than hi because it did not trigger the conditional to increment the `pivot_pos+1`` index. At last, the pivot_pos is incremented and returned to serve as an indicator of where our two partitions split. . arr[pivot_pos + 1], arr[hi] = arr[hi], arr[pivot_pos + 1] return pivot_pos+1 . qSort procedure . If the parition procedure splits our list into smaller and larger regions, then our qSort procedure ensures that these regions are in order. It&#39;s hard to explain, but the procedure iterates over each paritition, repeating the paritition process, setting new pivot values, and correctly places the pivot values at their correct sorted order. . The procedure first checks if the lower index is smaller than the higher index, to ensure that our parition has a length greater than 1. If this check passes, the procedure then calls the partition procedure to both split our list into the two distinct regions and also the index of our correctly placed pivot value. The procedure then invokes itself again on the larger interval (replacing hi to be the partition index-1 since the previous pivot is already sorted), and also on the smaller interval (replacing lo to be partition index+1). . Eventually, the qSort procedure will iterate through all elements in the list while parition places each element at the correct position, giving us the final sorted list. . Complexity analysis . To analyze time complexity, we must analyze the partition and qSort procedures. . For the qSort procedure, because we divide the array into 2 halves during each function call, our number of function calls scales proportionally to ___, where ___ is the length of the input array. However, within each function call, we also call the partition procedure, which contains an for-loop that iterates over each element in the partioned array, comparing it to a pivot value. We are well familiar with since loops, and can safely say that runtime scales proportionally to the length of the partition array. Due to this, we can conclude that our iteration time complexity scales ___. Thus for each iterative process, our timerun scales proportionally to ___. . Finally, we could multiply our two complexities together to get a representation of our overall complexity. Thus, the asymptotic notation for a time complexity could be represented as _, where n is the length of the input array. Keep in mind, Big-Oh notation is not a function that returns the accurate runtime for any given input, but rather only gives us a model to see how runtime scales with increasing input sizes. . Space complexity for this program is much easier to analyze. Because the array is sorted in-place (meaning we don&#39;t create other placeholders or copies), we require no additional space to sort this array. However, recursive function calls may require extra storage on the call stack. Since we found the number of recursive calls to be asymptotic to _, we can conclude that quickSort has an O(1) space complexity for an iterative method, and an O(logn) space complexity for a recursive method. . Popcorn Hack . Please answer our EQ for this section: What is the quicksort algorithm, and how does it work? How does it&#39;s time and space complexities scale with input sizes? . - . Hacks - Frontend and Backend . Please clone these two repositories: . Frontend | Backend | . Directions: . You will be creating a full stack of a text and image database which you will code in the Flask Backend and pull information to sort in the Frontend. . You need to have coded a fully working CRUD in the Flask, which you can show working with Postman, however you only need to show the Frontend reading and displaying data from the backend. . You may use the code we showed to you today in class in order to code the both the Frontend and Backend. . Follow the directions in the comments in the Flask Backend and the ReadMe in the frontend before starting. . Hacks - QuickSort . On this notebook, try recreating the original quicksort algorithm from our modified version. For an additional challenge, try abstracting the partitioning process through list comprehension! . After creating a successful algorithm, either create a diagram showing how the algorithm works, or a diagram that illustrates the time and/or space complexity of a recursive approach. . Hacks Helpers . If you need help with your hacks, you can check out our project repos to see how we did it. . Frontend Table | Frontend Image | Backend | . You can also message us on the coding Slack channel for additional help. . Points . Popcorn Hacks - 0.1 pts | Full Stack - 0.4+ 0.5 extra for styling html page | . | QuickSort Hacks - 0.3+ 0.5 extra for implementing quicksort | . | . HACKS ARE DUE SATURDAY (4/29) 11:59 PM .",
            "url": "https://trentcardall.github.io/cuddly-succotash/student/2023/04/27/lesson_student.html",
            "relUrl": "/student/2023/04/27/lesson_student.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "P3-M 4/25 Simulations",
            "content": "Objectives . Understand how computers can be used to represent real-world phenomena or outcomes | Compare simulations with real-world contexts. | Implement code to mimic real world situations, problems, or phenomena. | What are simulations by College Board definition? . Simulations are _ that mimic more complex objects or phenomena from the real world Purposes include drawing inferences without the __ of the real world | . | Simulations use varying sets of values to reflect the ___ state of a real phenomenon | Often, when developing a simulation, it is necessary to remove specific __ or simplify aspects Simulations can often contain __ based on which details or real-world elements were included/excluded | . | Simulations allow the formulation of ___ under consideration | Variability and ___ of the world is considered using random number generators | Examples: rolling dice, spinners, molecular models, analyze chemicals/reactions... | . . Analyzing an Example: Air-Traffic Simulator . Say we want to find out what the optimal number of aircrafts that can be in the air in one area is. | A simulation allows us to explore this question without real world contraints of money, time, safety Unfortunately we can&#39;t just fly 67 planes all at once and see what happens | . | Since the simulation won&#39;t be able to take all variables into control, it may have a bias towards one answer | Will not always have the same result | . Functions we often need (python) . import random # a module that defines a series of functions for generating or manipulating random integers random.choice() #returns a randomly selected element from the specified sequence random.choice(mylist) # returns random value from list random.randint(0,10) #randomly selects an integer from given range; range in this case is from 0 to 10 random.random() #will generate a random float between 0.0 to 1. . TypeError Traceback (most recent call last) /Users/Trent/vscode/cuddly-succotash/_notebooks/2023-04-25-P3M-Simulations.ipynb Cell 7 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-04-25-P3M-Simulations.ipynb#W6sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; import random # a module that defines a series of functions for generating or manipulating random integers -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-04-25-P3M-Simulations.ipynb#W6sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; random.choice() #returns a randomly selected element from the specified sequence &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-04-25-P3M-Simulations.ipynb#W6sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; random.choice(mylist) # returns random value from list &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-04-25-P3M-Simulations.ipynb#W6sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; random.randint(0,10) #randomly selects an integer from given range; range in this case is from 0 to 10 TypeError: choice() missing 1 required positional argument: &#39;seq&#39; . Functions we often need (js) . // Math.random(); returns a random number // Math.floor(Math.random() * 10); // Returns a random integer from 0 to 9: . College Board Question 1 . Question: The following code simulates the feeding of 4 fish in an aquarium while the owner is on a 5-day trip: . numFish ← 4 foodPerDay ← 20 foodLeft ← 160 daysStarving ← 0 REPEAT 5 TIMES { foodConsumed ← numFish * foodPerDay foodLeft ← foodLeft - foodConsumed IF (foodLeft &lt; 0) { daysStarving ← daysStarving + 1 } . } . This simulation simplifies a real-world scenario into something that can be modeled in code and executed on a computer. | Summarize how the code works: | . Examples . Card Flip . import random cards = [&quot;Ace&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;Jack&quot;, &quot;Queen&quot;, &quot;King&quot;] suits = [&quot;Diamonds&quot;, &quot;Hearts&quot;, &quot;Spades&quot;, &quot;Clubs&quot;] print(random.choice(cards) + &quot; of &quot; + random.choice(suits)) . King of Clubs . Coin Flip . import random def coinflip(): #def function randomflip = random.randint(0, 2) #picks either 0 or 1 randomly if randomflip &gt;= 1: #assigning 0 to be heads--&gt; if 0 is chosen then it will print, &quot;Heads&quot; print(&quot;Heads&quot;) else: if randomflip == 0: #assigning 1 to be tails--&gt; if 1 is chosen then it will print, &quot;Tails&quot; print(&quot;Tails&quot;) #Tossing the coin 5 times: t1 = coinflip() t2 = coinflip() t3 = coinflip() t4 = coinflip() t5 = coinflip() . Heads Heads Tails Heads Heads . Your turn: Change the code to make it simulate the flipping of a weighted coin. . Adding images (in Python) . Add a heads and tails images into your images directory with the correct names and run the code below | . import random # importing Image class from PIL package from PIL import Image # creating a object im = Image.open(r&quot;images/HeadsOn.jpg&quot;) image = Image.open(r&quot;images/TailsOn.jpg&quot;) i=random.randint(0,1) if i == 1: print(&quot;heads&quot;) display(im) else: print(&quot;tails&quot;) display(image) . heads . In order to display an image in python, we can use the PIL package we previously learned about. . Spin the Wheel . import random from PIL import Image print(&quot;Spin the wheel!&quot;) print(&quot;-&quot;) n = 300 blue = 0 red = 0 for i in range(n): spin = random.randint(1,2) if spin == 1: # head blue = blue + 1 else: # tail red = red + 1 print(&#39;Number of blue:&#39;, blue) print(&#39;Number of red:&#39;, red) if blue &gt; red: print(&quot;Blue wins!&quot;) if red &gt; blue: print(&quot;Red wins!&quot;) if red == blue: print(&quot;Tie!&quot;) . Spin the wheel! - Number of blue: 143 Number of red: 157 Red wins! . Your turn: Add a visual to the simulation! . Population Growth and Plots . import random totalPopulation = 50 growthFactor = 1.00005 dayCount = 0 #Every 2 months the population is reported while totalPopulation &lt; 1000000: totalPopulation *= growthFactor #Every 56th day, population is reported dayCount += 1 if dayCount == 56: dayCount = 0 print(totalPopulation) . 50.14019267336515 50.28077842644361 50.421758361373264 50.5631335833823 50.704905200797775 50.847074325054315 50.98964207070282 51.13260955541927 51.27597790001347 51.41974822843774 51.563921667795874 51.70849934835185 51.85348240353876 51.99887196996765 52.14466918743647 52.290875198939005 52.43749115067384 52.5845181920533 52.731957475712534 52.87981015751845 53.028077396578915 53.17676035525173 53.325860199153716 53.47537809717 53.62531522146305 53.775672747481956 53.92645185397153 54.0776537229816 54.22927953987637 54.38133049334356 54.533807775403844 54.68671258142016 54.840046110106975 54.993809563539834 55.14800414716474 55.302631069807575 55.45769154368362 55.613186784406984 55.769118011000224 55.92548644590379 56.082293314985726 56.239539847551235 56.39722727635229 56.55535683759732 56.71392977096098 56.87294731959368 57.032410730131446 57.19232125270578 57.35268014095325 57.51348865202554 57.67474804659919 57.83645958888546 57.998624546640265 58.161244191174156 58.324319797362236 58.48785264365415 58.651844012084126 58.81629518828111 58.98120746147867 59.14658212452524 59.312420473894186 59.47872380969402 59.645493435678574 59.81273065925718 59.98043679150499 60.14861314717315 60.31726104469929 60.486381806217665 60.65597675756963 60.82604722831395 60.99659455173736 61.16762006486491 61.33912510847044 61.51111102708713 61.68357916901805 61.85653088634677 62.029967534947765 62.2038904744973 62.3783010684839 62.5532006842192 62.72859069284855 62.9044724693617 63.08084739260377 63.25771684528589 63.43508221399618 63.61294488921051 63.791306265303454 63.9701677405592 64.14953071718247 64.32939660130967 64.50976680301973 64.69064273634523 64.87202581928359 65.05391747380793 65.23631912587847 65.41923220545367 65.6026581465012 65.78659838700955 65.97105436899903 66.1560275385331 66.34151934572994 66.52753124477363 66.71406469392542 66.90112115553534 67.08870209605372 67.27680898604255 67.46544330018713 67.65460651730747 67.84430012037001 68.0345255964992 68.22528443698917 68.41657813731555 68.60840819714687 68.80077612035657 68.99368341503474 69.1871315935 69.38112217231115 69.57565667227935 69.77073661847982 69.96636354026379 70.16253897127073 70.35926444944013 70.55654151702359 70.75437172059699 70.95275661107263 71.15169774371125 71.35119667813444 71.55125497833659 71.75187421269743 71.95305595399414 72.15480177941373 72.35711327056549 72.55999201349321 72.76343959868774 72.96745762109934 73.17204768015053 73.37721137974819 73.58295032829629 73.7892661387086 73.99616042842136 74.20363481940569 74.41169093818056 74.62033041582539 74.82955488799308 75.03936599492248 75.24976538145154 75.46075469703 75.67233559573249 75.88450973627147 76.0972787820101 76.31064440097533 76.52460826587115 76.73917205409133 76.95433744773317 77.17010613360995 77.3864798032648 77.60346015298347 77.82104888380806 78.03924770155005 78.25805831680371 78.47748244495963 78.69752180621806 78.91817812560257 79.13945313297332 79.36134856304064 79.58386615537891 79.80700765444 80.0307748095669 80.2551693750076 80.4801931099287 80.70584777842916 80.93213514955427 81.15905699730956 81.38661510067445 81.6148112436165 81.84364721510522 82.07312480912596 82.30324582469439 82.53401206587023 82.76542534177153 82.99748746658884 83.23020025959946 83.46356554518161 83.69758515282888 83.93226091716447 84.16759467795565 84.40358828012793 84.64024357377998 84.87756241419767 85.11554666186892 85.35419818249822 85.59351884702103 85.83351053161893 86.07417511773376 86.31551449208287 86.55753054667352 86.80022517881795 87.0436002911482 87.28765779163105 87.53239959358282 87.77782761568463 88.02394378199715 88.27075002197599 88.51824827048654 88.7664404678193 89.01532855970511 89.26491449733037 89.51520023735218 89.76618774191397 90.01787897866066 90.27027592075423 90.523380546889 90.77719484130736 91.0317207938151 91.28696039979738 91.54291566023389 91.79958858171481 92.05698117645656 92.31509546231764 92.57393346281405 92.83349720713561 93.0937887301617 93.3548100724771 93.61656328038823 93.8790504059389 94.1422735069267 94.40623464691882 94.67093589526853 94.93637932713133 95.20256702348084 95.46950107112576 95.73718356272572 96.00561659680784 96.2748022777833 96.54474271596374 96.81544002757771 97.08689633478744 97.35911376570533 97.63209445441078 97.90584054096682 98.18035417143682 98.45563749790136 98.73169267847535 99.00852187732455 99.28612726468283 99.56451101686899 99.84367531630399 100.12362235152784 100.4043543172171 100.6858734142017 100.9681818494825 101.25128183624842 101.53517559389384 101.81986534803593 102.1053533305323 102.39164177949827 102.6787329393245 102.96662906069467 103.2553324006029 103.54484522237183 103.83516979566991 104.12630839652952 104.41826330736457 104.7110368169886 105.00463122063279 105.29904881996362 105.59429192310112 105.89036284463707 106.18726390565291 106.48499743373814 106.78356576300845 107.082971234124 107.38321619430786 107.68430299736441 107.9862340036976 108.28901158032987 108.59263810092013 108.89711594578293 109.20244750190679 109.50863516297301 109.81568132937433 110.12358840823391 110.43235881342416 110.74199496558553 111.05249929214574 111.36387422733867 111.67612221222326 111.98924569470296 112.30324712954469 112.61812897839816 112.93389370981537 113.25054379926964 113.56808172917515 113.8865099889064 114.20583107481775 114.52604749026302 114.84716174561511 115.16917635828544 115.49209385274403 115.81591676053907 116.14064762031693 116.46628897784198 116.79284338601637 117.12031340490034 117.4487016017323 117.77801055094855 118.1082428342038 118.43940104039156 118.77148776566392 119.10450561345237 119.43845719448807 119.77334512682211 120.10917203584634 120.44594055431388 120.78365332235961 121.12231298752103 121.46192220475878 121.80248363647786 122.14399995254809 122.48647383032527 122.82990795467218 123.17430501797935 123.51966772018655 123.86599876880385 124.2133008789327 124.56157677328723 124.9108291822157 125.26106084372192 125.61227450348659 125.96447291488887 126.31765883902827 126.67183504474562 127.02700430864537 127.38316941511724 127.74033315635786 128.09849833239275 128.45766775109823 128.81784422822375 129.17903058741356 129.54122966022885 129.9044442861703 130.26867731270008 130.63393159526427 131.00020999731495 131.36751539033335 131.73585065385146 132.1052186754753 132.4756223509073 132.84706458396897 133.21954828662376 133.5930763789997 133.9676517894126 134.3432774543887 134.71995631868808 135.0976913353271 135.47648546560228 135.85634167911294 136.2372629537851 136.61925227589387 137.0023126400879 137.38644704941228 137.77165851533223 138.1579500577565 138.5453247050614 138.93378549411435 139.32333547029742 139.71397768753192 140.10571520830172 140.49855110367753 140.89248845334066 141.2875303456074 141.68367987745353 142.08094015453818 142.47931429122812 142.87880541062242 143.27941664457708 143.6811511337291 144.08401202752148 144.4880024842277 144.89312567097676 145.29938476377774 145.7067829475447 146.11532341612175 146.52500937230818 146.93584402788318 147.34783060363168 147.76097232936925 148.17527244396697 148.59073419537748 149.00736084066034 149.425155646007 149.84412188676714 150.26426284747424 150.6855818218708 151.10808211293462 151.53176703290453 151.9566399033063 152.3827040549788 152.80996282810023 153.23841957221413 153.66807764625565 154.0989404185779 154.5310112669781 154.96429357872486 155.39879075058366 155.83450618884436 156.27144330934723 156.70960553751047 157.14899630835643 157.58961906653877 158.0314772663694 158.47457437184565 158.9189138566775 159.3644992043146 159.81133390797362 160.2594214706658 160.70876540522437 161.1593692343318 161.61123649054784 162.06437071633695 162.51877546409628 162.974454296183 163.43141078494295 163.8896485127385 164.34917107197592 164.8099820651345 165.27208510479406 165.7354838136635 166.20018182460961 166.66618278068484 167.13349033515655 167.60210815153516 168.07203990360307 168.54328927544339 169.01585996146883 169.48975566645098 169.96498010554862 170.44153700433756 170.91943009883965 171.39866313555166 171.87923987147536 172.36116407414633 172.84443952166393 173.3290700027207 173.81505931663224 174.30241127336657 174.7911296935745 175.2812184086196 175.77268126060764 176.26552210241738 176.75974479773012 177.2553532210609 177.75235125778775 178.25074280418306 178.75053176744373 179.2517220657221 179.75431762815606 180.25832239490038 180.7637403171574 181.2705753572083 181.7788314884435 182.2885126953946 182.79962297376505 183.31216633046162 183.8261467836261 184.34156836266627 184.85843510828798 185.3767510725265 185.89652031877856 186.41774692183384 186.94043496790735 187.4645885546712 187.99021179128667 188.51730879843657 189.04588370835765 189.57594066487266 190.107483823423 190.64051735110152 191.1750454266848 191.7110722406662 192.24860199528842 192.78763890457714 193.32818719437287 193.87025110236505 194.41383487812527 194.95894278313986 195.50557909084395 196.05374808665488 196.60345406800522 197.15470134437754 197.707494237337 198.26183708056612 198.8177342198983 199.37519001335195 199.93420883116485 200.49479505582852 201.05695308212188 201.62068731714655 202.18600218036067 202.75290210361413 203.32139153118305 203.8914749198046 204.463156738712 205.03644146966957 205.6113336070078 206.1878376576584 206.76595814119057 207.34569958984486 207.92706654857014 208.51006357505847 209.0946952397809 209.68096612602358 210.26888082992338 210.85844396050425 211.44966013971296 212.0425340024556 212.63707019663403 213.233273383182 213.83114823610165 214.43069944250087 215.03193170262884 215.63484972991407 216.23945825100063 216.84576200578545 217.45376574745524 218.0634742425242 218.6748922708712 219.28802462577698 219.90287611396192 220.5194515556238 221.1377557844757 221.75779364778353 222.37957000640415 223.0030897348239 223.62835772119607 224.25537886737985 224.88415808897844 225.5147003153777 226.14701048978466 226.78109356926657 227.41695452478945 228.0545983412572 228.69403001755072 229.33525456656687 229.97827701525802 230.62310240467164 231.26973578998908 231.91818224056598 232.56844683997173 233.22053468602925 233.87445089085486 234.53020058089874 235.18778889698473 235.84722099435083 236.5085020426895 237.1716372261884 237.83663174357085 238.50349080813663 239.17221964780276 239.84282350514476 240.51530763743727 241.18967731669585 241.8659378297178 242.54409447812415 243.2241525784004 243.90611746193915 244.58999447508114 245.27578897915754 245.96350635053204 246.65315198064286 247.34473127604497 248.0382496584523 248.73371256478077 249.4311254471907 250.13049377312905 250.831823025373 251.53511870207248 252.2403863167937 252.94763139856178 253.6568594919047 254.36807615689625 255.0812869691998 255.79649752011247 256.51371341660814 257.2329402813819 257.95418375289455 258.6774494854154 259.4027431490684 260.1300704298747 260.8594370297992 261.59084866679365 262.32431107484285 263.05983000400795 263.79741122047267 264.53706050658855 265.27878366091994 266.02258649828946 266.76847484982346 267.51645456299826 268.2665315016851 269.01871154619727 269.7730005933353 270.5294045564336 271.2879293654064 272.048580966795 272.81136532381356 273.5762884163963 274.34335624124435 275.112574811873 275.8839501586579 276.65748832888363 277.43319538679 278.2110774136202 278.9911405076685 279.77339078432755 280.55783437613707 281.34447743283164 282.1333261213881 282.92438662607515 283.7176651485011 284.5131679076628 285.310901139994 286.11087109941457 286.91308405737965 287.71754630292827 288.52426414273344 289.3332439011511 290.1444919202694 290.9580145599587 291.7738181979222 292.59190922974483 293.4122940689435 294.234979147018 295.0599709135012 295.8872758360093 296.7169004002931 297.5488511102877 298.3831344881652 299.2197570743844 300.05872542774284 300.9000461254279 301.7437257630681 302.589770954786 303.43818833324764 304.2889845497177 305.14216627410957 305.9977401950374 306.85571301987005 307.71609147478233 308.57888230480876 309.44409227389536 310.3117281649539 311.1817967799137 312.0543049397762 312.9292594846684 313.8066672738949 314.68653518599365 315.5688701187883 316.4536789894435 317.3409687345188 318.23074631002237 319.12301869146626 320.0177928739205 320.9150758720686 321.81487472026214 322.7171964725761 323.62204820286394 324.52943700481296 325.4393699920007 326.3518542979497 327.26689707618374 328.1845055002843 329.1046867639462 330.02744808103495 330.95279668564194 331.88073983214247 332.81128479525165 333.74443887008215 334.6802093722009 335.6186036376864 336.55962902318737 337.5032929059783 338.4496026840188 339.39856577601165 340.3501896214602 341.3044816807274 342.261449435094 343.22110038681643 344.18344205918754 345.1484819965934 346.11622776457364 347.08668694988114 348.05986716054014 349.035776025907 350.01442119673004 350.99581034520844 351.97995116505376 352.9668513715488 353.95651870160964 354.9489609138453 355.94418578861934 356.9422011281091 357.9430147563688 358.94663451939033 359.9530682851643 360.96232394374175 361.97440940729695 362.9893326101884 364.0071015090213 365.0277240827101 366.0512083325411 367.07756228223457 368.1067939780088 369.13891148864167 370.1739229055354 371.21183634277907 372.2526599372127 373.29640184849023 374.34307025914455 375.39267337465117 376.4452194234927 377.50071665722265 378.55917335053124 379.6205978013096 380.6849983307144 381.75238328323405 382.82276102675394 383.8961399526212 384.97252847571133 386.0519350344942 387.1343680910996 388.21983613138366 389.30834766499646 390.39991122544694 391.494535370171 392.59222868059885 393.69299976222095 394.796857244657 395.9038097817225 397.01386605149725 398.1270347563929 399.2433246232216 400.36274440326383 401.4853028723379 402.6110088308677 403.7398711039524 404.87189854143577 406.0071000179748 407.1454844331095 408.287060711334 409.43183780216435 410.5798246802101 411.73103034524416 412.88546382227366 414.0431341616106 415.2040504389423 416.3682217554037 417.5356572376472 418.7063660379155 419.8803573341126 421.0576403298762 422.23822425464937 423.4221183637535 424.60933193846023 425.799874286065 426.9937547399591 428.1909826597033 429.39156743110146 430.5955184662737 431.80284520373044 433.01355710844604 434.22766367193367 435.4451744123189 436.6660988744152 437.89044662979774 439.11822727687934 440.34945044098566 441.5841257744296 442.8222629565879 444.0638716939778 445.308961720331 446.5575427966714 447.8096247113921 449.06521728033084 450.3243303468473 451.58697378190135 452.8531574841283 454.1228913799193 455.3961854234965 456.6730495969924 457.95349391052855 459.2375284022931 460.5251631386193 461.8164082140656 463.11127375149374 464.40976990214904 465.7119068457384 467.01769479051194 468.3271439733419 469.64026465980334 470.95706714425455 472.2775617499174 473.60175882895885 474.92966876257213 476.26130196105726 477.5966688639028 478.93577993986906 480.2786456870687 481.62527663304957 482.9756833348777 484.329876379219 485.6878663824232 487.0496639906063 488.41527987973484 489.78472475570936 491.1580093544477 492.5351444419697 493.9161408144817 495.30100929846105 496.689760750741 498.0824060585959 499.47895613982575 500.8794219428431 502.28381444675813 503.69214466146485 505.1044236277269 506.52066241726544 507.9408721328446 509.36506390835916 510.7932489089215 512.2254383309495 513.6616434022543 515.1018753821286 516.5461455614329 517.9944652626872 519.4468458401576 520.9032986799461 522.363835200079 523.8284668505978 525.2972051136486 526.770061503571 528.2470475669891 529.7281748829021 531.2134550627753 532.7028997506313 534.1965206231389 535.6943293897091 537.1963377925831 538.7025576069253 540.2130006409161 541.7276787358455 543.2466037662027 544.7697876397733 546.2972422977293 547.828979714724 549.3650118989859 550.9053508924134 552.4500087706683 553.9989976432714 555.5523296536958 557.1100169794631 558.67207183224 560.2385064579324 561.8093331367805 563.3845641834594 564.9642119471699 566.54828881174 568.1368071957193 569.7297795524775 571.3272183703012 572.929136172493 574.5355455174692 576.1464589988572 577.7618892455956 579.3818489220322 581.0063507280242 582.6354073990381 584.2690317062466 585.9072364566338 587.5500344930905 589.1974386945177 590.8494619759274 592.5061172885423 594.1674176199 595.8333759939517 597.5040054711668 599.1793191486345 600.8593301601647 602.5440516763953 604.2334969048909 605.927679090248 607.6266115142 609.3303074957197 611.0387803911243 612.7520435941806 614.4701105362091 616.1929946861893 617.9207095508675 619.6532686748599 621.3906856407593 623.132974069243 624.8801476191777 626.6322199877284 628.3892049104649 630.1511161614686 631.9179675534425 633.6897729378182 635.4665462048637 637.248301283795 639.035052142882 640.8268127895609 642.6235972705416 644.425419671919 646.2322941192846 648.0442347778338 649.8612558524812 651.683371587969 653.510596268979 655.3429442202466 657.1804298066711 659.0230674334283 660.8708715460835 662.7238566307075 664.5820372139859 666.4454278633357 668.3140431870181 670.1878978342551 672.067006495342 673.9513839017637 675.8410448263103 677.7360040831921 679.6362765281566 681.5418770586045 683.4528206137071 685.3691221745227 687.2907967641139 689.2178594476659 691.150325332605 693.0882095687164 695.0315273482627 696.9802939061026 698.9345245198126 700.8942345098052 702.8594392394482 704.8301541151864 706.8063945866619 708.7881761468354 710.7755143321076 712.7684247224413 714.7669229414836 716.7710246566857 718.7807455794315 720.7961014651545 722.8171081134661 724.843781368276 726.8761371179183 728.9141912952758 730.9579598779051 733.0074588881613 735.0627043933235 737.1237125057212 739.1904993828613 741.2630812275531 743.3414742880366 745.4256948581091 747.5157592772539 749.6116839307671 751.7134852498872 753.8211797119232 755.9347838403846 758.0543142051102 760.1797874223978 762.3112201551356 764.4486291129311 766.5920310522441 768.7414427765165 770.8968811363039 773.0583630294111 775.2259054010183 777.3995252438195 779.5792395981537 781.765065552138 783.9570202418024 786.1551208512234 788.3593846126597 790.5698288066865 792.7864707623309 795.0093278572086 797.2384175176593 799.4737572188831 801.7153644850787 803.9632568895797 806.2174520549937 808.4779676533383 810.7448214061807 813.0180310847782 815.2976145102144 817.5835895535421 819.8759741359219 822.1747862287616 824.480043853858 826.7917650835394 829.109968040806 831.4346708994727 833.7658918843098 836.1036492711884 838.447961387222 840.7988466109101 843.1563233722843 845.5204101530497 847.8911254867327 850.268487958824 852.6525162069256 855.043228920897 857.4406448430004 859.8447827680498 862.2556615435561 864.6733000698766 867.0977173003621 869.5289322415053 871.9669639530903 874.4118315483431 876.8635541940805 879.322151110859 881.7876415731274 884.2600449093766 886.7393805022928 889.2256677889077 891.7189262607517 894.2191754640077 896.7264349996603 899.2407245236565 901.7620637470516 904.2904724361706 906.8259704127589 909.3685775541408 911.9183137933724 914.4751991193983 917.0392535772118 919.6104972680068 922.18895034934 924.7746330352851 927.3675655965947 929.9677683608575 932.5752617126558 935.1900660937296 937.8122020031334 940.4416899973988 943.0785506906938 945.7228047549867 948.3744729202062 951.0335759744047 953.7001347639222 956.3741701935471 959.0557032266831 961.7447548855114 964.4413462511574 967.1454984638538 969.8572327231082 972.5765702878673 975.3035324766865 978.038140667894 980.78041629976 983.5303808706647 986.2880559392662 989.0534631246705 991.8266241066004 994.6075606255647 997.3962944830304 1000.1928475415913 1002.997241725142 1005.8094990190481 1008.6296414703187 1011.4576911877793 1014.2936703422463 1017.1376011666987 1019.9895059564535 1022.8494070693422 1025.7173269258824 1028.593288009456 1031.4773128664845 1034.3694241066091 1037.2696444028618 1040.1779964918474 1043.0945031739234 1046.0191873133717 1048.9520718385857 1051.8931797422445 1054.8425340814974 1057.8001579781408 1060.766074618801 1063.7403072551176 1066.7228792039236 1069.7138138474302 1072.713134633408 1075.7208650753705 1078.7370287527624 1081.7616493111384 1084.7947504623544 1087.8363559847496 1090.8864897233352 1093.9451755899797 1097.012437563597 1100.0882996903342 1103.1727860837598 1106.265920925055 1109.3677284632 1112.4782330151652 1115.5974589661037 1118.72543076954 1121.8621729475624 1125.007710091017 1128.162066859697 1131.3252679825403 1134.4973382578196 1137.67830255334 1140.8681858066293 1144.0670130251392 1147.274809286437 1150.4915997384037 1153.7174095994335 1156.9522641586254 1160.19618877599 1163.4492088826412 1166.711349980997 1169.9826376449819 1173.2630975202271 1176.5527553242666 1179.851636846747 1183.159767949622 1186.477174567361 1189.803882707147 1193.1399184490854 1196.4853079464058 1199.8400774256686 1203.204253186967 1206.5778616041396 1209.9609291249694 1213.3534822713975 1216.7555476397283 1220.1671519008369 1223.5883218003826 1227.0190841590133 1230.4594658725784 1233.9094939123402 1237.3691953251844 1240.8385972338292 1244.3177268370462 1247.806611409865 1251.3052783037892 1254.8137549470152 1258.332068844643 1261.860247578891 1265.3983188093162 1268.9463102730283 1272.5042497849086 1276.0721652378256 1279.6500846028562 1283.2380359295046 1286.8360473459204 1290.4441470591216 1294.062363355214 1297.6907245996133 1301.3292592372682 1304.9779957928836 1308.6369628711413 1312.3061891569278 1315.985703415559 1319.675534493001 1323.3757113161043 1327.0862628928226 1330.8072183124439 1334.5386067458198 1338.2804574455934 1342.0327997464256 1345.795663065229 1349.5690769013959 1353.3530708370308 1357.1476745371817 1360.9529177500744 1364.7688303073437 1368.5954421242673 1372.4327832000029 1376.2808836178187 1380.1397735453336 1384.009483234751 1387.8900430230988 1391.7814833324644 1395.6838346702334 1399.597127629332 1403.5213928884618 1407.4566612123456 1411.402963451964 1415.3603305448 1419.3287935150804 1423.30838347402 1427.2991316200666 1431.3010692391372 1435.314227704878 1439.3386384788973 1443.3743331110186 1447.421343239528 1451.4797005914186 1455.5494369826426 1459.630584318357 1463.7231745931795 1467.827239891434 1471.9428123874047 1476.0699243455883 1480.2086081209457 1484.358896159157 1488.5208209968748 1492.6944152619792 1496.8797116738351 1501.0767430435467 1505.2855422742173 1509.5061423612026 1513.7385763923764 1517.9828775483838 1522.239079102904 1526.5072144229102 1530.7873169689335 1535.0794202953196 1539.3835580505 1543.6997639772487 1548.0280719129503 1552.3685157898653 1556.721129635394 1561.0859475723455 1565.4630038192042 1569.852332690397 1574.2539685965653 1578.6679460448295 1583.0942996390663 1587.5330640801772 1591.9842741663558 1596.4479647933679 1600.9241709548232 1605.4129277424438 1609.914270346347 1614.4282340553175 1618.954854257085 1623.4941664386008 1628.046206186315 1632.6110091864593 1637.1886112253233 1641.7790481895356 1646.3823560663461 1650.998570943908 1655.627729011561 1660.269866560112 1664.9250199821258 1669.5932257722009 1674.2745205272677 1678.9689409468642 1683.6765238334306 1688.397306092596 1693.1313247334679 1697.87861686892 1702.6392197158866 1707.4131705956536 1712.2005069341462 1717.0012662622305 1721.8154862160025 1726.6432045370846 1731.4844590729206 1736.3392877770732 1741.2077287095196 1746.0898200369559 1750.9856000330892 1755.8951070789394 1760.8183796631415 1765.7554563822503 1770.7063759410364 1775.6711771527937 1780.6498989396432 1785.6425803328375 1790.649260473067 1795.669978610768 1800.7047741064275 1805.7536864308945 1810.8167551656884 1815.8940200033098 1820.98552074755 1826.091297313806 1831.2113897293902 1836.3458381338476 1841.494682779266 1846.6579640305958 1851.8357223659652 1857.027998376996 1862.234832769123 1867.4562663619147 1872.6923400893893 1877.9430950003407 1883.2085722586542 1888.488813143636 1893.7838590503316 1899.0937514898524 1904.4185320897002 1909.7582425940957 1915.1129248643033 1920.48262087896 1925.8673727344062 1931.2672226450122 1936.6822129435136 1942.1123860813389 1947.557784628944 1953.018451276148 1958.4944288324652 1963.9857602274396 1969.4924885109876 1975.0146568537257 1980.5523085473183 1986.1054870048138 1991.6742357609814 1997.2585984726568 2002.8586189190848 2008.474341002258 2014.1058087472647 2019.7530663026355 2025.4161579406841 2031.0951280578568 2036.790021175084 2042.5008819381235 2048.2277551179145 2053.9706856109283 2059.7297184395165 2065.5048987522687 2071.2962718243652 2077.10388305793 2082.927777982389 2088.768002254826 2094.62460166034 2100.497622112403 2106.387109653224 2112.2931104541053 2118.2156708158113 2124.1548371689237 2130.110656074209 2136.08317422298 2142.072438437472 2148.0784956711996 2154.101393009326 2160.141177669036 2166.197896999907 2172.2715984842735 2178.3623297376075 2184.4701385088824 2190.595072680959 2196.7371802709526 2202.8965094306072 2209.0731084466843 2215.267025741327 2221.478309872454 2227.707009534127 2233.9531735569444 2240.216850908413 2246.498090693343 2252.7969421542234 2259.113454671611 2265.4476777645227 2271.799661090817 2278.1694544475836 2284.5571077715394 2290.9626711394167 2297.386194768352 2303.8277290162882 2310.2873243823597 2316.765031507295 2323.260901173812 2329.7749843070155 2336.307331974802 2342.8579953882436 2349.4270259020104 2356.0144750147606 2362.620394369546 2369.2448357542207 2375.8878511018397 2382.5494924910736 2389.229812146615 2395.928862439586 2402.6466958879478 2409.3833651569153 2416.138923059372 2422.913422556278 2429.7069167570858 2436.519458920164 2443.3511024532077 2450.2019009136575 2457.071908009127 2463.9611775978096 2470.8697636889137 2477.7977204430854 2484.745102172822 2491.7119633429115 2498.6983585708495 2505.7043426272726 2512.729970436385 2519.7752970763886 2526.840377779921 2533.9252679344804 2541.0300230828643 2548.154698923603 2555.2993513114034 2562.464036257574 2569.6488099304725 2576.8537286559476 2584.0788489177717 2591.3242273580936 2598.5899207778775 2605.875986137348 2613.18248055644 2620.509461315242 2627.856985854449 2635.225111775813 2642.613896842587 2650.023398979991 2657.4536762756543 2664.9047869800756 2672.3767895070823 2679.869742434282 2687.3837045035248 2694.9187346213707 2702.4748918595383 2710.052235455376 2717.6508248123273 2725.270719500395 2732.911979256605 2740.5746639854788 2748.2588337594957 2755.9645488195774 2763.691869575548 2771.440856606614 2779.2115706618342 2787.004072660602 2794.818423693118 2802.6546850208742 2810.5129180771223 2818.3931844673725 2826.295545969864 2834.220064536054 2842.1668022911017 2850.135821534359 2858.1271847398516 2866.1409545567767 2874.177193809989 2882.235965500495 2890.3173328059465 2898.421359081141 2906.5481078585035 2914.6976428486055 2922.870027940646 2931.065327202962 2939.2836048835306 2947.5249254104688 2955.7893533925417 2964.0769536196685 2972.387791063426 2980.721930877568 2989.0794383985253 2997.4603791459226 3005.864818823096 3014.292823317596 3022.7444587017208 3031.219791233022 3039.7188873548275 3048.2418136967613 3056.788637075271 3065.359424494145 3073.954243145041 3082.5731604080124 3091.2162438520363 3099.883561235543 3108.5751805069476 3117.291169805183 3126.031597460233 3134.7965319936707 3143.58604211919 3152.4001967431504 3161.239064965114 3170.1027160783874 3178.9912195705706 3187.904645124089 3196.8430626167533 3205.806542122294 3214.7951539109254 3223.808968449886 3232.848056403997 3241.912488636209 3251.0023362081643 3260.117670380751 3269.258562614663 3278.4250845709594 3287.6173081116276 3296.8353053001415 3306.079148402034 3315.348909885458 3324.64466242176 3333.9664788860414 3343.314432357736 3352.6885961211856 3362.089043666206 3371.5158486886708 3380.969085091084 3390.44882698316 3399.9551486824093 3409.4881247147155 3419.0478298149255 3428.6343389274266 3438.2477272067417 3447.8880700181153 3457.555442938107 3467.24992175518 3476.971582470297 3486.72050129752 3496.496754664598 3506.3004192135777 3516.1315718013943 3525.9902895004807 3535.876649599374 3545.7907296033077 3555.732607234836 3565.702360434434 3575.700067361107 3585.72580639301 3595.779656128063 3605.8616953845535 3615.9720032017713 3626.1106588406183 3636.2777417842303 3646.473331738607 3656.6975086332295 3666.950352621687 3677.2319440823126 3687.542363618804 3697.881692060861 3708.2500104648216 3718.647400114288 3729.073942520775 3739.5297194243394 3750.0148127942307 3760.5293048295225 3771.0732779597624 3781.646814845622 3792.2499983795406 3802.882911686374 3813.545638124051 3824.2382612842225 3834.960864992917 3845.7135333111987 3856.496350535827 3867.309401199917 3878.152770073603 3889.026542164703 3899.930802719383 3910.8656372228284 3921.8311313999093 3932.827371215862 3943.854442876949 3954.9124328311464 3966.001427768817 3977.121514623394 3988.2727805720547 3999.4553130364106 4010.66919968319 4021.9145284249266 4033.1913874206466 4044.4998650765597 4055.8400500467615 4067.2120312339102 4078.615897789941 4090.0517391167546 4101.519644866924 4113.019704944393 4124.552009505185 4136.1166489581055 4147.713713965455 4159.343295443735 4171.0054845643635 4182.700372754399 4194.428051697235 4206.1886133333355 4217.98214986096 4229.808753736866 4241.668517677058 4253.561534657497 4265.487897914835 4277.447700947141 4289.44103751465 4301.468001640473 4313.528687611365 4325.623189978435 4337.751603557903 4349.914023431835 4362.110544948903 4374.341263725114 4386.606275644572 4398.9056768602295 4411.239563794634 4423.608033140682 4436.011181862393 4448.449107195653 4460.921906648981 4473.429678004307 4485.972519317711 4498.550528920226 4511.163805418573 4523.812447695967 4536.496554912866 4549.216226507765 4561.971562197969 4574.762661980377 4587.5896261322605 4600.452555212054 4613.35155006015 4626.286711799668 4639.258141837285 4652.2659418639905 4665.310213855898 4678.3910600750605 4691.508583070249 4704.662885677772 4717.854071022268 4731.082242517532 4744.347503867308 4757.649959066115 4770.989712400055 4784.366868447634 4797.781532080579 4811.233808464663 4824.723803060533 4838.2516216245185 4851.817370209497 4865.421155165681 4879.063083141484 4892.743261084339 4906.461796241551 4920.218796161127 4934.014368692631 4947.848621988012 4961.721664502462 4975.633604995265 4989.584552530659 5003.574616478672 5017.603906515994 5031.672532626831 5045.780605103768 5059.928234548637 5074.115531873383 5088.342608300921 5102.6095753660275 5116.916544916215 5131.263629112576 5145.650940430707 5160.078591661562 5174.546695912347 5189.055366607397 5203.604717489087 5218.194862618691 5232.8259163773055 5247.497993466735 5262.21120891038 5276.96567805416 5291.761516567408 5306.598840443774 5321.477766002141 5336.398409887517 5351.360889071992 5366.365320855602 5381.411822867294 5396.500513065824 5411.631509740684 5426.804931513036 5442.020897336635 5457.279526498765 5472.580938621181 5487.92525366103 5503.312591911805 5518.743074004288 5534.216820907487 5549.733953929595 5565.294594718928 5580.898865264893 5596.546887898931 5612.238785295491 5627.974680472969 5643.754696794706 5659.5789579699185 5675.447588054695 5691.360711452955 5707.318452917434 5723.320937550645 5739.368290805884 5755.460638488189 5771.598106755335 5787.780822118838 5804.008911444924 5820.282501955534 5836.6017212293245 5852.96669720266 5869.377558170623 5885.8344327880095 5902.3374500703485 5918.88673939492 5935.482430501744 5952.1246534946185 5968.813538842137 5985.549217378703 6002.331820305559 6019.161479191824 6036.038325975507 6052.962492964565 6069.93411283792 6086.9533186465005 6104.020243814296 6121.1350221394005 6138.297787795051 6155.508675330697 6172.767819673035 6190.075356127078 6207.431420377218 6224.836148488286 6242.289676906619 6259.792142461123 6277.343682364355 6294.944434213602 6312.5945359919515 6330.294126069369 6348.043343203796 6365.842326542226 6383.691215621802 6401.590150370915 6419.539271110285 6437.538718554073 6455.588633810987 6473.689158385381 6491.840434178356 6510.0426034889015 6528.295809014979 6546.6001938546615 6564.9559015072455 6583.363075874375 6601.8218612611745 6620.33240237739 6638.894844338494 6657.509332666849 6676.176013292847 6694.895032556041 6713.6665372063 6732.490674404961 6751.367591725978 6770.2974371570745 6789.280359100919 6808.316506376276 6827.406028219176 6846.549074284085 6865.745794645072 6884.996339797004 6904.30086065671 6923.659508564162 6943.072435283672 6962.5397930050785 6982.061734344933 7001.6384123476955 7021.2699804869535 7040.956592666612 7060.69840322209 7080.495566921541 7100.3482389670735 7120.256574995957 7140.220731081844 7160.240863735994 7180.317129908501 7200.449686989531 7220.638692810538 7240.884305645517 7261.186684212238 7281.545987673499 7301.962375638361 7322.436008163409 7342.967045754 7363.555649365525 7384.201980404679 7404.9062007306975 7425.668472656669 7446.48895895077 7467.367822837556 7488.305227999243 7509.30133857699 7530.3563191721805 7551.470334847718 7572.643551129314 7593.876134006792 7615.168249935395 7636.520065837067 7657.931749101792 7679.403467588876 7700.935389628291 7722.527684021976 7744.180520045161 7765.894067447705 7787.668496455423 7809.503977771416 7831.400682577403 7853.358782535088 7875.378449787473 7897.45985696023 7919.603177163052 7941.8085839910045 7964.076251525881 7986.406354337586 8008.799067485481 8031.2545665197795 8053.773027482905 8076.35462691088 8098.999541834712 8121.7079497817695 8144.480028777185 8167.315957345251 8190.215914510809 8213.180079800673 8236.208633245005 8259.301755378752 8282.459627243066 8305.682430386705 8328.97034686746 8352.32355925358 8375.742250625224 8399.226604575875 8422.776805213774 8446.39303716339 8470.075485566833 8493.824336085363 8517.639774900756 8541.521988716842 8565.471164760947 8589.487490785343 8613.571155068736 8637.722346417731 8661.941254168336 8686.228068187407 8710.582978874178 8735.006177161724 8759.497854518471 8784.058202949695 8808.687414999027 8833.385683749955 8858.153202827356 8882.990166399006 8907.89676917708 8932.873206419712 8957.919673932507 8983.036368070083 9008.223485737602 9033.48122439233 9058.809782045157 9084.209357262174 9109.68014916624 9135.222357438493 9160.83618231998 9186.521824613172 9212.279485683572 9238.109367461268 9264.011672442542 9289.98660369146 9316.034364841416 9342.155160096785 9368.3491942345 9394.616672605656 9420.957801137121 9447.37278633315 9473.861835277012 9500.4251556326 9527.062955646074 9553.775444147474 9580.562830552373 9607.425324863525 9634.36313767249 9661.376480161309 9688.465564104126 9715.630601868876 9742.871806418956 9770.18939131487 9797.58357071591 9825.054559381846 9852.602572674603 9880.227826559947 9907.930537609192 9935.710923000863 9963.56920052244 9991.505588572038 10019.520306160137 10047.61357291127 10075.785609065802 10104.036635481578 10132.366873635718 10160.77654562635 10189.265874174285 10217.835082624859 10246.484394949606 10275.214035748051 10304.02423024947 10332.915204314626 10361.887184437588 10390.940397747478 10420.075072010231 10449.29143563044 10478.589717653093 10507.97014776538 10537.43295629851 10566.97837422949 10596.606633182986 10626.317965433082 10656.112603905123 10685.990782177549 10715.952734483722 10745.998695713759 10776.128901416365 10806.3435878007 10836.642991738217 10867.027350764529 10897.496903081234 10928.051887557856 10958.692543733647 10989.419111819494 11020.23183269981 11051.130947934409 11082.116699760392 11113.189331094074 11144.34908553285 11175.59620735715 11206.93094153232 11238.353533710557 11269.86423023283 11301.463278130794 11333.150925128773 11364.927419645666 11396.793010796877 11428.747948396333 11460.792482958372 11492.926865699748 11525.151348541596 11557.46618411139 11589.87162574494 11622.367927488373 11654.955344100124 11687.634131052937 11720.404544535857 11753.266841456236 11786.221279441796 11819.268116842544 11852.40761273293 11885.640026913768 11918.96561991434 11952.384652994398 11985.897388146232 12019.504088096717 12053.205016309383 12087.000436986476 12120.890615071014 12154.875816248874 12188.956306950895 12223.132354354939 12257.404226387998 12291.772191728285 12326.236519807353 12360.797480812207 12395.455345687413 12430.210386137214 12465.062874627687 12500.013084388856 12535.06128941685 12570.207764476028 12605.452785101168 12640.796627599599 12676.239569053365 12711.781887321411 12747.423861041776 12783.165769633737 12819.007893300022 12854.950513029034 12890.993910596992 12927.1383685702 12963.384170307221 12999.731599961113 13036.180942481667 13072.732483617634 13109.386509918946 13146.143308738998 13183.003168236863 13219.966377379586 13257.033225944426 13294.204004521134 13331.47900451424 13368.858518145322 13406.342838455306 13443.932259306757 13481.627075386199 13519.427582206408 13557.334076108727 13595.346854265405 13633.466214681926 13671.692456199313 13710.025878496523 13748.466782092759 13787.015468349828 13825.672239474517 13864.43739852095 13903.31124939299 13942.294096846595 13981.38624649219 14020.58800479711 14059.899679087981 14099.32157755312 14138.854009244955 14178.497284082458 14218.251712853578 14258.117607217644 14298.095279707852 14338.185043733687 14378.387213583392 14418.702104426424 14459.130032315934 14499.671314191228 14540.326267880266 14581.095212102171 14621.978466469702 14662.976351491736 14704.089188575843 14745.31730003076 14786.661009068928 14828.120639809036 14869.69651727855 14911.388967416255 14953.198317074834 14995.124894023433 15037.169026950174 15079.331045464807 15121.61128010124 15164.010062320154 15206.527724511605 15249.16459999761 15291.921023034782 15334.797328816943 15377.793853477724 15420.910934093265 15464.148908684783 15507.50811622128 15550.98889662217 15594.59159075995 15638.316540462863 15682.164088517615 15726.134578672025 15770.228355637704 15814.445765092809 15858.787153684734 15903.252869032805 15947.84325973103 15992.558675350827 16037.399466443749 16082.36598454425 16127.458582172447 16172.677612836847 16218.023431037162 16263.496392267074 16309.096853017 16354.8251707769 16400.681704039107 16446.666812301115 16492.780856068344 16539.024196857114 16585.397197197275 16631.90022063524 16678.533631736693 16725.297796089555 16772.1930803068 16819.219852029277 16866.378479928706 16913.669333710503 16961.092784116623 17008.64920292861 17056.338962970367 17104.162438111183 17152.12000326859 17200.21203441135 17248.43890856237 17296.801003801695 17345.298699269442 17393.93237516878 17442.70241276891 17491.609194408087 17540.653103496534 17589.834524519538 17639.15384304039 17688.611445703493 17738.2077202373 17787.943055457417 17837.817841269636 17887.832468672987 17937.987329762804 17988.28281773379 18038.71932688313 18089.297252613527 18140.01699143633 18190.87894097468 18241.883499966614 18293.031068268134 18344.322046856374 18395.75683783277 18447.335844426172 18499.059470996053 18550.928123035646 18602.942207175103 18655.102131184736 18707.40830397814 18759.86113561549 18812.461037306708 18865.208421414656 18918.10370145843 18971.14729211657 19024.339609230276 19077.681069806746 19131.17209202242 19184.813095226207 19238.604499942798 19292.546727876022 19346.64020191207 19400.885346122865 19455.282585769335 19509.832347304797 19564.535058378282 19619.3911478379 19674.401045734136 19729.565183323324 19784.883993070966 19840.357908655118 19895.98736496984 19951.7727981285 20007.71464546736 20063.813345548846 20120.069338165074 20176.48306434126 20233.05496633917 20289.785487660654 20346.675073051065 20403.724168502722 20460.93322125846 20518.30267981514 20575.832993927113 20633.52461460977 20691.37799414313 20749.393586075294 20807.571845226033 20865.91322769042 20924.418190842327 20983.087193338 21041.92069511976 21100.919157419474 21160.083042762275 21219.41281497014 21278.90893916553 21338.571881775024 21398.40211053303 21458.400094485387 21518.566303993073 21578.90121073591 21639.4052877162 21700.07900926254 21760.922851033403 21821.937290020993 21883.122804554878 21944.479874305835 22006.00898028956 22067.710604870445 22129.58523176535 22191.63334604741 22253.85543414983 22316.25198386972 22378.82348437189 22441.570426192702 22504.49330124391 22567.592602816487 22630.86882558457 22694.322465609268 22757.95402034256 22821.76398863121 22885.7528707207 22949.921168259094 23014.269384301042 23078.798023311654 23143.5075911705 23208.398595175524 23273.47154404715 23338.726947932104 23404.16531840751 23469.78716848485 23535.59301261406 23601.583366687497 23667.758748044023 23734.11967547302 23800.666669218463 23867.40025098306 23934.320943932275 24001.429272698453 24068.725763384937 24136.210943570157 24203.885342311834 24271.749490151058 24339.80391911651 24408.0491627286 24476.485756003618 24545.114235457975 24613.935139112404 24682.949006496165 24752.15637865128 24821.557798136786 24891.15380903293 24960.944956945557 25030.931789010236 25101.114853896677 25171.494701812946 25242.071884509805 25312.8469552851 25383.820468987986 25454.992982023334 25526.36505235615 25597.937239515843 25669.71010460067 25741.6842102821 25813.86012080931 25886.238402013518 25958.819621312425 26031.604347714732 26104.593151824527 26177.78660584579 26251.185283586892 26324.789760465083 26398.600613510982 26472.618421373103 26546.843764322453 26621.277224256988 26695.919384706245 26770.770830835885 26845.832149452275 26921.103929007153 26996.586759602116 27072.281232993377 27148.1879425963 27224.307483490138 27300.64045242265 27377.187447814747 27453.94906976529 27530.925920055706 27608.118602154707 27685.527721223065 27763.153884118317 27840.99769939956 27919.059777332175 27997.340729892676 28075.84117077343 28154.56171538754 28233.50298087361 28312.665586100633 28392.0501516728 28471.657299934395 28551.487654974666 28631.54184263272 28711.820490502414 28792.324227937286 28873.053686055493 28954.009497744766 29035.192297667323 29116.602722264943 29198.241409763847 29280.109000179757 29362.206135322907 29444.53345880309 29527.09161603466 29609.88125424164 29692.903022462768 29776.15757155657 29859.645554206538 29943.367624926133 30027.324440064 30111.516657809098 30195.944938195822 30280.609943109266 30365.51233629029 30450.65278334083 30536.03195172904 30621.650510794578 30707.509131753803 30793.6084877051 30879.949253634113 30966.532106419036 31053.357724835954 31140.42678956413 31227.73998319134 31315.29799021924 31403.101497068747 31491.15119208535 31579.44776554463 31667.991909657576 31756.784318575985 31845.825688398 31935.116717173525 32024.65810490969 32114.450553576324 32204.494767111486 32294.791451426972 32385.34131441387 32476.14506594807 32567.20341789585 32658.517084119474 32750.086780482747 32841.913224856646 32933.99713712501 33026.33923919005 33118.940254978166 33211.80091044549 33304.92193358361 33398.30405442534 33491.94800505036 33585.85451959108 33680.02433423814 33774.458187246535 33869.156818941105 33964.120971722485 34059.351390072945 34154.848820562096 34250.61401185283 34346.64771470722 34442.95068199233 34539.52366868615 34636.367431883606 34733.48273080225 34830.870326788514 34928.53098332341 35026.4654660288 35124.674542673085 35223.15898317745 35321.91955962177 35420.95704625078 35520.27221948007 35619.86585790221 35719.73874229275 35819.89165561646 35920.32538303349 36021.040711905356 36122.038431801295 36223.31933450437 36324.88421401764 36426.73386657051 36528.869090624816 36631.290686881206 36733.99945828543 36836.996210034464 36940.281749582944 37043.85688664964 37147.72243322354 37251.87920357034 37356.32801423879 37461.069684067195 37566.10503418976 37671.434888042924 37777.06007137204 37882.98141223767 37989.19974102213 38095.71589043604 38202.53069552484 38309.64499367523 38417.05962462189 38524.775430453985 38632.79325562173 38741.113946943085 38849.73835361041 38958.667327197014 39067.901721663875 39177.44239336639 39287.29020106109 39397.44600591226 39507.91067149881 39618.68506382099 39729.77005130717 39841.16650482067 39952.87529766659 40064.89730559867 40177.233406826104 40289.88448202046 40402.85141432258 40516.13508934957 40629.73639520154 40743.6562224688 40857.89546423877 40972.45501610288 41087.335776163716 41202.53864504192 41318.0645258835 41433.914324366604 41550.088948708915 41666.589309674484 41783.41632058108 41900.570897307254 42018.05395829962 42135.86642457995 42254.00921975231 42372.483270010554 42491.28950414538 42610.428853551755 42729.90225223603 42849.71063682347 42969.85494656547 43090.33612334691 43211.15511169357 43332.312858779645 43453.810314434966 43575.64843115258 43697.82816409623 43820.35047110771 43943.216312714554 44066.426652137416 44189.982455297664 44313.88469082499 44438.134330065004 44562.73234708684 44687.67971869069 44812.977424415665 44938.62644654729 45064.627770125255 45190.982382951224 45317.691275596495 45444.75544140974 45572.17587652487 45699.95357986879 45828.08955316927 45956.58480096279 46085.44033060237 46214.65715226551 46344.23627896206 46474.17872654232 46604.485513704785 46735.157662004254 46866.19619585981 46997.60214256288 47129.376532285234 47261.520398087094 47394.03477592526 47526.92070466121 47660.17922606921 47793.81138484449 47927.81822861151 48062.20080793206 48196.96017631356 48332.097390217365 48467.613509066956 48603.50959525622 48739.786714157985 48876.445934132076 49013.488326533945 49150.914965722906 49288.72692907066 49426.92529696967 49565.5111528417 49704.485583146205 49843.84967738901 49983.604528130665 50123.75123099515 50264.29088467839 50405.22459095692 50546.55345469647 50688.27858386062 50830.401089519575 50972.9220858588 51115.84269018777 51259.16402294875 51402.887207725544 51547.01337125228 51691.543643422374 51836.47915729722 51981.82104911514 52127.5704583004 52273.72852747194 52420.29640245249 52567.27523227755 52714.66616920421 52862.470368720424 53010.68898955391 53159.32319368136 53308.374146337446 53457.84301602392 53607.73097451892 53758.03919688605 53908.768861483644 54059.92114997397 54211.497247332445 54363.49834185706 54515.92562517759 54668.780292264935 54822.0635414406 54975.77657438594 55129.92059615169 55284.49681516734 55439.50644325063 55594.95069561709 55750.83079088956 55907.14795110762 56063.90340173735 56221.09837168084 56378.73409328582 56536.811802355405 56695.33273815768 56854.29814343542 57013.70926441596 57173.567350820755 57333.87365587542 57494.62943631935 57655.835952415626 57817.49446796105 57979.606250295816 58142.172570313545 58305.194702471344 58468.67392479962 58632.61151891224 58797.008770016546 58961.8669669234 59127.187402057236 59292.97137146637 59459.22017483293 59625.93511548326 59793.11750039797 59960.768640222326 60128.88984927636 60297.4824455653 60466.54775078992 60636.08709035676 60806.10179338875 60976.5931927353 61147.56262498307 61319.011430466206 61490.940953277095 61663.35254127665 61836.24754610499 62009.62732319214 62183.49323176843 62357.84663487531 62532.68889937601 62708.02139596631 62883.84549918509 63060.16258742529 63236.97404294473 63414.281251876775 63592.08560424134 63770.388493955776 63949.19131884581 64128.49548065637 64308.30238506271 64488.61344168142 64669.43006408142 64850.75366979509 65032.58568032931 65214.92752117673 65397.78062182687 65581.14641577729 65765.02634054486 65949.42183767704 66134.3343527632 66319.76533544596 66505.71623943246 66692.18852250582 66879.18364653668 67066.70307749443 67254.74828545879 67443.32074463158 67632.42193334784 67822.05333408773 68012.21643348811 68202.91272235407 68394.14369567076 68585.91085261504 68778.21569656726 68971.05973512295 69164.44448010481 69358.37144757445 69552.8421578442 69747.85813548922 69943.42090935932 70139.53201259107 70336.19298261956 70533.40536119077 70731.17069437337 70929.49053257116 71128.36643053495 71327.7999473748 71527.7926465723 71728.3460959929 71929.461867898 72131.14153895751 72333.38669026208 72536.19890733525 72739.57978014654 72943.53090312329 73148.05387516333 73353.15029964762 73558.82178445293 73765.06994196394 73971.89638908656 74179.30274726005 74387.29064247 74595.86170526122 74805.01757074994 75014.75987863734 75225.0902732219 75436.01040341258 75647.5219227417 75859.6264893776 76072.3257661381 76285.62142050327 76499.51512462845 76714.00855535766 76929.10339423628 77144.80132752476 77361.10404621135 77578.01324602569 77795.53062745203 78013.65789574246 78232.3967609304 78451.74893784393 78671.7161461193 78892.30011021426 79113.50255942171 79335.32522788335 79557.76985460313 79780.83818346084 80004.53196322588 80228.8529475709 80453.80289508562 80679.38356929069 80905.59673865128 81132.44417659112 81359.9276615064 81588.04897677964 81816.80991079361 82046.21225694561 82276.25781366132 82506.94838440885 82738.28577771306 82970.27180716967 83202.90829145923 83436.19705436191 83670.1399247713 83904.73873670911 84139.99532933916 84375.91154698217 84612.48923913 84849.73026046024 85087.63647085073 85326.20973539412 85565.4519244125 85805.36491347212 86045.95058339792 86287.21082028851 86529.14751553092 86771.76256581512 87015.05787314929 87259.03534487441 87503.69689367966 87749.04443761679 87995.07990011566 88241.80520999919 88489.22230149829 88737.3331142673 88986.13959339891 89235.64368943973 89485.84735840534 89736.75256179574 89988.3612666106 90240.6754453648 90493.69707610404 90747.42814241986 91001.87063346578 91257.02654397246 91512.89787426352 91769.48663027119 92026.79482355205 92284.82447130287 92543.57759637611 92803.05622729627 93063.26239827539 93324.19814922924 93585.86552579324 93848.26657933826 94111.4033669871 94375.27795163034 94639.89240194269 94905.248792399 95171.34920329074 95438.19572074222 95705.79043672698 95974.13544908396 96243.23286153424 96513.08478369749 96783.69333110838 97055.06062523316 97327.18879348654 97600.07996924798 97873.73629187877 98148.1599067386 98423.35296520244 98699.31762467753 98976.05604861987 99253.57040655176 99531.86287407833 99810.9356329049 100090.79087085396 100371.43078188227 100652.85756609819 100935.07342977884 101218.08058538743 101501.8812515905 101786.4776532755 102071.8720215682 102358.06659384993 102645.0636137755 102932.86533129042 103221.47400264896 103510.89189043136 103801.12126356194 104092.16439732663 104384.02357339115 104676.70107981839 104970.19921108687 105264.52026810833 105559.66655824604 105855.64039533272 106152.4440996887 106450.07999814027 106748.55042403772 107047.85771727365 107348.00422430155 107648.99229815385 107950.82429846068 108253.50259146804 108557.02955005674 108861.4075537607 109166.63898878575 109472.72624802818 109779.67173109378 110087.47784431635 110396.14700077675 110705.68162032175 111016.08412958296 111327.35696199606 111639.50255781961 111952.52336415427 112266.42183496214 112581.20043108574 112896.86162026762 113213.40787716916 113530.84168339071 113849.16552749046 114168.38190500425 114488.4933184649 114809.50227742217 115131.411298462 115454.22290522663 115777.93962843418 116102.56400589852 116428.09858254925 116754.54591045139 117081.90854882578 117410.18906406884 117739.39002977281 118069.5140267459 118400.56364303252 118732.54147393364 119065.450122027 119399.29219718762 119734.0703166082 120069.78710481965 120406.44519371184 120744.04722255381 121082.59583801497 121422.09369418539 121762.54345259696 122103.94778224411 122446.30935960475 122789.6308686611 123133.91500092109 123479.16445543893 123825.38193883697 124172.57016532627 124520.73185672823 124869.8697424958 125219.98655973494 125571.08505322602 125923.16797544544 126276.23808658714 126630.29815458413 126985.35095513039 127341.39927170258 127698.44589558171 128056.49362587517 128415.54526953863 128775.6036413982 129136.67156417214 129498.75186849327 129861.84739293114 130225.96098401415 130591.09549625199 130957.25379215802 131324.43874227165 131692.6532251808 132061.90012754453 132432.18234411578 132803.50277776376 133175.86433949714 133549.26994848647 133923.72253208718 134299.2250258628 134675.78037360765 135053.39152736985 135432.06144747484 135811.79310254828 136192.58946953947 136574.45353374459 136957.38828883017 137341.39673685643 137726.48188830126 138112.6467620833 138499.89438558565 138888.22779467967 139277.65003374932 139668.16415571424 140059.77322205406 140452.4803028323 140846.28847672066 141241.2008310229 141637.220461699 142034.35047338967 142432.5939794407 142831.95410192688 143232.43397167712 143634.0367282988 144036.76552020223 144440.6235046251 144845.61384765792 145251.7397242682 145659.00431832593 146067.41082262772 146476.96243892272 146887.66237793706 147299.5138593994 147712.520112066 148126.68437374625 148542.00989132762 148958.49992080152 149376.15772728866 149794.98658506467 150214.98977758578 150636.17059751446 151058.5323467455 151482.07833643167 151906.81188700948 152332.73632822573 152759.85499916328 153188.17124826726 153617.68843337154 154048.40992172444 154480.33909001583 154913.47932440342 155347.8340205391 155783.40658359556 156220.20042829323 156658.21897892674 157097.4656693923 157537.94394321393 157979.65725357085 158422.60906332458 158866.80284504592 159312.2420810424 159758.9302633852 160206.87089393684 160656.06748437858 161106.52355623784 161558.24264091617 162011.22827971628 162465.48402387032 162921.0134345676 163377.82008298254 163835.90755030265 164295.27942775632 164755.93931664122 165217.89082835295 165681.13758441253 166145.6832164952 166611.5313664591 167078.6856863735 167547.1498385476 168016.9274955592 168488.02234028306 168960.4380659208 169434.17837602898 169909.24698454814 170385.64761583257 170863.38400467875 171342.45989635537 171822.879046632 172304.6452218088 172787.7621987463 173272.23376489474 173758.06371832374 174245.25586775213 174733.81403257782 175223.74204290812 175715.043739589 176207.7229742354 176701.7836092622 177197.2295179136 177694.06458429378 178192.29270339772 178691.9177811408 179192.9437343904 179695.37449099624 180199.213989821 180704.4661807716 181211.13502482968 181719.2244940829 182228.73857175623 182739.68125224288 183252.05654113583 183765.8684552591 184281.12102269928 184797.8182828373 185315.96428637957 185835.56309539053 186356.61878332365 186879.13543505414 187403.11714691023 187928.5680267059 188455.49219377284 188983.89377899247 189513.776924829 190045.14578536127 190578.00452631555 191112.35732509833 191648.2083708287 192185.56186437162 192724.42201837056 193264.79305728065 193806.6792174018 194350.08474691192 194895.0139059002 195441.47096640032 195989.46021242422 196538.98593999568 197090.05245718377 197642.66408413678 198196.82515311602 198752.54000853 199309.81300696815 199868.64851723515 200429.05092038526 200991.02460975663 201554.57399100545 202119.70348214087 202686.41751355943 203254.7205280799 203824.6169809782 204396.11134002195 204969.2080855058 205543.91171028663 206120.2267198184 206698.1576321879 207277.70897814995 207858.88530116293 208441.6911574243 209026.13111590644 209612.20975839268 210199.9316795128 210789.30148677924 211380.32380062324 211973.00325443124 212567.34449458082 213163.3521804772 213761.03098459032 214360.38559249064 214961.4207028865 215564.14102766057 216168.55129190718 216774.65623396882 217382.46060547378 217991.9691713733 218603.1867099785 219216.11801299866 219830.76788557807 220447.14114633386 221065.24262739392 221685.07717443485 222306.64964671966 222929.96491713615 223555.02787223482 224181.8434122674 224810.4164512252 225440.75191687772 226072.8547508111 226706.72990846727 227342.3823591819 227979.81708622444 228619.03908683662 229260.05337227156 229902.86496783333 230547.47891291627 231193.90026104412 231842.1340799103 232492.185451417 233144.05947171568 233797.76125124647 234453.29591477846 235110.6686014495 235769.8844648076 236430.9486728498 237093.8664080638 237758.64286746824 238425.2832626534 239093.79281982206 239764.17677983042 240436.44039822946 241110.58894530602 241786.6277061237 242464.5619805649 243144.39708337217 243826.13834418962 244509.79110760492 245195.36073319145 245882.85259554983 246572.27208435003 247263.62460437455 247956.91557555928 248652.15043303746 249349.33462718135 250048.47362364532 250749.57290340879 251452.6379628186 252157.67431363315 252864.68748306442 253573.6830138223 254284.66646415726 254997.6434079046 255712.61943452794 256429.6001491624 257148.5911726597 257869.59814163114 258592.62670849235 259317.68254150785 260044.77132483467 260773.89875856772 261505.07055878403 262238.29245758755 262973.5702031542 263710.90955977706 264450.31630791194 265191.7962442208 265935.3551816207 266680.99894932494 267428.7333928928 268178.5643742728 268930.49777184986 269684.53948049084 270440.695411591 271198.9714931208 271959.3736696707 272721.9079024999 273486.58016958175 274253.39646565093 275022.3628022506 275793.48520777933 276566.76972753875 277342.22242378024 278119.84937575244 278899.6566797499 279681.6504491608 280465.8368145136 281252.2219235256 282040.81194115244 282831.6130496344 283624.63144854666 284419.87335484603 285217.3450029218 286017.052644643 286819.00254940847 287623.2010041947 288429.6543136069 289238.36879992706 290049.3508031638 290862.60668110196 291678.1428093534 292495.96558140573 293316.08140867326 294138.4967205465 294963.2179644435 295790.2516058597 296619.60412841913 297451.2820339244 298285.29184240894 299121.6400921868 299960.33333990467 300801.37816059287 301644.781147718 302490.548913233 303338.6880876294 304189.20531999075 305042.1072780432 305897.4006482082 306755.09213565453 307615.1884643518 308477.69637712254 309342.6226356951 310209.9740207566 311079.7573320067 311951.9793882099 312826.64702724956 313703.7671061816 314583.3465012881 315465.3921081314 316349.9108416076 317236.9096360016 318126.39544504083 319018.3752419499 319912.8560195053 320809.84479009005 321709.34858574974 322611.37445824547 323515.9294791115 324423.0207397094 325332.6553512832 326244.8404450166 327159.5831720879 328076.89070372627 328996.7702312677 329919.22896621213 330844.2741402787 331771.9130054642 332702.15283409815 333635.000918901 334570.4645730412 335508.5511301912 336449.2679445872 337392.62239108514 338338.62186521903 339287.27378325816 340238.58558226697 341192.5647201622 342149.21867577074 343108.55494888977 344070.5810603444 345035.30455204734 346002.73298705736 346972.8739496391 347945.73504532274 348921.3239009627 349899.6481647983 350880.71550651325 351864.5336172959 352851.11020989943 353840.4530187029 354832.5697997713 355827.4683309162 356825.1564117572 357825.641863783 358828.93253041257 359835.0362770565 360843.96099117893 361855.71458235924 362870.30498235417 363887.7401451602 364908.028047075 365931.17668676144 366957.1940853088 367986.08828629623 369017.8673558568 370052.53938273917 371090.1124783717 372130.594776926 373173.9944353806 374220.3196335856 375269.5785743253 376321.77948338387 377376.9306096098 378435.0402249796 379496.1166246631 380560.16812708904 381627.20307400957 382697.22983056575 383770.256785353 384846.2923504882 385925.3449616738 387007.42307826446 388092.5351833344 389180.6897837423 390271.8954101994 391366.1606173361 392463.4939837681 393563.90411216434 394667.3996293143 395773.9891861965 396883.68145804456 397996.4851444165 399112.40896926314 400231.46168099507 401353.65205255285 402478.98888147506 403607.4809899667 404739.1372249699 405873.9664582314 407011.97758637316 408153.17953096237 409297.581238581 410445.1916808955 411596.01985472743 412750.0747821251 413907.36551043246 415067.9011123611 416231.6906860608 417398.743355192 418569.0682689963 419742.6746023681 420919.57155592676 422099.7683560894 423283.27425514214 424470.0985313138 425660.2504888473 426853.7394580733 428050.574795484 429250.7658838054 430454.32213207113 431661.2529756965 432871.56787655264 434085.2763230401 435302.38783016347 436522.9119396063 437746.8582198054 438974.2362660257 440205.05570043664 441439.3261721863 442677.0573574781 443918.25895964535 445162.94070922834 446411.11236405047 447662.7837092945 448917.9645575802 450176.66474903957 451438.8941513949 452704.6626600366 453973.9801980999 455246.85671654367 456523.3021942269 457803.3266379887 459086.94008272537 460374.15259146964 461664.97425547 462959.4151942681 464257.4855557811 465559.1955163779 466864.55528096115 468173.57508304634 469486.2651848425 470802.63587733207 472122.69748035184 473446.4603426745 474773.93484208855 476105.1313854804 477440.0604089161 478778.7323777228 480121.1577865712 481467.3471595565 482817.31105028285 484171.060041945 485528.6047474113 486889.955809307 488255.1239000979 489624.11972217355 490996.9540079316 492373.63751986175 493754.1810506305 495138.59542316466 496526.89149073744 497919.08013705263 499315.172276331 500715.178853395 502119.110843754 503526.97925369226 504938.7951203533 506354.5695118274 507774.3135272377 509198.03829682834 510625.75498205057 512057.4747756508 513493.208901759 514932.96861597453 516376.76520545676 517824.60998901265 519276.5143171847 520732.4895723418 522192.54716876644 523656.6985527453 525124.9552026588 526597.3286290712 528073.8303748205 529554.4720151087 531039.265157594 532528.2214424803 534021.3525426084 535518.6701635486 537020.1860436915 538525.9119543416 540035.8596998068 541550.041117494 543068.4680779992 544591.1524852018 546118.1062763601 547649.3414221999 549184.8699270121 550724.703828747 552268.8551991066 553817.3361436398 555370.1588018385 556927.3353472316 558488.8779874803 560054.7989644753 561625.1105544317 563199.8250679838 564778.9548502852 566362.5122811014 567950.5097749111 569542.959781 571139.8747835597 572741.2673017862 574347.1498899776 575957.535137632 577572.4356695471 579191.864145917 580815.8332624357 582444.3557503928 584077.4443767741 585715.1119443632 587357.3712918399 589004.2352938824 590655.7168612671 592311.8289409705 593972.5845162711 595637.9966068498 597308.0782688933 598982.8425951955 600662.3027152611 602346.4717954074 604035.3630388685 605728.9896858986 607427.3650138755 609130.502337404 610838.4150084222 612551.1164163055 614268.6199879696 615990.9391879779 617718.0875186472 619450.0785201514 621186.9257706312 622928.6428862963 624675.2435215357 626426.7413690217 628183.15015982 629944.4836634963 631710.7556882246 633481.9800808931 635258.1707272166 637039.3415518424 638825.5065184609 640616.679629914 642412.8749283063 644214.1064951138 646020.388451295 647831.7349574021 649648.1602136914 651469.6784602331 653296.3039770268 655128.0510841088 656964.9341416678 658806.9675501571 660654.1657504056 662506.543223733 664364.1144920613 666226.8941180313 668094.8967051144 669968.1368977288 671846.629381352 673730.3888826382 675619.4301695337 677513.7680513917 679413.4173790881 681318.3930451383 683228.7099838151 685144.3831712638 687065.4276256213 688991.8584071331 690923.6906182709 692860.9394038524 694803.6199511583 696751.7474900527 698705.3372931019 700664.404675694 702628.9649961592 704599.0336558905 706574.6260994646 708555.757814761 710542.4443330867 712534.7012292956 714532.5441219109 716535.9886732476 718545.0505895364 720559.7456210451 722580.0895622036 724606.0982517261 726637.7875727377 728675.1734528969 730718.27186452 732767.098824709 734821.6703954737 736882.0026838613 738948.1118420796 741020.0140676248 743097.7256034091 745181.2627378877 747270.6418051843 749365.8791852234 751466.9913038552 753573.9946329863 755686.9056907073 757805.7410414234 759930.5172959843 762061.251111814 764197.9591930406 766340.6582906297 768489.3652025129 770644.0967737212 772804.8698965168 774971.7015105245 777144.6086028662 779323.6082082925 781508.7174093177 783699.9533363532 785897.3331678403 788100.8741303864 790310.5934989012 792526.5085967288 794748.6367957869 796976.9955167011 799211.6022289414 801452.4744509596 803699.6297503272 805953.0857438726 808212.8600978188 810478.9705279225 812751.4347996128 815030.2707281307 817315.4961786682 819607.1290665091 821905.1873571683 824209.6890665338 826520.6522610073 828838.0950576467 831162.0356243073 833492.4921797828 835829.4829939516 838173.0263879179 840523.1407341555 842879.844456651 845243.1560310503 847613.0939848019 849989.6768973024 852372.9234000427 854762.8521767524 857159.4819635496 859562.8315490843 861972.9197746876 864389.7655345186 866813.3877757139 869243.8054985331 871681.0377565115 874125.103656607 876576.0223593509 879033.8130789979 881498.4950836754 883970.0876955378 886448.6102909151 888934.0823004647 891426.5232093263 893925.9525572724 896432.389938862 898945.8550035943 901466.3674560634 903993.9470561118 906528.613618986 909070.3870154906 911619.2871721458 914175.334071343 916738.5477515013 919308.9483072248 921886.5558894586 924471.390705649 927063.4730199015 929662.8231531383 932269.4614832586 934883.408445299 937504.6845315925 940133.3102919292 942769.306333718 945412.6933221479 948063.4919803509 950721.7230895628 953387.4074892879 956060.5660774591 958741.2198106066 961429.3897040186 964125.096831907 966828.3623275728 969539.2073835713 972257.6532518797 974983.721244062 977717.4327314354 980458.8091452414 983207.8719768105 985964.6427777322 988729.1431600227 991501.3947962954 994281.4194199304 997069.2388252458 999864.8748676664 . Here we initialize the total population to be 50, then set the growth factor as 1.00005 (.005 percent change). It will print the population every 56th day until it reaches one million. It multiplies the current population by the growth factor in each iteration, and increments the day count. When the day count reaches 56, it prints the current population and resets the day count to 0. . Note! This simulation assumes that the growth factor remains constant as time progresses, which may not be a realistic assumption in real-world scenarios. . import matplotlib.pyplot as plt # Define the initial population and growth rate population = 100 growth_rate = 0.05 # Define the number of years to simulate num_years = 50 # Create lists to store the population and year values populations = [population] years = [0] # Simulate population growth for the specified number of years for year in range(1, num_years+1): # Calculate the new population size new_population = population + (growth_rate * population) # Update the population and year lists populations.append(new_population) years.append(year) # Set the new population as the current population for the next iteration population = new_population # Plot the population growth over time plt.plot(years, populations) plt.xlabel(&#39;Year&#39;) plt.ylabel(&#39;Population&#39;) plt.title(&#39;Population Growth Simulation&#39;) plt.show() . If we create quantative data, we can plot it using the Matplotlib library. . Example on how simplification can cause bias . import random beak = [&quot;small-beak&quot;, &quot;long-beak&quot;, &quot;medium-beak&quot;], wing = [&quot;small-wings&quot;, &quot;large-wings&quot;, &quot;medium-wings&quot;], height = [&quot;short&quot;, &quot;tall&quot;,&quot;medium&quot;] naturaldisaster = [&quot;flood&quot;, &quot;drought&quot;, &quot;fire&quot;, &quot;hurricane&quot;, &quot;dustbowl&quot;] print(&quot;When a&quot; , random.choice(naturaldisaster) , &quot;hit&quot;, random.choice(height), &quot;birds died&quot;) . When a drought hit medium birds died . How does this simulation have bias? . JS examples . Dice Roll Binary Coin Flip Card Pull . Hacks . Answer all questions and prompts in the notes (0.2) | Create a simulation Create a simulation that uses iteration and some form of data collection (list, dictionary...) (0.4) try creating quantative data and using the Matplotlib library to display said data | Comment and describe function of each parts | How does your simulation help solve/mimic a real world problem? | Is there any bias in your simulation? Meaning, are there any discrepancies between your program and the real event? | . | | Answer these simulation questions (0.3) | Bonus: take a real world event and make a pseudocode representation or pseudocode on a flowchart of how you would make a simulation for it (up to +0.1 bonus) | . Simulation (NBA Series) . I want to simulate a 7 game series between the Suns and the Nuggets, and I will give the Suns a slight edge with a 51% chance to win . import random # set up variables that represent games won by each team suns = 0 nuggets = 0 # set up variable which represents amount of games played games = 1 # while loop to simulate games until a team wins 4 games while suns &lt; 4 and nuggets &lt; 4: num = random.randint(1, 100) # give suns 51% chance of winning each game if num &lt;= 51: suns += 1 print(f&quot;Game {games} winner: Suns&quot;) # give nuggets 49% chance of winning each game else: nuggets += 1 print(f&quot;Game {games} winner: Nuggets&quot;) games += 1 # print the results of the simulated series if suns &gt; nuggets: print(f&quot;Suns defeat the Nuggets in {games - 1} games.&quot;) if nuggets &gt; suns: print(f&quot;Nuggets defeat the Suns in {games - 1} games.&quot;) . Game 1 winner: Suns Game 2 winner: Nuggets Game 3 winner: Nuggets Game 4 winner: Suns Game 5 winner: Suns Game 6 winner: Suns Suns defeat the Nuggets in 6 games. . The series mimics a playoff series between two NBA teams. It&#39;s mostly just for fun and doesn&#39;t really solve any problems one may face. | There is a lot of potential bias in this simulation. There is a lot more going into a team winning a game than just straight odds such as injuries, home court advantage, crowd factor, fatigue, etc. | . College Board Questions . A theme park wants to create a simulation to determine how long it should expect the wait time at its most popular ride. Which of the following characteristics for the virtual patrons would be most useful? Select two answers . A. Ride preference—denotes whether a patron prefers roller coasters, other thrill rides, gentle rides, or no rides. | B. Walking preference—denotes how far a patron is willing to walk in between rides. | C. Food preference—denotes the type of food that a patron prefers to eat (e.g., chicken, burgers, salads). | D. Ticket type—denotes whether the patron has a single-day pass, a multi-day pass, or an annual pass. | . A programmer has created a program that models the growth of foxes and rabbits. Which of the following potential aspects of the simulation does NOT need to be implemented? . A. A representation of grass that rabbits must eat frequently to survive. | B. Each rabbit may only have a certain amount of children per litter. | C. Each fox must eat a rabbit frequently to survive. | D. Each rabbit can only live to a certain age, assuming that they are not eaten. | . The heavy use of chemicals called chlorofluorocarbons (CFCs) has caused damage to the Earth’s ozone layer, creating a noticeable hole over Antarctica. A scientist created a simulation of the hole in the layer using a computer, which models the growth of the hole over many years. Which of the following could be useful information that the simulation could produce? . A. The approximate length of time until the hole would be refilled (due to various atmospheric processes) | B. The exact size of the hole at any given point in time | C. The exact length of time until the hole would be refilled (due to various atmospheric processes) | D. The exact depth of the hole at any point in time | . Suppose that an environmentalist wanted to understand the spread of invasive species. What would be a benefit of doing this with a simulation, rather than in real life? . A. The species used in the simulation could be designed to mimic many different species at once. | B. The species created could be quickly tested in multiple environments to better understand how its spread is affected by environmental factors. | C. The simulation could be run much more quickly than in real life. | D. All of the above | . A program is being created to simulate the growth of a brain-based on randomly determined environmental factors. The developer plans to add a feature that lets the user quickly run several hundred simulations with any number of factors kept constant. Why would this be useful? Select two answers. . A. It would allow the user to gather data without taxing the computer’s hardware. | B. It would allow the user to see the effect of specific variables by ensuring that the others do not change. | C. It would quickly provide the user with a large amount of data. | D. It would make simulations more detailed. | . Which of the following statements describes a limitation of using a computer simulation to model a real-world object or system? . A. Computer simulations can only be built afer the real-world object or system has been created. | B. Computer simulations only run on very powerful computers that are not available to the general public. | C. Computer simulations usually make some simplifying assumptions about the real-world object or system being modeled. | D. It is difficult to change input parameters or conditions when using computer simulations. | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/student/2023/04/25/P3M-Simulations.html",
            "relUrl": "/student/2023/04/25/P3M-Simulations.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Dice",
            "content": "Dice Roll . Dice Roll Simulator . Roll Dice .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2023/04/24/dice.html",
            "relUrl": "/2023/04/24/dice.html",
            "date": " • Apr 24, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "P3-M 4/21 Binary Overview",
            "content": "How to contact us . Join the &quot;coding&quot; channel on slack! That is the only place where we will be answering questions or sending announcements about lessons. If you have a question please contact us there. . How to join . Click on &quot;add channels&quot; below the list of channels | Click on &quot;browse channels&quot; | Search for &quot;coding&quot; | Click the green &quot;Join&quot; button on the right | . Learning Objectives . DAT-1.A: Representing Data with Bits . Basic Information . Bit is short for binary digit, and represents a value of either 0 or 1. A byte is 8 bits. | . | Sequences of bits are used to represent different things. Representing data with sequences of bits is called binary. | . | . Practice Questions: . How many bits are in 3 bytes? 24 bits | . | What digital information can be represented by bits? Numbers, letters, words | . | Are bits an analog or digital form of storing data? What is the difference between the two? Digital storage, it is much more compact and efficient and allows data to be stored in a way that is more simple, at least for a computer. | . | Examples . Boolean variables (true or false) are the easiest way to visualize binary. 0 = False | 1 = True | . | . import random def example(runs): # Repeat code for the amount of runs given while runs &gt; 0: # Assigns variable boolean to either True or False based on random binary number 0 or 1. boolean = False if random.randint(0, 1) == 0 else True # If the number was 1 (True), it prints &quot;awesome.&quot; if boolean: print(&quot;binary is awesome&quot;) # If the number was 2 (False), it prints &quot;cool.&quot; else: print(&quot;binary is cool&quot;) runs -= 1 # Change the parameter to how many times to run the function. example(10) . binary is awesome binary is awesome binary is cool binary is cool binary is awesome binary is awesome binary is cool binary is cool binary is awesome binary is awesome . DAT-1.B: The Consequences of Using Bits to Represent Data . Basic Information . Integers are represented by a fixed number of bits, this limits the range of integer values. This limitation can result in overflow or other errors. | Other programming languages allow for abstraction only limited by the computers memory. | Fixed number of bits are used to represent real numbers/limits | . Practice Questions: . What is the largest number can be represented by 5 bits? | 31 | . One programing language can only use 16 bits to represent non-negative numbers, while a second language uses 56 bits to represent numbers. How many times as many unique numbers can be represented by the second language? | 2^56 unique numbers can be represented by this language | . 5 bits are used to represent both positive and negative numbers, what is the largest number that can be represented by these bits? (hint: different thatn question 1) | 15 | . Examples . import math def exponent(base, power): # Print the operation performed, turning the parameters into strings to properly concatenate with the symbols &quot;^&quot; and &quot;=&quot;. print(str(base) + &quot;^&quot; + str(power) + &quot; = &quot; + str(math.pow(base, power))) # How can function become a problem? (Hint: what happens if you set both base and power equal to high numbers?) exponent(5, 2) . 5^2 = 25.0 . DAT-1.C: Binary Math . Basic Information . Binary is Base 2, meaning each digit can only represent values of 0 and 1. | Decimal is Base 10, meaning eacht digit can represent values from 0 to 9. | Conversion between sequences of binary to decimal depend on how many binary numbers there are, their values and their positions. | . Practice Questions: . What values can each digit of a Base 5 system represent? Values from 0 to 4 | . | What base is Hexadecimal? What range of values can each digit of Hexadecimal represent? Hexadecimal is base 16, meaning each digit in hexadecimal can represent values from 0 to 15 | . | When using a base above 10, letters can be used to represent numbers past 9. These letters start from A and continue onwards. For example, the decimal number 10 is represented by the letter A in Hexadecimal. What letter would be used to represent the Base 10 number 23 in a Base 30 system? What about in a Base 50 system? It would be the 14th letter in the alphabet, which would be N in both base 30 and 50 counting system. #### Examples | . | Using 6 bits, we can represent 64 numbers, from 0 to 63, as 2^6 = 64. | The numbers in a sequence of binary go from right to left, increasing by powers of two from 0 to the total amount of bits. The whole number represented is the sum of these bits. For example: 111111 | 2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0 | 32 + 16 + 8 + 4 + 2 + 1 | 63 | | Fill in the blanks (convert to decimal) . 001010 = 10 | 11100010 = 226 | 10 = 2 | | Fill in the blanks (convert to binary) . 12 = 1100 | 35 = 100011 | 256 = 100000000 | | . Hacks &amp; Grading (Due SUNDAY NIGHT 4/23) . Complete all of the popcorn hacks (Fill in the blanks + run code cells and interact + Answer ALL questions) [0.3 or nothing] | Create a program to conduct basic mathematical operations with binary sequences (addition, subtraction, multiplication, division) [0.6 or nothing] For bonus, program must be able to conduct mathematical operations on binary sequences of varying bits (for example: 101 + 1001 would return decimal 14.) [0.1 or nothing] | . | . a = input(&quot;What is your first binary number?&quot;) b = input(&quot;What is your second binary number?&quot;) def binary_addition(a, b): &quot;&quot;&quot; This function takes two binary numbers as input and returns their sum. &quot;&quot;&quot; max_len = max(len(a), len(b)) a = a.zfill(max_len) b = b.zfill(max_len) result = &#39;&#39; carry = 0 for i in range(max_len - 1, -1, -1): r = carry r += 1 if a[i] == &#39;1&#39; else 0 r += 1 if b[i] == &#39;1&#39; else 0 result = (&#39;1&#39; if r % 2 == 1 else &#39;0&#39;) + result carry = 0 if r &lt; 2 else 1 if carry !=0: result = &#39;1&#39; + result return result.zfill(max_len) def binary_subtraction(a, b): &quot;&quot;&quot; This function takes two binary numbers as input and returns their difference. &quot;&quot;&quot; max_len = max(len(a), len(b)) a = a.zfill(max_len) b = b.zfill(max_len) result = &#39;&#39; borrow = 0 for i in range(max_len - 1, -1, -1): if a[i] == &#39;1&#39; and b[i] == &#39;1&#39;: if borrow == 1: result = &#39;1&#39; + result else: result = &#39;0&#39; + result borrow = 1 elif a[i] != b[i]: if borrow == 1: result = &#39;0&#39; + result borrow = 0 else: result = &#39;1&#39; + result else: if borrow == 1: result = &#39;1&#39; + result borrow = 0 else: result = &#39;0&#39; + result return result.lstrip(&#39;0&#39;) def binary_multiplication(a, b): &quot;&quot;&quot; This function takes two binary numbers as input and returns their product. &quot;&quot;&quot; a = int(a, 2) b = int(b, 2) result = a * b return bin(result)[2:] def binary_division(a, b): &quot;&quot;&quot; This function takes two binary numbers as input and returns their quotient and remainder. &quot;&quot;&quot; a = int(a, 2) b = int(b, 2) quotient = a // b remainder = a % b return bin(quotient)[2:], bin(remainder)[2:] operation = input(&quot;Do you (a)dd, (s)ubtract, (m)ultiply, or (d)ivide?&quot;) if operation == &quot;a&quot;: print(f&quot;{a} + {b} =&quot;, binary_addition(a, b)) if operation == &quot;s&quot;: print(f&quot;{a} - {b} =&quot;, binary_subtraction(a, b)) if operation == &quot;m&quot;: print(f&quot;{a} * {b} =&quot;, binary_multiplication(a, b)) if operation == &quot;d&quot;: print(f&quot;{a} / {b} =&quot;, binary_division(a, b)) . 0110 + 1001 = 1111 .",
            "url": "https://trentcardall.github.io/cuddly-succotash/student/2023/04/21/P3M-BinaryLesson.html",
            "relUrl": "/student/2023/04/21/P3M-BinaryLesson.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "2018 MC Test Corrections",
            "content": "Score . . Question 14 . . Even though they display different values, it is still the same amount of values. It makes sense since i starts at the same point for both of them. . Question 60 . . Creating list of names can help manage complexity . Reflection . I am getting good with a lot of topics as I have seen these before. I think I mostly need to study the topics related to the internet and keys since those are a little bit less intuitive and aren’t as much common knowledge. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2023/04/18/mc2018.html",
            "relUrl": "/markdown/2023/04/18/mc2018.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: 1.1 GHz Quad-Core Intel Core i5 | Memory in GB: 8 GB | Storage in GB: 500 GB | OS: macOS Catalina | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 4 MC Test Corrections",
            "content": "Score . . Corrections . Question 37 . . n^2 is actually a reasonable amount of steps, I was thinking that it was more. I need to study the topic of space and time more before the AP test. . Reflection . I am mostly ready but I need to review more space and time since it is a new topic. I also need to review more of the internet stuff because it is not quite as intuitive and I forgot some of the stuff since I first learned it. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2023/04/03/mc4.html",
            "relUrl": "/markdown/2023/04/03/mc4.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a ___. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is ___. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # It doesn&#39;t print any duplicates. It only prints each number involved once, even if it is mentioned # multiple times # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # Like hashmaps and hashtables, sets have unique values # . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # List on genre, and tracks have a dictionary # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # Make it into a set # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: {&#39;Taylor Swift&#39;, &#39;Joel Little&#39;, &#39;Jack Antonoff&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;}} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) lover_album[&quot;genre&quot;].append(&quot;electropop&quot;) # How would add an additional genre to the dictionary, like electropop? # Since genre is a list, use the append function to add something else to the list # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;electropop&#39;, &#39;electropop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: {&#39;Taylor Swift&#39;, &#39;Joel Little&#39;, &#39;Jack Antonoff&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;}} . def display_album(album): # Print lover_album in more readable format for k,v in album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) if k == &quot;genre&quot;: # have iteration stop before it reaches &quot;tracks&quot; break # print &quot;tracks&quot; in more readable format print(&quot;tracks:&quot;) for k,v in album[&quot;tracks&quot;].items(): print(&quot; t&quot; + str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # I made the first loop stop at &quot;genre&quot; then made a second for loop just for the tracks section # display_album(lover_album) . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: 1: I Forgot That You Existed 2: Cruel Summer 3: Lover 4: The Man 5: The Archer 6: I Think He Knows 7: Miss Americana &amp; The Heartbreak Prince 8: Paper Rings 9: Cornelia Street 10: Death By A Thousand Cuts 11: London Boy 12: Soon You&#39;ll Get Better (feat. Dixie Chicks) 13: False God 14: You Need To Calm Down 15: Afterglow 16: Me! (feat. Brendon Urie of Panic! At The Disco) 17: It&#39;s Nice To Have A Friend 18: Daylight . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # You can add to search for specific tracks or # . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . Canva Comparison . Add tracks function . def update(): track = len(lover_album[&quot;tracks&quot;]) + 1 name = input(&quot;Enter the name for the new track:&quot;) lover_album[&quot;tracks&quot;].update({track: name}) update() display_album() . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;electropop&#39;, &#39;electropop&#39;] Tracks: 1: I Forgot That You Existed 2: Cruel Summer 3: Lover 4: The Man 5: The Archer 6: I Think He Knows 7: Miss Americana &amp; The Heartbreak Prince 8: Paper Rings 9: Cornelia Street 10: Death By A Thousand Cuts 11: London Boy 12: Soon You&#39;ll Get Better (feat. Dixie Chicks) 13: False God 14: You Need To Calm Down 15: Afterglow 16: Me! (feat. Brendon Urie of Panic! At The Disco) 17: It&#39;s Nice To Have A Friend 18: Daylight 19: All Of The Girls You Loved Before 20: hi 21: example . Delete tracks . def delete(): track = input(&quot;Which track # do you want to delete?&quot;) lover_album[&quot;tracks&quot;].pop(track) display_album() delete() . KeyError Traceback (most recent call last) /Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-29-DS-hashmaps.ipynb Cell 18 in &lt;cell line: 6&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-29-DS-hashmaps.ipynb#X23sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; lover_album[&#34;tracks&#34;].pop(track) &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-29-DS-hashmaps.ipynb#X23sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; display_album() -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-29-DS-hashmaps.ipynb#X23sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; delete() /Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-29-DS-hashmaps.ipynb Cell 18 in delete() &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-29-DS-hashmaps.ipynb#X23sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; def delete(): &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-29-DS-hashmaps.ipynb#X23sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; track = input(&#34;Which track # do you want to delete?&#34;) -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-29-DS-hashmaps.ipynb#X23sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; lover_album[&#34;tracks&#34;].pop(track) &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-29-DS-hashmaps.ipynb#X23sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; display_album() KeyError: &#39;21&#39; . Create your own album . album = {} title = input(&quot;What do you want your album to be called?&quot;) album.update({&quot;title&quot;: title}) artist = input(&quot;Who is this album by?&quot;) album.update({&quot;artist&quot;: artist}) genre = input(&quot;What genre is this album?&quot;) album.update({&quot;genre&quot;: [genre]}) track = input(&quot;What will be the name of the first track on this album&quot;) album.update({&quot;tracks&quot;: {1: track}}) def more_tracks(): msg = input(&quot;Will there be more tracks on this album? Enter y for yes and n for no&quot;) if msg == &quot;y&quot;: num = len(album[&quot;tracks&quot;]) + 1 tracks = input(&quot;What will be the name of the next track on the album&quot;) album[&quot;tracks&quot;].update({num: tracks}) more_tracks() if msg == &quot;n&quot;: display_album(album) more_tracks() . title: Cool Album artist: Trent Cardall genre: [&#39;cool&#39;] Tracks: 1: cool song 1 2: cool song 2 3: cool song 3 .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "CPT Plan, Individual",
            "content": "Individual Plan for CPT . Since I am DevOps, I need to make sure I get my part in deployment done fast, as my team will depend on the backend deployment for the functionality of the project. If I procrastinate, the whole team will suffer because of me. | I also need to prepare my individual part of the lesson on Conda Scripts. I don’t know a lot about this yet, so I need to do my research in order to provide the class with the information they need to succeed on the AP test and in this class. | . Github Commits Chart . . I have made meaningful commits every week since Ski Week. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2023/03/27/indy.html",
            "relUrl": "/markdown/2023/03/27/indy.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Big Idea 2 Quiz",
            "content": "Score . . Reflection . I did a lot better on this quiz than other quizzes, and I felt like this kind of material regarding data and data compression is pretty self explanatory for the most part. I didn’t have to look anything up and I was surprised I ended up getting a 100% without using help from the internet. I find this topic to be a lot easier than some of the other collegeboard topics. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2023/03/26/bigidea2.html",
            "relUrl": "/markdown/2023/03/26/bigidea2.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . - How data is organized in a database. . What is the purpose of identity Column in SQL database? Generating key values for primary key columns. | . | What is the purpose of a primary key in SQL database? Uniquely identifies each record in a table | . | What are the Data Types in SQL table? String, numeric, date and time | . | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? Creates a session with the data source | . | Same for cursor object? Retrieves data one row at a time | . | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? Yes, it has data and variables | . | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$DFRnkm3Or5uHl7VU$499f6fe1101659ae17936e62ed8b832b38bc6d1d4ba444404c20238bde3739c5&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$kgRYT0rKWoEs825U$7b0d0adf34adea1f5832d01166cae204b77bea9af8b8b21d027cff5866b2b9d5&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$6x6IuKgohiUA1Ovm$54fad49de978ddac51b4e972e80160ecd09658f9cae75008cb16206090f31b60&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$tSWjCRTMFWpiD1P7$a8e11bb06844e3fac968f02a65d8111522982670dbf57ab8aa7f61e8957fd14b&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$QZnQiJVbvaYuNJUp$9d64606ca134832b02001557e8c08de9f3b81911725c4acde454674da1ac7f72&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$tvojNpWzWWW4zmMx$b7db6610e92b1441addad5aec407c0a0939e1c7dac4158f2592ee082a94ee304&#39;, &#39;1921-10-21&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? The imperative implementation makes a little bit more sense to me as it just inserts a new row in the table. The other one creates a new object that is a user in a group of users | . | Explain purpose of SQL INSERT. Is this the same as User init? Init builds the class into a database, sort of, while insert inserts a new row into the database | . | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new user record trentcardall has been created . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? If the password someone enters a new password less than 2 characters wrong, the password would change to &quot;gothackednewpassword123&quot; | . | Explain try/except, when would except occur? Except would occur when there is an error with sqlite | . | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? Yes, it can be, because it removes information from a database that may not be recovered if lost. | . | In the print statemements, what is the &quot;f&quot; and what does {uid} do? f allows an object to be placed directly in the print statement with {} around it. {uid} means to print whatever the uid is right there. | . | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$DFRnkm3Or5uHl7VU$499f6fe1101659ae17936e62ed8b832b38bc6d1d4ba444404c20238bde3739c5&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$kgRYT0rKWoEs825U$7b0d0adf34adea1f5832d01166cae204b77bea9af8b8b21d027cff5866b2b9d5&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$6x6IuKgohiUA1Ovm$54fad49de978ddac51b4e972e80160ecd09658f9cae75008cb16206090f31b60&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$tSWjCRTMFWpiD1P7$a8e11bb06844e3fac968f02a65d8111522982670dbf57ab8aa7f61e8957fd14b&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$QZnQiJVbvaYuNJUp$9d64606ca134832b02001557e8c08de9f3b81911725c4acde454674da1ac7f72&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$tvojNpWzWWW4zmMx$b7db6610e92b1441addad5aec407c0a0939e1c7dac4158f2592ee082a94ee304&#39;, &#39;1921-10-21&#39;) (7, &#39;Trent Cardall&#39;, &#39;trentcardall&#39;, &#39;cardall&#39;, &#39;2005-03-09&#39;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation . Creating my own table . Using the imperative style, I find it much easier and it makes a lot more sense . import sqlite3 # establish connection and such conn = sqlite3.connect(&#39;instance/sqlite.db&#39;) cursor = conn.cursor() # creating the table cars = &#39;&#39;&#39;CREATE TABLE reservations( _name TEXT, _car TEXT, _dates TEXT )&#39;&#39;&#39; cursor.execute(cars) print(&quot;Table created successfully!&quot;) # commit new table and close connection conn.commit() conn.close() . Table created successfully! . Create Entry . import sqlite3 def create_entry(): name = input(&quot;Enter your name:&quot;) car = input(&quot;What car will you be using?&quot;) dates = input(&quot;Which dates will you plan on using the car? (MM/DD - MM/DD)&quot;) conn = sqlite3.connect(&#39;instance/sqlite.db&#39;) cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO reservations (_name, _car, _dates) VALUES (?, ?, ?)&quot;, (name, car, dates)) # Commit the changes to the database conn.commit() print(f&quot;A record for {name} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) conn.close() create_entry() . A record for Joe has been created . Update Entry . import sqlite3 def update_entry(): name = input(&quot;Enter your name to update&quot;) choice = input(&quot;What do you want to change? Enter c for car and d for dates.&quot;) if choice == &quot;c&quot;: car = input(&quot;What car do you want to drive instead?&quot;) conn = sqlite3.connect(&#39;instance/sqlite.db&#39;) cursor = conn.cursor() try: cursor.execute(&quot;UPDATE reservations SET _car = ? where _name = ?&quot;, (car, name)) if cursor.rowcount == 0: print(f&quot;The name {name} was not found&quot;) else: print(f&quot;The car for {name} was updated to {car}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while updating&quot;, error) if choice == &quot;d&quot;: dates = input(&quot;What dates will you be driving instead?&quot;) conn = sqlite3.connect(&#39;instance/sqlite.db&#39;) cursor = conn.cursor() try: cursor.execute(&quot;UPDATE reservations SET _dates = ? where _name = ?&quot;, (dates, name)) if cursor.rowcount == 0: print(f&quot;The name {name} was not found&quot;) else: print(f&quot;The dates for {name} have been updated to {dates}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while updating&quot;, error) update_entry() . The car for John Smith was updated to Buick Enclave . Delete Entry . import sqlite3 def delete_entry(): name = input(&quot;Enter your name to delete your entry&quot;) conn = sqlite3.connect(&#39;instance/sqlite.db&#39;) cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM reservations WHERE _name = ?&quot;, (name,)) if cursor.rowcount == 0: print(f&quot;The name {name} was not found in the table&quot;) else: print(f&quot;The entry for {name} has been removed&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while deleting&quot;, error) delete_entry() . Read Entry . import sqlite3 def read_entry(): conn = sqlite3.connect(&#39;instance/sqlite.db&#39;) cursor = conn.cursor() data = cursor.execute(&#39;SELECT * FROM reservations&#39;).fetchall() for row in data: print(row) read_entry() . (&#39;John Smith&#39;, &#39;Buick Enclave&#39;, &#39;03/22 - 03/26&#39;) (&#39;Trent Cardall&#39;, &#39;Ford Taurus&#39;, &#39;04/12 - 04/16&#39;) (&#39;Joe&#39;, &#39;MINI Convertible&#39;, &#39;05/02 - 05/03&#39;) (&#39;Luke&#39;, &#39;Subaru Outback&#39;, &#39;04/12 - 04/16&#39;) (&#39;Darth Vader&#39;, &#39;Buick XC90&#39;, &#39;03/26 - 03/28&#39;) . Menu . def db_menu(): option = input(&quot;(C)reate, (R)ead, (U)pdate, or (D)elete?&quot;) if option == &quot;C&quot;: create_entry() elif option == &quot;R&quot;: read_entry() elif option == &quot;U&quot;: update_entry() elif option == &quot;D&quot;: delete_entry() else: print(&quot;You did not enter one of the correct options. Please try again.&quot;) db_menu() . A record for Darth Vader has been created . Debugging read function . You can see the records of the database, as well as the conn and cursor objects .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . Notes from this section . class User is template definition | setters and getters | Create, read, update, delete. Common methods for managing a database. Interact with data and object | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL # class user is template definition, we will make objects from that template class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid toby Created new uid niko Created new uid lex Created new uid whit Created new uid indi Created new uid raven . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . ORM Object Related Mapping, used to identify things in database . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . True . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) # if user already exists return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # creating a new user for db # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() #making sure valid dob entered except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;Trent Cardall&#39;, &#39;uid&#39;: &#39;trentcardall&#39;, &#39;dob&#39;: &#39;03-09-2005&#39;, &#39;age&#39;: 18} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() # getting all information from the table json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready # reading the info from each user read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;Person&#39;, &#39;uid&#39;: &#39;Test&#39;, &#39;dob&#39;: &#39;01-01-2000&#39;, &#39;age&#39;: 23}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | . Deleting Users . import sqlite3 def delete_row_by_id(id): # Connect to the database conn = sqlite3.connect(&#39;instance/sqlite.db&#39;) c = conn.cursor() # Delete the row with the specified ID c.execute(&quot;DELETE FROM users WHERE id=?&quot;, (id,)) # Commit the changes and close the connection conn.commit() conn.close() print(f&quot;Row with ID {id} has been deleted.&quot;) id = input(&quot;Select the id of the user you want to delete&quot;) delete_row_by_id(id) read() . Row with ID 7 has been deleted. . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}] .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "3.2 Quizzes",
            "content": "Using Programs With Data Quiz . . Extracting Information From Data Quiz . . Data Compression Quiz . . Reflection . Although I got 100% on the other two quizzes, I got 2 questions wrong on the Using Programs With Data Quiz. This quiz was a little bit more confusing than the other ones and wasn’t quite as straightforward. . The first question I got wrong on this quiz was a little bit weird but I ended up being stuck between C and D and picked the wrong one. . . I thought both of these made sense so I picked one. I see how D is right though as that would be used from the database . The other one I got wrong was another weird question that was a lot of information to take in, so it confused me from the start. . . I now realize that C is wrong because it doesn’t properly clean out the unavailable information. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2023/03/12/3.2.html",
            "relUrl": "/markdown/2023/03/12/3.2.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # Row 9 is missing a student ID, and the year in school is written differently for some students (&quot;Junior&quot; and &quot;9th Grade&quot;) # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() # this cell is listing students in order of GPA #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390, 382190], &quot;duration&quot;: [50, 40, 45, 30289] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) # this section you can make your own dictionaries and use pandas on it. It doesn&#39;t have to be from large files of data . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 3 382190 30289 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 day4 382190 30289 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) # this makes a lot easier to analyze spreadsheets and large files of data . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() # obtaining and analyzing data from API can also be very useful . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . NBA Data (My hacks) . I wanted to find out if home teams tend to shoot better than away teams in the NBA. I am going to find this by calculating the difference in means between home team fg% and away team fg%I found an NBA dataset on Kaggle and downloaded a CSV file with records and stats from over 62,000 NBA games. Below is basically a glimpse of the extensiveness of the dataset I&#39;m using: . import pandas as pd stats = pd.read_csv(&quot;files/game.csv&quot;) # displaying all of the data print(&quot;Whole database&quot;) print(&quot;--&quot;) stats . Whole database -- . season_id team_id_home team_abbreviation_home team_name_home game_id game_date matchup_home wl_home min fgm_home ... dreb_away reb_away ast_away stl_away blk_away tov_away pf_away pts_away plus_minus_away video_available_away . 0 21946 | 1610610035 | HUS | Toronto Huskies | 24600001 | 1946-11-01 00:00:00 | HUS vs. NYK | L | 0 | 25.0 | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 68 | 2 | 0 | . 1 21946 | 1610610034 | BOM | St. Louis Bombers | 24600003 | 1946-11-02 00:00:00 | BOM vs. PIT | W | 0 | 20.0 | ... | NaN | NaN | NaN | NaN | NaN | NaN | 25.0 | 51 | -5 | 0 | . 2 21946 | 1610610032 | PRO | Providence Steamrollers | 24600002 | 1946-11-02 00:00:00 | PRO vs. BOS | W | 0 | 21.0 | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 53 | -6 | 0 | . 3 21946 | 1610610025 | CHS | Chicago Stags | 24600004 | 1946-11-02 00:00:00 | CHS vs. NYK | W | 0 | 21.0 | ... | NaN | NaN | NaN | NaN | NaN | NaN | 22.0 | 47 | -16 | 0 | . 4 21946 | 1610610028 | DEF | Detroit Falcons | 24600005 | 1946-11-02 00:00:00 | DEF vs. WAS | L | 0 | 10.0 | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 50 | 17 | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 62327 22022 | 1610612750 | MIN | Minnesota Timberwolves | 22200980 | 2023-03-07 00:00:00 | MIN vs. PHI | L | 240 | 34.0 | ... | 46.0 | 54.0 | 21.0 | 8.0 | 6.0 | 16.0 | 17.0 | 117 | 23 | 1 | . 62328 22022 | 1610612752 | NYK | New York Knicks | 22200979 | 2023-03-07 00:00:00 | NYK vs. CHA | L | 240 | 38.0 | ... | 32.0 | 42.0 | 27.0 | 2.0 | 5.0 | 12.0 | 20.0 | 112 | 7 | 1 | . 62329 22022 | 1610612745 | HOU | Houston Rockets | 22200981 | 2023-03-07 00:00:00 | HOU vs. BKN | L | 240 | 36.0 | ... | 31.0 | 36.0 | 23.0 | 12.0 | 7.0 | 12.0 | 21.0 | 118 | 22 | 1 | . 62330 22022 | 1610612742 | DAL | Dallas Mavericks | 22200983 | 2023-03-07 00:00:00 | DAL vs. UTA | W | 240 | 42.0 | ... | 41.0 | 47.0 | 23.0 | 10.0 | 4.0 | 16.0 | 23.0 | 116 | -4 | 1 | . 62331 22022 | 1610612747 | LAL | Los Angeles Lakers | 22200984 | 2023-03-07 00:00:00 | LAL vs. MEM | W | 240 | 41.0 | ... | 39.0 | 45.0 | 18.0 | 6.0 | 6.0 | 7.0 | 25.0 | 103 | -9 | 1 | . 62332 rows × 54 columns . However, this dataset contains a lot more data than what I need to test my hypotheses. Below is the data set limited to just the home and away field goal percentages, the data I plan on using. . print(&quot;Home and Away FG%&quot;) print(&quot;--&quot;) stats[[&quot;fg_pct_home&quot;, &quot;fg_pct_away&quot;]] . Home and Away FG% -- . fg_pct_home fg_pct_away . 0 NaN | NaN | . 1 0.339 | 0.222 | . 2 NaN | NaN | . 3 NaN | NaN | . 4 NaN | NaN | . ... ... | ... | . 62327 0.395 | 0.494 | . 62328 0.427 | 0.494 | . 62329 0.434 | 0.494 | . 62330 0.472 | 0.446 | . 62331 0.456 | 0.387 | . 62332 rows × 2 columns . Calculating the means . There is no way I am going to calculate the means of both of those on my own. Luckily, through some more research, I discovered that you can calculate the means of columns using pandas. Below is how I calculated the means of both the all time mean home and away FG percentages and the difference between both of them. . mean_fg_pct_home = stats[&quot;fg_pct_home&quot;].mean() mean_fg_pct_away = stats[&quot;fg_pct_away&quot;].mean() # calculate difference of means difference = mean_fg_pct_home - mean_fg_pct_away print(&quot;Mean Home Team FG%:&quot;, mean_fg_pct_home) print(&quot;Mean Away Team FG%:&quot;, mean_fg_pct_away) print(&quot;The difference of means between home fg% and away fg% is&quot;, difference) . Mean Home Team FG%: 0.467646980711659 Mean Away Team FG%: 0.4551832871964527 The difference of means between home fg% and away fg% is 0.01246369351520632 . Conclusion . Out of all of the NBA games ever played, the home team on average had a field goal percentage that was about 1.2% higher than the away team. . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning Visit Tutorials Point . Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. . Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . | Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. . Decision Trees, prediction by a piecewise constant approximation. | Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7705882352941177 LogisticRegression Accuracy: 0.788235294117647 . /Users/johnmortensen/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Happy Face&quot;, &#39;file&#39;: &quot;smileyface.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . - *Base 64 is similar to binary and hexadecimal as it is just another counting system. Binary is technically base 2, and hexadecimal is base 16, but we like to call them by different names. Something different about base 64 is that it uses a lot more characters than binary or hexadecimal.* . Translate first 3 letters of your name to Base64. Tre=VHJI | . | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? Watching videos, especially when I don&#39;t have the best connection. It may end up taking a long time to start playing the video, and when it does play it won&#39;t be the best quality | . | From your consumer experience, what effects have you experienced from buffering? It can be annoying when things take a while to load, but it is also better than having nothing at all. | . | How do these effects apply to images? Images may not always show up right away when you load a site, especially if they are coming from a larger file. | . | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? Yes, there is a lot of steps that are going into the code. | . | Describe Grey Scale algorithm in English or Pseudo code? The Grey Scale algorithm is taking the average of all the reds, greens, and blues in the image and then applying it to the image. Since these are the three primary colors in the image, averaging each of them will make a grey color. | . | Describe scale image? What is before and after on pixels in three images? Scaling is resizing an image and making it larger or smaller | . | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np from PIL import ImageEnhance # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def blur_image(im): enh = ImageEnhance.Sharpness(im) enh.enhance(0.5).show(&quot;blurred image&quot;) # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((pixel[0], 0, pixel[0], pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append(((pixel[0], 0, pixel[0]))) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; blue image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . blue image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . blue image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . blue image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np from PIL import ImageEnhance class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() self.blur_image() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # attempting to blur images def blur_image(im): enh = ImageEnhance.Sharpness(im) enh.enhance(0.5).show(&quot;blurred image&quot;) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;smileyface.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print(&quot;-- blurred image --&quot;) display(HTML(ido.blur_image)) print() . AttributeError Traceback (most recent call last) /Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb Cell 10 in &lt;cell line: 136&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=134&#39;&gt;135&lt;/a&gt; # Jupyter Notebook Visualization of Images &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=135&#39;&gt;136&lt;/a&gt; if __name__ == &#34;__main__&#34;: --&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=136&#39;&gt;137&lt;/a&gt; for ido in image_objects(): # ido is an Imaged Data Object &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=138&#39;&gt;139&lt;/a&gt; print(&#34;- meta data --&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=139&#39;&gt;140&lt;/a&gt; print(ido.label) /Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb Cell 10 in image_objects() &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=125&#39;&gt;126&lt;/a&gt; path, images = image_data() &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=126&#39;&gt;127&lt;/a&gt; for image in images: --&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=127&#39;&gt;128&lt;/a&gt; id_Objects.append(Image_Data(source=image[&#39;source&#39;], &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=128&#39;&gt;129&lt;/a&gt; label=image[&#39;label&#39;], &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=129&#39;&gt;130&lt;/a&gt; file=image[&#39;file&#39;], &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=130&#39;&gt;131&lt;/a&gt; path=path, &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=131&#39;&gt;132&lt;/a&gt; )) &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=132&#39;&gt;133&lt;/a&gt; return id_Objects /Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb Cell 10 in Image_Data.__init__(self, source, label, file, path, baseWidth) &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=24&#39;&gt;25&lt;/a&gt; self._html = self.image_to_html(self._img) &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; self._html_grey = self.image_to_html_grey() &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2023-03-07-AP-unit2-2.ipynb#X12sZmlsZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; self.blur_image() AttributeError: &#39;Image_Data&#39; object has no attribute &#39;blur_image&#39; . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "MCQ Test 3 Corrections",
            "content": "Score . . Questions Answered Incorrectly . Question 7 . . This question was in reference to a call management system and comparing new and upgraded systems. I said both I and III were needed by the upgraded system, but only I was needed, because even though the upgraded system did collect the customer’s phone number, it was not needed to direct a call to the appropriate destination. . Question 43 . . This was a silly mistake, I got str1 and str2 mixed up. I didn’t realize that str2 went into proc1, which resulted in the “to you happy” rather than “birthday happy”. . Question 50 . . I got one right and one wrong, as algorithm D is more efficient than algorithm B. I don’t know exactly what went through my head here and what exactly went wrong. I think I just got them mixed up. . Reflection . I did end up having to look up and research some questions regarding internet security as I did not know or study a lot in that topic. It doesn’t seem too hard though and I was able to get questions right based on the small amount of knowledge I had on it. . The rest of the questions, for the most part I remember from previous lessons and discussions, and was able to find the correct answer if I read and considered what the question was asking. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2023/03/06/mcq3.html",
            "relUrl": "/markdown/2023/03/06/mcq3.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Guides for Review",
            "content": "Watch the Video . The functionality of my part of the project can be seen in the video and you can understand the feature I worked on for our project. . View CPT Write Up . This is the part that shows my College Board requirements for the project so you can see the code for my feature as well as explanations for it, so you can understand how I was able to complete my part of the project. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2023/02/28/guide.html",
            "relUrl": "/markdown/2023/02/28/guide.html",
            "date": " • Feb 28, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Create Performance Task Write Up",
            "content": "3.a. . 3.a.i. . The purpose of this program is to help users decide which cars they should rent from our fictional rental car business. . 3.a.ii. . The video demonstrates the inputting answers to the questions which it is being asked. Based on what the user chooses to answer, the program will choose which response to return to the user. As the video shows, if the user chooses to put in different answers, then the response will change. . 3.a.iii. . The inputs of the program are the HTML radio buttons which the user selects for each question, as well as the button to submit their answers, prompting the program to run. . 3.b. . 3.b.i. . . 3.b.ii. . . 3.b.iii. . The variable userAnswers is used to represent the answers which the user selected, as it gets all of the elements under the class name “answer” (each of the radio buttons are assigned to the class of “answer”). There are four more variables which are used to represent these answers: a1score, a2score, a3score, and a4score. . 3.b.iv. . Each question has 4 possible answers, all of which are assigned a value of “a1”, “a2”, a3”, or “a4”. These values correlate with the desired luxury of car based on what the answer is, with a1 being the lowest luxury, and a4 being the highest. The number of each value selected is calculated and assigned the variables of a1score, a2score, a3score, and a4score. Depending on which of the “scores” is highest, the program will select a response which recommends cars based on the amount of luxury it is assumed the user desires, based on what they answered. . 3.b.v. . Without using the data collected in a1score, a2score, a3score, and a4score, the code would be nearly impossible to make, as there would be no other easy way to represent the user’s answers and calculate them. . 3.c. . 3.c.i. . . 3.c.ii. . . 3.c.iii. . The procedure calculateAnswers calculates the “score” for each of the values of “a1”, “a2”, “a3”, and “a4”. This contributes to the overall functionality of the program because these scores are later used to determine which cars the user should consider renting. . 3.c.iv. . This procedure first defines the variables of “a1score”, “a2score”, “a3score”, and “a4score”, and sets them all equal to 0. It then uses the variable “userAnswers” to represent each of the possible answer choices the user could select. It then uses a for loop for the length of userAnswers. Within that for loop there is an if statement saying if userAnswer is checked, or the user selected it. Within that if statement, there is for more if statements, saying that if the value of the checked answer is a1, a2, a3, or a4, to add 1 to a1score, a2score, a3score, and a4score respectively. It then returns the values of a1score, a2score, a3score, and a4score. . 3.d. . 3.d.i. . First call: The first is to assign the calculated answers to a variable called “answers”, and each of the variables of a1score, a2score, a3score, a4score can be redefined . Second call: Function is called again in the calculation for the max score . 3.d.iii. . Condition(s) tested by first call: The conditions are to allow the variables a1score, a2score, a3score, and a4score to be used later on . Condition(s) tested by second call: The conditions are to find which one is the max of the calculated answers . 3.d.iv. . Results of the first call: a1score, a2score, a3score, and a4score are now assigned outside of the procedure and can be used later on . Results of the second call: Highest score is determined. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2023/02/27/cpt.html",
            "relUrl": "/markdown/2023/02/27/cpt.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Night at the Museum",
            "content": "My Experience . . Both Photography and APCSP wanted me to go to Night at the Museum. Originally I was kind of reluctant to go but I ended up having a great time with a lot of my friends there. I had really fun not only presenting my team’s work but looking at the work other students did as well. I also really liked the sort of atmosphere with the band playing outside and also all of the people there. There was a lot more people than what I was expecting. . Animation . . I walked through the animation section, not really knowing what to expect. I saw all this sort of digital art, which I found cool. I didn’t even know that this was a class offered at our school. I thought some of the student’s work I saw was really cool and I found it to be kind of interesting. . Ceramics . . I also walked around the ceramics room, and was impressed by some of the student’s creations, some of which happened to be from my friends. People say that class is easy but a lot of the pieces in there were actually very impressive and seemed pretty difficult to make. . Drawing and Painting . . This probably impressed me the most out of any of the stations. The student’s art was very impressive and far beyond what I could imagine myself doing. I have never been a great drawer or painter. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2023/02/23/natm2.html",
            "relUrl": "/markdown/2023/02/23/natm2.html",
            "date": " • Feb 23, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Project Blog",
            "content": "For the creative performance task, I will use my creation of the car survey and submit the work I did for that. . Code Plan . I will make sure that the code utilizes lists which I can show effective abstraction from. I think for this, I create a list of cars and show when they show up/are called as the answer. | I need to create a procedure which is called in the program. I think I will make one which has to do with the decision process for how cars are selected based on the answers which are chosen. | . Video . In the video, I will take the survey multiple times to show it recommending me different cars based on the answers which I choose. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2023/01/30/project.html",
            "relUrl": "/markdown/2023/01/30/project.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "MCQ Test 2 Review",
            "content": ". Missed Questions and Review . Question 14 . . I said that input A could either be true or false, but it must be true. I was a bit confused by the diagram and though it was saying that A could be true or false. . Question 28 . . This one you had to select multiple. I got one of the algorithms right, but not the other. This was the correct answer: . . Looking back, this algorithm makes complete sense at the answer, I think I overthought the amount of iterations and thought there were too many and the robot would move too far. . Question 30 . . This was another one where you had to select multiple, and again I only got one of them right. Here was the correct one which I did not choose: . . This one makes sense as the center of the circle starts at (4,2), not (4,1), and the radius starts at 1, not 0 . Question 41 . . I said RANDOM (1,10)=2, but it is actually RANDOM (1, 10)≤2, because there is a 20 percent chance it lands on 1 or 2, not just 2. . Question 44 . This question was asking about a bank using a simulation for different waiting methods. I said the bank wouldn’t consider other alternatives, as I thought other methods weren’t being tested, but it was that they did not have actual results from real customer data. . Question 45 . This was asking when it would be acceptable to use a heuristic approach to solve a problem. I wasn’t quite sure what heuristic meant, so I looked it up and it was using trial and error and using loosely defined rules. I decided between two answers, both of which had when an approximate solution was acceptable, but I ended up choosing it can be solved in a reasonable amount of time instead of unreasonable amount of time. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2023/01/30/mcq2.html",
            "relUrl": "/markdown/2023/01/30/mcq2.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Unit 5 Hacks",
            "content": "Beneficial and Harmful Effects of Computing . Benefit/Harm 1 . Benefit: Easy access to information, very easy to find research on topics which you are interested in | Harm: Lots of misinformation and conflicting information, making it hard to know whats actually true | . Benefit/Harm 2 . Benefit: Easy to discuss topics with people who have similar views as you | Harm: Political discussions on the internet can lead to extremism and radicalization, as people get stuck in echo chambers where their opinions are reinforced gradually more extreme. | . Benefit/Harm 3 . Benefit: Internet provides easy entertainment option to pass time and communicate with others | Harm: Very addictive, and people may end up being more focused on the internet then in the real world. | . Dopamine Issues . As far as dopamine issues go, I think part of it is real but it is being exaggerated by parents. I think a lot of it depends on the person. Some people may be spending too much time on the internet to the point where it is unhealthy and they aren’t getting any stimulation from anywhere else. However, I feel like the majority of people, while they may still have some dependence and addiction from the internet, still understand the importance of real life social experiences. . Beneficial Effect of My Project . Can help people find the right car to use | Can help myself understand better how websites work | Can help understand the necessary components of an effective website for a business | Harmful Effect of My Project . Giving full freedom with reservation service can allow people to mess with it and misuse it as they can write whatever they want and it will show up. | Pros/Cons of Internet Blockers at School . Pros: Reduces distractions for kids at school | Blocks out material which may not be appropriate for school | . | Cons: Sometimes blocks out websites which are necessary for class (AWS) | Kids can pretty easily find ways around blockers if they are motivated | . | . Digital Divide . As far as concerns go, I think a big one is that it furthermore increases the cost of living and basic necessities. Now, in order to be a successful, you need to be able to afford a phone and computer to have any sort of outreach. This makes it even harder for poor people to catch up as they now need to think about several things and may be at a disadvantage if their phones are older and of less quality. . 5.3 Hacks . I think people don’t always realize the control these sites have over groups of people. They can choose to push certain information and ideas over people. I think people should start to realize when they go down certain rabbit holes and take the information they are presented with a grain of salt as it may start to get more and more biased. We should also take other peoples opinions in mind when developing programs so that we can write them in a way that works for a lot of people, not just me. . 5.4 Hacks . A crowdsourcing idea for the compsci department would include a website which talks about how to succeed in computer science which a group of students have access to work on. | During finals week, we could capture data regarding best study methods and what kids like to do to prepare for their finals | . 5.5 Hacks . Creative Commons Zero v1.0 Universal . Effectively waives all copyright and allows anyone to use your work how you want . Open Source MIT License . Allows people to do what they want, but they have to credit the author . Open Source GPL License . Cannot distribute closed source versions . I think these copyright laws are important, because people should be able to have a say in how their work is to be used. If these laws are not put into place, people may not earn the credit that their work is worth. . | For my fastpages, I chose the Creative Commons Zero license as I did not care how people used the information on there. Fastpages License . For the project frontend, I chose the MIT License since the work on their was more valuable and was an actual project we did so people should give us credit Project License | For the project backend, I want to use the MIT License as well as that is part of the project we feel we deserve credit for. | . | 5.6 Hacks . Some of our projects, like our fastpages, has some information about us which is accessible to the public. Our github accounts are also examples of PII similar to social media where people can see the types of projects we have worked on as well as the code we have written. | I don’t really have strong feelings on it, but it is something we should all keep in mind, as we should think before posting things on social media as it will add to our public image. We should remember that things like colleges and employers may look at it to see if this is the type of person they want in their space, so we should not post anything to make them believe the opposite. | Good passwords are generally long and use different types of characters, like capital letters, numbers, symbols, etc. Someone would not be able to guess the password. A bad password would be something like your birthday, for example, as someone could easily find that out and guess that as your password. Also using the same password for everything could be dangerous, as if it is found for one thing, somebody all of a sudden has access to all of your important personal information. | Symmetric encryption is more efficient and easier, while asymmetric encryption is more secure, but also uses more resources. | We used Certbot encryption in AWS deployment | I have gotten text messages saying things like I need to fix something in my Netflix account. I have never fallen for these, but I could totally see someone who is not as familiar with the internet falling for these type of things. |",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2023/01/24/effects.html",
            "relUrl": "/markdown/2023/01/24/effects.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "CollegeBoard Performance Task Grading 3",
            "content": "Submission 1 . |Reporting Category|Student Score|College Board Score|Comments| |—|—|—|—| |Program Purpose and Function|0|1|Purpose of the program should be more specific and in depth. The functionality and input/output is good though.| |Data Abstraction|0|0|Data is abstracted for to assist the program, but the list shown is a one-element list.| |Managing Complexity|0|0|Does not show the list being called in the second code segment to manage complexity.| |Procedural Abstraction|1|0|The procedure listed is not necessary and is not called under certain circumstances. Just called by itself after being written making it meaningless| |Algorithm Implementation|0|1|The procedure does not use iteration and is not explained in enough detail.| |Testing|1|1|Shows conditions tested and the results from each call.| . Submission 2 . |Reporting Category|Student Score|College Board Score|Comments| |—|—|—|—| |Program Purpose and Function|1|1|Program purpose, functionality, and input/output is described and explanations are thorough.| |Data Abstraction|1|1|Data collection shown is vital to program and makes it much more efficient. Explained in detail.| |Managing Complexity|1|1|The lists involved manage complexity, and student explains in detail how the code is used to manage complexity.| |Procedural Abstraction|1|1|The procedure is complicated and is called later in the code, making the code a lot less complicated and it makes more sense.| |Algorithm Implementation|1|1|Algorithm uses sequencing, selection, and iteration and is used in very thorough detail.| |Testing|1|1|Shows conditions tested as well as the results of each call.| . Submission 3 . |Reporting Category|Student Score|College Board Score|Comments| |—|—|—|—| |Program Purpose and Function|1|1|Program purpose, functionality, and input/output are accurate and described in detail.| |Data Abstraction|1|0|Student identifies the list and how it is contributing to the functionality of the program.| |Managing Complexity|1|0|Explained in thorough detail how the code would be much more complicated and long without the use of the list.| |Procedural Abstraction|0|0|Procedure does not have any explicit parameters both when it is listed and called.| |Algorithm Implementation|0|0|Algorithm is not sufficiently explained in enough detail to the point where it could be recreated.| |Testing|1|0|Shows conditions being tested and the results yielded from each call.| . Submission 4 . |Reporting Category|Student Score|College Board Score|Comments| |—|—|—|—| |Program Purpose and Function|1|1|Program purpose, functionality, and user input/output explained in detail.| |Data Abstraction|1|1|The list is multi element and is being used to fulfill the purpose of the program.| |Managing Complexity|1||1The segments of code make the code much less complicated and student effectively explains the necessity of the list.| |Procedural Abstraction|1|1|Procedure has multiple parameters and is essential to the functionality of the program.| |Algorithm Implementation|0|1|Not explained in enough detail that it could be recreated by somebody else reading the explanation.| |Testing|1|0|Shows conditions being tested and the results from each call.| . Takeaways . It can be hard to tell what fits the criteria and what doesn’t. When making my program I should make sure it clearly follows the criteria and not risking losing the point. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/collegeboard/2023/01/18/cb3.html",
            "relUrl": "/markdown/collegeboard/2023/01/18/cb3.html",
            "date": " • Jan 18, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "CollegeBoard Performance Task 2",
            "content": "Submission 1 . |Reporting Category|Student Score|College Board Score|Comments| |—|—|—|—| |Program Purpose and Function|0|0|Written responses are a bit vague and do not demonstrate strong understanding of the program purpose, functionality, and is not specific with the input and output.| |Data Abstraction|0|0|Shows to different lists and does not show how the data within the list is being used in the program. It just shows two different lists which are being used in the program| |Managing Complexity|0|0|Does not show how the lists are being used to manage complexity in the program. No code is shown which actually implements one of the lists.| |Procedural Abstraction|0|0|There is a procedure shown which is pretty complicated and it does show it being called. The main problem is that the student does not describe the procedure very well and does not effectively show how it contributes to the functionality of the program.| |Algorithm Implementation|0|0|The algorithm uses sequencing, selection, and iteration, but is not described in enough detail to where someone else could recreate it.| |Testing|1|1|Describes conditions which are being tested and identifies results.| . Submission 2 . |Reporting Category|Student Score|College Board Score|Comments| |—|—|—|—| |Program Purpose and Function|1|1|Video and written response demonstrate understanding of the purpose, functionality, and input/outputs involved in the program. Answers very specific to the program and relate to the video.| |Data Abstraction|1|1|Shows the generation of the list and how it is implemented in the program. Also makes sure to point out that the list is referred to by a different name in the function to avoid confusion.| |Managing Complexity|1|1|The list involved definitely manages complexity, and makes the program a lot simpler than it would’ve been without the use of the particular list. Describes how the program manages complexity well.| |Procedural Abstraction|1|1|Shows a procedure used in the program and also shows where it is being called. The student does a great job describing how the specific procedure contributes to the program and its functionality.| |Algorithm Implementation|1|1|Algorithm uses the required elements of sequencing, selection, and iteration and it is explained where used.| |Testing|1|1|Calls and conditions tested are shown as well as the results which were yielded.| . Submission 3 . |Reporting Category|Student Score|College Board Score|Comments| |—|—|—|—| |Program Purpose and Function|1|0|Student effectively describes the purpose, functionality, and input/output of the program, and reflects what is shown in the video.| |Data Abstraction|0|1|The two segments of code aren’t directly connected and it does not show the data from the first segment being used in the second segment.| |Managing Complexity|1|1|Functions from both of the segment seem to be essential to program and definitely make the code less complicated. Explains thoroughly how the program manages complexity.| |Procedural Abstraction|1|1|Shows developed procedure (findWinner) and where in the program it gets called. Procedure has multiple parameters. Student effectively describes how program adds to functionality of the program.| |Algorithm Implementation|1|1|Algorithm uses sequencing, selection, and iteration, and it is explained in enough detail that someone could recreate it.| |Testing|1|1|Describes calls, conditions tested, and results of each call.| . Submission 4 . |Reporting Category|Student Score|College Board Score|Comments| |—|—|—|—| |Program Purpose and Function|1|1|Purpose is described (to test critical thinking skills) which is different than functionality. The functionality and user inputs and outputs are then described in sufficient detail.| |Data Abstraction|1|0|Shows how list (guesses) is developed and where it is called in the program. Provides explanation as well which describes the list and how it is used in the program.| |Managing Complexity|1|0|Provides explanation for how guesses is used in the program and how it is able to manage complexity| |Procedural Abstraction|1||1Shows the developed procedure (checkanswer) and when it was called. Also describes how it is able to contribute to the overall functionality of the program.| |Algorithm Implementation|1|1|Algorithm uses all three of sequencing, selection, and iteration, and is described in a lot of detail to the extent that someone can.| |Testing|1|0|Shows calls, conditions, and results.| . Takeaways . I did grade a little different than CB, especially in the last submission. I don’t always how nit-picky the collegeboard grading can be sometimes, and how many things they take into account. In my CBT, I will need to reflect on the mistakes some of these people made, and make sure to hit the marks they missed, especially in the written portion. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/collegeboard/2023/01/11/cb2.html",
            "relUrl": "/markdown/collegeboard/2023/01/11/cb2.html",
            "date": " • Jan 11, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password, age, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self.set_age(age) self.set_classOf(classOf) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters @property def age(self): return self._age @age.setter def age(self): return self._age == age def set_classOf(self, age): self._classOf = born.year + 18 # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$nTQ...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$JPM...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$iHV...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$US0...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$2cC...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$nTQ...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$JPM...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$2I7...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$US0...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$2cC...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$nTQxZ9alViZd3WOn$34c90a641520c96e3d91ac148340b8b07d3c0958249dfcfe4a3eb05e2621efef&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$JPMovUtCRid1pCTE$089368f59621e8878ea730e5328bd9fc442f1d63f40d99f52502c059f9921281&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$2I7yhf1jQOPNu2YE$473f9f24b42cbbd52d6fd4effe03b73ba41ff31ea5532940480aadef56b3ce2d&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$US0fsfAaoQix8ido$5b6bac49c74a9fe08b18147a8d0f5c41d7805c42238a9d29dc2e8dbafff8324f&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$2cC6Hp5Z4WcmxpBK$df9ed2dbe43edee11d7dc5101057274b2c47be5db95d6610ab7e4fba2dbf6d17&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$nTQxZ9alViZd3WOn$34c90a641520c96e3d91ac148340b8b07d3c0958249dfcfe4a3eb05e2621efef&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$JPMovUtCRid1pCTE$089368f59621e8878ea730e5328bd9fc442f1d63f40d99f52502c059f9921281&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$2I7yhf1jQOPNu2YE$473f9f24b42cbbd52d6fd4effe03b73ba41ff31ea5532940480aadef56b3ce2d&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$US0fsfAaoQix8ido$5b6bac49c74a9fe08b18147a8d0f5c41d7805c42238a9d29dc2e8dbafff8324f&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$2cC6Hp5Z4WcmxpBK$df9ed2dbe43edee11d7dc5101057274b2c47be5db95d6610ab7e4fba2dbf6d17&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2004, 12, 31) age = calculate_age(dob) print(age) . 18 . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def classOf(self): return self._dob.year + 18 # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;classOf&quot; : self.classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) user1 = User(name=&#39;Trent Cardall&#39;, uid=&#39;trentcardall&#39;, password=&#39;cardall789&#39;, dob=date(2005, 3, 9)) user2 = User(name=&#39;Samarth Kalanke&#39;, uid=&#39;samarth&#39;, password=&#39;samk3&#39;, dob=date(2006, 10, 19)) user3 = User(name=&#39;Eli Gilmour&#39;, uid=&#39;EliGilmour&#39;, password=&#39;Elijah99&#39;, dob=date(2006, 8, 8)) user4 = User(name=&#39;Khalid Farah&#39;, uid=&#39;khalidfarahhh&#39;, password=&#39;farahharah&#39;, dob=date(2006, 7, 7)) def info(person): print(&quot; t&quot; + &quot;name: &quot; + person.name) print(&quot; t&quot; + &quot;id: &quot; + person.uid) print(&quot; t&quot; + &quot;password: &quot; + person._password) print(&quot; t&quot; + &quot;age: &quot; + str(person.age)) print(&quot; t&quot; + &quot;Class of &quot; + str(person.classOf) + &quot; n&quot;) print(&quot;People Going on road trip to Columbus:&quot; + &quot; n&quot;) info(user1) info(user2) info(user3) info(user4) . JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: 1865} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$mtTlV27TdsXeyCyd$6127e01715716c6b3f5bf8ce87c25a9d3d8b816b08e1a898976c50e7b81c80d3&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$mtTlV27TdsXeyCyd$6127e01715716c6b3f5bf8ce87c25a9d3d8b816b08e1a898976c50e7b81c80d3,dob=1847-02-11) People Going on road trip to Columbus: name: Trent Cardall id: trentcardall password: sha256$WfTB52PsZoOopzcU$b689ec8a296e6bada19b8d3bc154a8f06437fb645e275c2802ec50cbd0752a1b age: 17 Class of 2023 name: Samarth Kalanke id: samarth password: sha256$QOjZLzBfbKHqbzVw$f02d9811c5c70d219e19c27a8e0ead6c901f4131d9edaa8e661ae9d74dcb1fbe age: 16 Class of 2024 name: Eli Gilmour id: EliGilmour password: sha256$v4BsDIaOUw7H6fEo$705b540cfbb55f031484f5c5463c5e9d131f974551ee6e699d0947929b17d381 age: 16 Class of 2024 name: Khalid Farah id: khalidfarahhh password: sha256$n104nMpRYz59vt7C$fd9084d093db36304b3efedde8de6de32c5fe4ff6933edebe00bcbc325960582 age: 16 Class of 2024 .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "CollegeBoard Performance Task",
            "content": "Submission 1 . |Reporting Category|Student Score|College Board Score|Comments| |—|—|—|—| |Program Purpose and Function|1|0|I gave this student a point because video demonstrated inputting the side lengths of the triangle and it showed output and functionality with the return of the trigonometric values. The written section also specifically described the purpose, functionality, and input/output of the video| |Data Abstraction|1|1|The student earned a point in this row because the written section showed one code segment of a list with multiple elements and the second showed those elements being used in the program. It also identified variable names and described its purpose in the program| |Managing Complexity|0|0|The list the student mentioned does not actually manage complexity in the program and does not really make a difference in the work which has to be done.| |Procedural Abstraction|1|1|The procedure uses multiple parameters, is called later in the program, and has functionality essential to the program.| |Algorithm Implementation|1|1|Explained the procedure in a lot of detail and how it works and it uses sequencing, selection, and iteration| |Testing|1|1|Describes the conditions tested by each call and shows results| . Submission 2 . |Reporting Category|Student Score|College Board Score|Comments| |—|—|—|—| |Program Purpose and Function|1|1|Video and written response clearly showed input and output as well of the functionality of the program. Video clearly demonstrates the full functionality of program| |Data Abstraction|1|1|Explains what lists were used in program and how they are implemented as well as their functionality in the program| |Managing Complexity|1|1|Creates a long procedure which is recalled many times. Defining this segment of code clearly saved the student a lot of time and simplified the code a lot.| |Procedural Abstraction|1|1|Procedure is recalled multiple times and uses multiple parameters| |Algorithm Implementation|1|1|Algorithm uses sequencing, selection, and iteration and explains how it works| |Testing|1|1|Describes the testing of each call| . Takeaways . The main thing I noticed is that you need everything just to get one point. Doing almost everything in one category is rewarded the same as doing nothing in said category. I need to make sure when I do the performance task that I hit all the points listed in the rubric if I want to get a good grade .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/collegeboard/2023/01/04/cbperformance.html",
            "relUrl": "/markdown/collegeboard/2023/01/04/cbperformance.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "Title",
            "content": "function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else if(counter === array.length-1){ if (a[array.length-1] &gt;= a[array.length-2]){ peak = a[array.length-1] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . function peak_finder(array){ // Check if the first element is a peak if (array[0] &gt;= array[1]){ return `The 0 indexed number, ${array[0]} is a peak`; } // Check if the last element is a peak if (array[array.length - 1] &gt;= array[array.length - 2]){ return `The ${array.length - 1} indexed number, ${array[array.length - 1]} is a peak`; } // Check the remaining elements for peaks for (let i = 1; i &lt; array.length - 1; i++){ if (array[i] &gt;= array[i - 1] &amp;&amp; array[i] &gt;= array[i + 1]){ return `The ${i} indexed number, ${array[i]} is a peak`; } } // If no peak is found, return null return null; } . def permute(data): if len(data) == 0: yield [] else: for i in range(len(data)): for permutation in permute(data[:i] + data[i+1:]): yield [data[i]] + permutation data = [1, 2, 3] for permutation in permute(data): print(permutation) . [1, 2, 3] [1, 3, 2] [2, 1, 3] [2, 3, 1] [3, 1, 2] [3, 2, 1] .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2022/12/15/hghg.html",
            "relUrl": "/2022/12/15/hghg.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "3.17-18",
            "content": "Notes and Takeaways . Sometimes algorithms can be written ways that are more efficient saving time and lines of code | Algorithms can be divided into 4 types 1 step | 2 step | 3 step | 4 step | . | First step is integer being multiplied by a variable “n”. | Two step is integer to the power of n | Three step is integer being multiplied by n, all to the power of 2 | Four step is variable factorial (!) | Linear and square runs in reasonable amount of time, while exponential and factorial run in unreasonable amounts of time | Reasonable time: n^2 | 2n | n | n^10 | n^20 | log(n) | . | Unreasonable time: 2^n | 10^n | 5^n | . | Decidable problems: Problems where algorithms can be written and solved for the correct output | Undecidable problems: No algorithms can be built for a correct yes or no answer | Don’t necessarily need to be able to tell if problem is undecidable for now, just need to know that they exist. | . Hacks . Hack 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . A decidable problem has a solution. Algorithms can be written and solved for a correct output. Undecidable problems, however, are like paradoxes that don’t have a solution which makes sense. . Decidable problem: . x = 1 if x == 1: print(&quot;x is equal to 1&quot;) else: print(&quot;x is not equal 1&quot;) . This problem is decidable because it can produce a correct output every time. . Undecidable problem: . x = 1 i = 2 while i &gt; x: print(i) i += 1 . This problem is undecidable because if you were to run it the loop would continue counting up forever and a correct output could never be generated . Hack 2 . Which of the following is a 3 step algorithm? . A. 2 x 6 x 8 . B. 4^5 . C. (3 x 8)^2 . D. None of the above . E. All of the above . I chose C because it is two integers being multiplied all to the power of 2 which is what a 3 step algorithm is. A is one step (i think) and B is two step. . Hack 3 . Rewrite this JavaScript Code in a More Efficient Way (Hint: Use Binary Search) . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else if(counter === array.length-1){ if (a[array.length-1] &gt;= a[array.length-2]){ peak = a[array.length-1] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . I’m not gonna lie I don’t understand a single thing this code was supposed to do and I’ve been staring at it for like 30 minutes, so I just decided to look at the answer: . function peak_finder2(array){ if (array.length)=== 0{ return `Array cannot be empty` }else if (array.length === 1){ return array[0] }else{ let mid_index = Math.floor(array.length*0.5) if (array[mid_index +1]&gt;array[mid_index]){ return peak_finding(array.slice(mid_index + 1 )) }else if (array[mid_index -1]&gt;array[mid_index]){ new=array.reverse().slice(mid_index+1).reverse() return peak_finding(new) }else{ return array[mid_index] } } } . I still don’t understand much but it seems to be a lot shorter and has a lot less variables making it more efficient while still performing the same function. . Hack 4 . Rewrite this Python Code in a More Efficient Way: . def merge_sort(data): if len(data) &lt;= 1: return mid = len(data) // 2 left_data = data[:mid] right_data = data[mid:] merge_sort(left_data) merge_sort(right_data) left_index = 0 right_index = 0 data_index = 0 while left_index &lt; len(left_data) and right_index &lt; len(right_data): if left_data[left_index] &lt; right_data[right_index]: data[data_index] = left_data[left_index] left_index += 1 else: data[data_index] = right_data[right_index] right_index += 1 data_index += 1 if left_index &lt; len(left_data): del data[data_index:] data += left_data[left_index:] elif right_index &lt; len(right_data): del data[data_index:] data += right_data[right_index:] if __name__ == &#39;__main__&#39;: data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] merge_sort(data) print(data) . Since the data is short it doesn’t make any difference to just use the default python sorting function, instead having to write out the huge sorting algorithm . data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] data.sort() print(data) . Hack 5 . Rewrite this Python Code in a More Efficient Way . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [1, 2, 3] heap_permutation(data, len(data)) . I wrote a simpler permutation algorithm . def permute(data): if len(data) == 0: yield [] else: for i in range(len(data)): for permutation in permute(data[:i] + data[i+1:]): yield [data[i]] + permutation data = [1, 2, 3] for permutation in permute(data) print(permutation) .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/hacks/2022/12/14/3.17-18.html",
            "relUrl": "/markdown/hacks/2022/12/14/3.17-18.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "3.16",
            "content": "Notes and Takeaways . Simulations model real world situations | Often model complicated situations but remove some of the factors that makes it more complicated | We do not need to know how to make one because it’s very hard but we do need to know: Certain details in simulations are removed as it would make it really complicated for little effect | For example, a dice roll is not truly random. There are lots of factors like the angle it is rolled at which effects the roll. However, it is not realistic to simulate this so it is better to use a random number generator which technically is not the same but in reality has the same effect | . | Simulation example: Utilizes procedure and iterations | Flowcharts | Uses all of our main ideas to make the simulation possible | . | Simulations used to make predictions of what could happen in certain situations so people can test different methods | Although they are not perfect, they are accurate enough to give companies/people an idea of what kind of solutions/methods work best | . Hacks . |Questions|Answers| |—|—| |Name(first+last)|Trent Cardall| |1|n/a| |2|n/a| |3|A. The random number generator does not take into account the imperfections of the real world, but is accurate enough to simulate results and saves a lot of time and effort| |4|B. Other aircraft would be vital for an air traffic simulation whereas weather and imperfections on aircraft are much more complicated factors which may not be taken into account| |5|C. Situation considered is usually the same for both experiments and simulations, while experiment will usually consider more factors and implement more resources and time| |6|B. Experiment, because this will probably need very precise and important calculations which will be more accurate with an experiment| |7|A. Simulation, it wouldn’t make sense to actually start putting more greenhouse gasses into the environment if that is what they are trying to get rid of| |8|n/a| |9|B. Experiment/calculation, the scores are already there so the teacher can just calculate them| |10|n/a| .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/hacks/2022/12/13/3.16.html",
            "relUrl": "/markdown/hacks/2022/12/13/3.16.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "3.14-15 code cells",
            "content": "import random names = [&quot;Trent&quot;, &quot;Derek&quot;, &quot;Elijah&quot;, &quot;Carson&quot;, &quot;Gavin&quot;, &quot;Justin&quot;, &quot;Alex&quot;, &quot;Grant&quot;, &quot;Michael&quot;, &quot;Grayson&quot;, &quot;Aidan&quot;, &quot;Sean&quot;, &quot;Lester&quot;, &quot;Peter&quot;, &quot;Jack&quot;] i = 1 while i &lt;= 5: random_name=random.choice(names) print(random_name) i += 1 . Peter Michael Grayson Gavin Michael . import random player1 = random.randint(1, 6) + random.randint(1, 6) player2 = random.randint(1, 6) + random.randint(1, 6) print(&quot;Player 1 rolled a &quot; + str(player1) + &quot;!&quot;) print(&quot;Player 2 rolled a &quot; + str(player2) + &quot;!&quot;) if player1 &gt; player2: print(&quot;Player 1 wins!&quot;) if player1 &lt; player2: print(&quot;Player 2 wins!&quot;) if player1 == player2: print(&quot;Player 1 and Player 2 tied!&quot;) . Player 1 rolled a 7! Player 2 rolled a 9! Player 2 wins! . import random directions = [&quot;up&quot;, &quot;down&quot;, &quot;left&quot;, &quot;right&quot;] # squares will be numbered 1-25 on grid, which is how I will decide positions on grid initial_direction = random.choice(directions) initial_position = random.randint(1, 25) goal_position = random.randint(1, 25) print(&quot;Initial direction: &quot; + initial_direction) print(&quot;Initial position: &quot; + str(initial_position)) print(&quot;Goal position: &quot; + str(goal_position)) # obstacles print(&quot;Obstacle positions:&quot;) i = 1 while i &lt;= 12: obstacle = random.randint(1, 25) print(str(obstacle)) i += 1 # if an obstacle position contradicts with another position, just put one obstacle or whatever else # is supposed to go there . Initial direction: down Initial position: 11 Goal position: 21 Obstacle positions: 15 3 6 21 2 11 19 8 23 9 24 10 .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/hacks/2022/12/13/3.14-15cells.html",
            "relUrl": "/fastpages/jupyter/hacks/2022/12/13/3.14-15cells.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "3.14-15",
            "content": "Notes and Takeaways . Existing code segments can be derived from existing sources | Libraries can be used to simplify complex programs Libraries are collections of pre-written code or procedures that can be used to maximize efficiency | . | Documentation is explaining what the procedure/code does | random(a, b) returns a random integer between a and b random.choice will pick a random item from a list of strings | random.shuffle will shuffle a list | randint is random integer | randrange picks from a range of numbers which have a certain start value and multiple | . | Overall, utilizing libraries such as the random one can make it much easier to code and allow you do more things than you normally would with your code | . Reflection . I learned the importance of libraries and how to use them, specifically the random function, which you can do a lot more stuff with than I realized. I know there is a lot more libraries which have a lot more functions, and I plan on researching some of them so that I can do a lot more with my code while still keeping it relatively simple. . Multiple Choice . What does the random(a,b) function generate? . A. A random integer from a to be exclusive . B. A random integer from a to b inclusive. . C. A random word from variable a to variable b exclusive. . D. A random word from variable a to variable b inclusive. . | I chose B because it includes the integers listed and it is not in reference to variables. a and b are just place holders for integers you would put on the list . What is x, y, and z in random.randrange(x, y, z)? . A. x = start, y = stop, z = step . B. x = start, y = step, z = stop . C. x = stop, y = start, z = step . D. x = step, y = start, z = stop . | I chose A because x and y reference the start and stop of the range you want to pull from and z is the step, or the number you are adding by . Which of the following is NOT part of the random library? . A. random.item . B. random.random . C. random.shuffle . D. random.randint . | I chose A because all the other ones have particular functions. I initially got “random.item” confused with “random.choice”. I also initially thought it was random.random, but I found out that can find a random floating point . Short Answer Questions . What is the advantage of using libraries? It allows us to import code that as already written/developed and can make it a lot easier to code certain algorithms/procedures, as well as allowing us to a lot more with our code | . | Write a thorough documentation of the following code. | import random names_string = input(&quot;Give me everybody&#39;s names, seperated by a comma.&quot;) names = names_string.split(&quot;,&quot;) num_items = len(names) random_choice = random.randint(0, num_items - 1) person_who_will_pay = names[random_choice] print(f&quot;{person_who_will_pay} is going to buy the meal today!&quot;) . Documentation: This code builds a list of names based on the user input and then chooses a random name from the list to decide who is going to pay for the meal. . Coding Challenges . Jupyter notebooks aren’t working with fastpages so I’m just going to show screenshots of my code/outputs . Create a program to pick five random names from a list of at least 15 names | . Create a program to simulate a dice game where each player rolls two fair dice (6 sides); the player with the greater sum wins | . Extra Credit . I tried my best, but I wasn’t sure how to make it completely mutually exclusive so if an obstacle complicated with something else than I just got rid of that obstacle . . Here’s my illustration using the numbers generated from the code: .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/hacks/2022/12/12/3.14-15.html",
            "relUrl": "/markdown/hacks/2022/12/12/3.14-15.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "3.12-13",
            "content": "Overall Takeaways . Procedures: named group of programming instructions w/ parameters/return values Also known as function | . | Procedure is basically a group of steps which are assigned to accomplish a specific task Ask yourself: What are you trying to accomplish, how will I accomplish that | . | Since procedures are named, you can simply just write the name of said procedure to call back to those lines of code | . Prompt #1 (hackathon, I did this one for my group) . PROCEDURE reachGoal() . MOVE_FORWARD() | MOVE_FORWARD() | ROTATE_LEFT() | MOVE_FORWARD() | MOVE_FORWARD() | MOVE_FORWARD() | MOVE_FORWARD() | MOVE_FORWARD() | MOVE_FORWARD() | ROTATE_RIGHT() | MOVE_FORWARD() | MOVE_FORWARD() | MOVE_FORWARD() | . Hacks . 3.12 Part 1 . Problem 1: Total Time/Total Distance ​ . Highlight which of these is the best procedure for calculating and displaying average speed. PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } | PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } | PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } | . | . Problem 2: I think it’s true that nothing will be displayed as the procedure never tells anything to be displayed. If it said DISPLAY (myEmotion) then something would be displayed . Problem 3: Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . | totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . | totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) . | laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . | 3.12 Part 2: . a = 9*81 = 729 . | cost = 1.1*173 = 190 3/10 . | Celsius = 71*5/9 = 39 4/9 . | 3.13 . PROCEDURE replaceRB (toprbyardspg, currentrbyards, totalGames) | . currentrbyardspg ⟵ currentrbyards / totalGames | IF currentrbyardpg &gt; toprbyardspg toprbyardspg⟵currentrbyards | . | . | If we were to run this procedure with the numbers listed, toprbyardspg would become 105, as that is the currentrbyardspg . PROCEDURE reachGoal(): ROTATE_RIGHT() | MOVE_FORWARD() | ROTATE_LEFT() | MOVE_FORWARD() | MOVE_FORWARD() | ROTATE_RIGHT() | MOVE_FORWARD() | MOVE_FORWARD() | MOVE_FORWARD() | MOVE_FORWARD() | ROTATE_LEFT() | MOVE_FORWARD() | MOVE_FORWARD() | ROTATE_LEFT() | MOVE_FORWARD() | MOVE_FORWARD() | ROTATE_RIGHT() | MOVE_FORWARD() | ROTATE_LEFT() | MOVE_FORWARD() | MOVE_FORWARD() | . | b. PROCEDURE MyList is correct because “procedure” is capitalized but the name of it isn’t . | PROCEDURE reachGoal(): MOVE_FORWARD() | ROTATE_LEFT() | MOVE_FORWARD() | ROTATE_RIGHT() | MOVE_FORWARD() | MOVE_FORWARD() | MOVE_FORWARD() | MOVE_FORWARD() | MOVE_FORWARD() | ROTATE_LEFT() | MOVE_FORWARD() | MOVE_FORWARD() | . |",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/hacks/2022/12/08/3.11-12.html",
            "relUrl": "/markdown/hacks/2022/12/08/3.11-12.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Units 2 and 3 Vocabulary",
            "content": "Unit 2 . Bits: Amount of digits in binary (ex: 4 bits=0000) | Bytes: A group of binary bits (usually 8: 1 byte=00000000) | Hexadecimal: Base 16 counting system, includes numbers 0-9 and letters A-F 24-bit hexadecimal is used to code for colors in CSS/HTML | For example, the hex code for the background of my fastpages is #08002c | . | Nibble: 4 bits of binary, or half of a byte | Binary Numbers: Unsigned integer: often called “uints”, always non-negative (zero or positive) | Signed integer: can be positive, negative, or zero | Floating point: numerical values which can be represented by a fractional or decimal value (as opposed to integer, which cannot represent fractions) | . | Binary Data Abstractions: Boolean: binary variable having two possible outcomes “true” or “false” | ASCII: American Standard Code for Information Interchange, character encoding standard which represents characters in a consistent and standardized way across all computers | Unicode: Another encoding standard which focuses on special texts from different languages and special symbols | Color model based on the amount of red, green, and blue being added together | . | Data Compression: Lossy: unnecessary information is discarded | Lossless: original data can be perfectly reconstructed from compressed data | . | . Unit 3 . Variable: a named location in a computer’s memory that is used to store a value. The value stored in a variable can be changed, and the same variable can be used to store different values at different times. | Data types: the classification of data based on their type and the operations that can be performed on them. Common data types include integers, floating-point numbers, strings, and Booleans. | List: a collection of data items that are organized in a specific order. In Python, lists are represented using square brackets and can contain any data type, including other lists. | 2D list: list that contains other lists as its items. This allows for the creation of data structures that have more than one dimension, such as a grid or a table. | Dictionary: data structure that uses keys to map to values. In Python, dictionaries are represented using curly braces and can contain any data type. | Class: a template or blueprint for creating objects in object-oriented programming. Classes define the properties and behaviors of objects, and objects are instances of a class. | Algorithm is a step-by-step procedure for solving a problem or achieving a specific goal. Algorithms are used in many different fields, including computer science, mathematics, and engineering. | Sequence is a type of control structure in which a set of instructions are executed in a specific order. | Selection is a type of control structure in which a specific set of instructions are executed based on the evaluation of a condition. | Iteration is a type of control structure in which a set of instructions are repeated until a specific condition is met. | Expression: combination of variables, operators, and other elements that produces a value. In programming, expressions are often used in control structures to evaluate conditions. | Comparison operators: operators that are used to compare two values. In Python, the comparison operators include &lt; (less than), &gt; (greater than), == (equal to), and != (not equal to). | Boolean expressions: expressions that evaluate to either true or false. In programming, Boolean expressions are often used in control structures to determine which instructions to execute. | Selection statements: control structures that use Boolean expressions to evaluate conditions and decide which instructions to execute. In Python, the selection statement is the if statement. | Iteration statements: control structures that repeat a set of instructions until a specific condition is met. In Python, the iteration statements are the for and while loops. | Truth table: table that shows the possible combinations of inputs and outputs for a logical operation. Truth tables are often used to evaluate the behavior of Boolean expressions. | Characters: the basic building blocks of a string. In Python, characters are represented as single quotes (e.g. ‘a’) and can be any letter, number, or symbol. | Strings: collections of characters that are used to represent text. In Python, strings are represented as double quotes (e.g. “Hello”) or single quotes (e.g. ‘Hello’). | The length of a string is the number of characters it contains. In Python, the length of a string can be found using the len() function. | Concatenation: the process of joining two or more strings together to form a new string. In Python, concatenation is performed using the + operator. | The upper() and lower() methods are used to convert a string to all uppercase or all lowercase characters | Traversing a string: to access each character in the string one by one. In Python, this can be done using a for loop and the len() function to iterate over the characters in a string. | The if, elif, and else keywords are used in Python to create conditional statements. | If statement: used to evaluate a condition and execute a specific set of instructions if the condition is true. | Elif statement: used to evaluate additional conditions if the original if condition is false. | Else statement: is used to specify a default set of instructions to execute if all other conditions are false. | Nested selection statements: if statements that are placed inside of other if statements. This allows for the creation of complex conditional statements that can evaluate multiple conditions. | The for and while loops: used in Python to repeat a set of instructions multiple times. The for loop is used to iterate over a sequence of items, such as the elements of a list. The while loop is used to repeat a set of instructions as long as a specific condition is true. | Range() function: is used in Python to generate a sequence of numbers. This can be used in a for loop to specify the number of times to repeat the loop. | Break and continue keywords: used in Python to control the flow of a loop. The break keyword is used to exit a loop completely, while the continue keyword is used to skip the current iteration of the loop and continue with the next iteration. | Procedural abstraction: the process of separating the details of how a task is performed from the overall logic of the program. In Python, this is achieved using def procedures, which allow for the creation of reusable blocks of code that can be called from other parts of the program. | Parameters: variables that are used to pass information into a def procedure. When a procedure is called, the values of the parameters are specified and are used by the procedure to perform its tasks. | Return values: values that are returned by a def procedure after it has finished executing. Return values can be used by the calling code to access the results of the procedure’s operations. | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2022/12/07/vocab.html",
            "relUrl": "/markdown/2022/12/07/vocab.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Title",
            "content": "print(&quot;What did you roll on the dice?&quot;) diceRoll = int(input()) if diceRoll &gt;= 4: print(&quot;Nice roll!&quot;) else: if diceRoll &gt;= 2: print(&quot;Meh... You can do better&quot;) else: print(&quot;That was not a great roll!&quot;) . print(&quot;What did you roll on the dice?&quot;) diceRoll = int(input()) if diceRoll &gt;= 4: print(&quot;Nice roll!&quot;) if diceRoll &gt;= 2: print(&quot;Meh... You can do better&quot;) if diceRoll &lt; 2: print(&quot;That was not a great roll!&quot;) . print(&quot;What did you roll on the dice?&quot;) diceRoll = int(input()) if diceRoll &gt;= 4: print(&quot;Nice roll!&quot;) if diceRoll &gt;= 2 and diceRoll &lt; 4: print(&quot;Meh... You can do better&quot;) if diceRoll &lt; 2: print(&quot;That was not a great roll!&quot;) . list = [1, 2, 3, 4, 5] list.reverse() i = 0 while i &lt; len(list): print(list[i]) i += 1 . 5 4 3 2 1 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] for i in range(len(list)): for j in range(0, len(list) - i - 1): if list[j] &gt; list[j + 1]: temp = list[j] list[j]=list[j + 1] list [j + 1] = temp print(list) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . import random # Define the game board as a 2D array board = [[&quot; &quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;]] # Define the players players = [&quot;X&quot;, &quot;O&quot;] # Print the game board def print_board(): print(&quot; n&quot;) print(&quot; &quot;, board[0][0], &quot; | &quot;, board[0][1], &quot; | &quot;, board[0][2], &quot; &quot;) print(&quot;--&quot;) print(&quot; &quot;, board[1][0], &quot; | &quot;, board[1][1], &quot; | &quot;, board[1][2], &quot; &quot;) print(&quot;--&quot;) print(&quot; &quot;, board[2][0], &quot; | &quot;, board[2][1], &quot; | &quot;, board[2][2], &quot; &quot;) print(&quot; n&quot;) # Check if the game is over def check_game_over(): # Check if a player has won for player in players: if (board[0][0] == player and board[0][1] == player and board[0][2] == player) or (board[1][0] == player and board[1][1] == player and board[1][2] == player) or (board[2][0] == player and board[2][1] == player and board[2][2] == player) or (board[0][0] == player and board[1][0] == player and board[2][0] == player) or (board[0][1] == player and board[1][1] == player and board[2][1] == player) or (board[0][2] == player and board[1][2] == player and board[2][2] == player) or (board[0][0] == player and board[1][1] == player and board[2][2] == player) or (board[0][2] == player and board[1][1] == player and board[2][0] == player): print(player, &quot;wins! Congratulations!&quot;) return True # Check if the game is a tie if &quot; &quot; not in [cell for row in board for cell in row]: print(&quot;It&#39;s a tie!&quot;) return True # The game is not over return False # Start the game print(&quot;Welcome to the game of Tic-Tac-Toe!&quot;) while True: # Print the game board print_board() # Ask the player to make a move row = int(input(&quot;Enter the row (1, 2, or 3): &quot;)) - 1 col = int(input(&quot;Enter the column (1, 2, or 3): &quot;)) - 1 if board[row][col] == &quot; &quot;: board[row][col] = players[0] else: print(&quot;That square is already taken. Try again.&quot;) continue # Check if the game is over if check_game_over(): break # Let the computer make a move found_move = False . Welcome to the game of Tic-Tac-Toe! | | -- | | -- | | X | | -- | | -- | | X | | -- | X | -- | | X wins! Congratulations! . import random # Define the chars_list function def chars_list(word): return list(word) def scramble_word(word): # Convert the word to a list of characters chars = chars_list(word) # Use the shuffle method to randomly rearrange the characters random.shuffle(chars) # Return the scrambled word as a string return &#39;&#39;.join(chars) # Test the scramble_word function print(scramble_word(&quot;hello&quot;)) print(scramble_word(&quot;world&quot;)) . TypeError Traceback (most recent call last) /Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb Cell 7 in &lt;cell line: 18&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#W6sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; return &#39;&#39;.join(chars) &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#W6sZmlsZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; # Test the scramble_word function &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#W6sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; print(scramble_word(&#34;hello&#34;)) &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#W6sZmlsZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; print(scramble_word(&#34;world&#34;)) /Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb Cell 7 in scramble_word(word) &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#W6sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; def scramble_word(word): &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#W6sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; # Convert the word to a list of characters -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#W6sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; chars = chars_list(word) &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#W6sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; # Use the shuffle method to randomly rearrange the characters &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#W6sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; random.shuffle(chars) /Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb Cell 7 in chars_list(word) &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#W6sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; def chars_list(word): -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#W6sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; return list(word) TypeError: &#39;list&#39; object is not callable . x = 1 i = 2 while i &gt; x: print(i) i += 1 . 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 3156 3157 3158 3159 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 3225 3226 3227 3228 3229 3230 3231 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 3249 3250 3251 3252 3253 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299 3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 3342 3343 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 3393 3394 3395 3396 3397 3398 3399 3400 3401 3402 3403 3404 3405 3406 3407 3408 3409 3410 3411 3412 3413 3414 3415 3416 3417 3418 3419 3420 3421 3422 3423 3424 3425 3426 3427 3428 3429 3430 3431 3432 3433 3434 3435 3436 3437 3438 3439 3440 3441 3442 3443 3444 3445 3446 3447 3448 3449 3450 3451 3452 3453 3454 3455 3456 3457 3458 3459 3460 3461 3462 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 3475 3476 3477 3478 3479 3480 3481 3482 3483 3484 3485 3486 3487 3488 3489 3490 3491 3492 3493 3494 3495 3496 3497 3498 3499 3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 3510 3511 3512 3513 3514 3515 3516 3517 3518 3519 3520 3521 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 3533 3534 3535 3536 3537 3538 3539 3540 3541 3542 3543 3544 3545 3546 3547 3548 3549 3550 3551 3552 3553 3554 3555 3556 3557 3558 3559 3560 3561 3562 3563 3564 3565 3566 3567 3568 3569 3570 3571 3572 3573 3574 3575 3576 3577 3578 3579 3580 3581 3582 3583 3584 3585 3586 3587 3588 3589 3590 3591 3592 3593 3594 3595 3596 3597 3598 3599 3600 3601 3602 3603 3604 3605 3606 3607 3608 3609 3610 3611 3612 3613 3614 3615 3616 3617 3618 3619 3620 3621 3622 3623 3624 3625 3626 3627 3628 3629 3630 3631 3632 3633 3634 3635 3636 3637 3638 3639 3640 3641 3642 3643 3644 3645 3646 3647 3648 3649 3650 3651 3652 3653 3654 3655 3656 3657 3658 3659 3660 3661 3662 3663 3664 3665 3666 3667 3668 3669 3670 3671 3672 3673 3674 3675 3676 3677 3678 3679 3680 3681 3682 3683 3684 3685 3686 3687 3688 3689 3690 3691 3692 3693 3694 3695 3696 3697 3698 3699 3700 3701 3702 3703 3704 3705 3706 3707 3708 3709 3710 3711 3712 3713 3714 3715 3716 3717 3718 3719 3720 3721 3722 3723 3724 3725 3726 3727 3728 3729 3730 3731 3732 3733 3734 3735 3736 3737 3738 3739 3740 3741 3742 3743 3744 3745 3746 3747 3748 3749 3750 3751 3752 3753 3754 3755 3756 3757 3758 3759 3760 3761 3762 3763 3764 3765 3766 3767 3768 3769 3770 3771 3772 3773 3774 3775 3776 3777 3778 3779 3780 3781 3782 3783 3784 3785 3786 3787 3788 3789 3790 3791 3792 3793 3794 3795 3796 3797 3798 3799 3800 3801 3802 3803 3804 3805 3806 3807 3808 3809 3810 3811 3812 3813 3814 3815 3816 3817 3818 3819 3820 3821 3822 3823 3824 3825 3826 3827 3828 3829 3830 3831 3832 3833 3834 3835 3836 3837 3838 3839 3840 3841 3842 3843 3844 3845 3846 3847 3848 3849 3850 3851 3852 3853 3854 3855 3856 3857 3858 3859 3860 3861 3862 3863 3864 3865 3866 3867 3868 3869 3870 3871 3872 3873 3874 3875 3876 3877 3878 3879 3880 3881 3882 3883 3884 3885 3886 3887 3888 3889 3890 3891 3892 3893 3894 3895 3896 3897 3898 3899 3900 3901 3902 3903 3904 3905 3906 3907 3908 3909 3910 3911 3912 3913 3914 3915 3916 3917 3918 3919 3920 3921 3922 3923 3924 3925 3926 3927 3928 3929 3930 3931 3932 3933 3934 3935 3936 3937 3938 3939 3940 3941 3942 3943 3944 3945 3946 3947 3948 3949 3950 3951 3952 3953 3954 3955 3956 3957 3958 3959 3960 3961 3962 3963 3964 3965 3966 3967 3968 3969 3970 3971 3972 3973 3974 3975 3976 3977 3978 3979 3980 3981 3982 3983 3984 3985 3986 3987 3988 3989 3990 3991 3992 3993 3994 3995 3996 3997 3998 3999 4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 4016 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027 4028 4029 4030 4031 4032 4033 4034 4035 4036 4037 4038 4039 4040 4041 4042 4043 4044 4045 4046 4047 4048 4049 4050 4051 4052 4053 4054 4055 4056 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069 4070 4071 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 4083 4084 4085 4086 4087 4088 4089 4090 4091 4092 4093 4094 4095 4096 4097 4098 4099 4100 4101 4102 4103 4104 4105 4106 4107 4108 4109 4110 4111 4112 4113 4114 4115 4116 4117 4118 4119 4120 4121 4122 4123 4124 4125 4126 4127 4128 4129 4130 4131 4132 4133 4134 4135 4136 4137 4138 4139 4140 4141 4142 4143 4144 4145 4146 4147 4148 4149 4150 4151 4152 4153 4154 4155 4156 4157 4158 4159 4160 4161 4162 4163 4164 4165 4166 4167 4168 4169 4170 4171 4172 4173 4174 4175 4176 4177 4178 4179 4180 4181 4182 4183 4184 4185 4186 4187 4188 4189 4190 4191 4192 4193 4194 4195 4196 4197 4198 4199 4200 4201 4202 4203 4204 4205 4206 4207 4208 4209 4210 4211 4212 4213 4214 4215 4216 4217 4218 4219 4220 4221 4222 4223 4224 4225 4226 4227 4228 4229 4230 4231 4232 4233 4234 4235 4236 4237 4238 4239 4240 4241 4242 4243 4244 4245 4246 4247 4248 4249 4250 4251 4252 4253 4254 4255 4256 4257 4258 4259 4260 4261 4262 4263 4264 4265 4266 4267 4268 4269 4270 4271 4272 4273 4274 4275 4276 4277 4278 4279 4280 4281 4282 4283 4284 4285 4286 4287 4288 4289 4290 4291 4292 4293 4294 4295 4296 4297 4298 4299 4300 4301 4302 4303 4304 4305 4306 4307 4308 4309 4310 4311 4312 4313 4314 4315 4316 4317 4318 4319 4320 4321 4322 4323 4324 4325 4326 4327 4328 4329 4330 4331 4332 4333 4334 4335 4336 4337 4338 4339 4340 4341 4342 4343 4344 4345 4346 4347 4348 4349 4350 4351 4352 4353 4354 4355 4356 4357 4358 4359 4360 4361 4362 4363 4364 4365 4366 4367 4368 4369 4370 4371 4372 4373 4374 4375 4376 4377 4378 4379 4380 4381 4382 4383 4384 4385 4386 4387 4388 4389 4390 4391 4392 4393 4394 4395 4396 4397 4398 4399 4400 4401 4402 4403 4404 4405 4406 4407 4408 4409 4410 4411 4412 4413 4414 4415 4416 4417 4418 4419 4420 4421 4422 4423 4424 4425 4426 4427 4428 4429 4430 4431 4432 4433 4434 4435 4436 4437 4438 4439 4440 4441 4442 4443 4444 4445 4446 4447 4448 4449 4450 4451 4452 4453 4454 4455 4456 4457 4458 4459 4460 4461 4462 4463 4464 4465 4466 4467 4468 4469 4470 4471 4472 4473 4474 4475 4476 4477 4478 4479 4480 4481 4482 4483 4484 4485 4486 4487 4488 4489 4490 4491 4492 4493 4494 4495 4496 4497 4498 4499 4500 4501 4502 4503 4504 4505 4506 4507 4508 4509 4510 4511 4512 4513 4514 4515 4516 4517 4518 4519 4520 4521 4522 4523 4524 4525 4526 4527 4528 4529 4530 4531 4532 4533 4534 4535 4536 4537 4538 4539 4540 4541 4542 4543 4544 4545 4546 4547 4548 4549 4550 4551 4552 4553 4554 4555 4556 4557 4558 4559 4560 4561 4562 4563 4564 4565 4566 4567 4568 4569 4570 4571 4572 4573 4574 4575 4576 4577 4578 4579 4580 4581 4582 4583 4584 4585 4586 4587 4588 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 4599 4600 4601 4602 4603 4604 4605 4606 4607 4608 4609 4610 4611 4612 4613 4614 4615 4616 4617 4618 4619 4620 4621 4622 4623 4624 4625 4626 4627 4628 4629 4630 4631 4632 4633 4634 4635 4636 4637 4638 4639 4640 4641 4642 4643 4644 4645 4646 4647 4648 4649 4650 4651 4652 4653 4654 4655 4656 4657 4658 4659 4660 4661 4662 4663 4664 4665 4666 4667 4668 4669 4670 4671 4672 4673 4674 4675 4676 4677 4678 4679 4680 4681 4682 4683 4684 4685 4686 4687 4688 4689 4690 4691 4692 4693 4694 4695 4696 4697 4698 4699 4700 4701 4702 4703 4704 4705 4706 4707 4708 4709 4710 4711 4712 4713 4714 4715 4716 4717 4718 4719 4720 4721 4722 4723 4724 4725 4726 4727 4728 4729 4730 4731 4732 4733 4734 4735 4736 4737 4738 4739 4740 4741 4742 4743 4744 4745 4746 4747 4748 4749 4750 4751 4752 4753 4754 4755 4756 4757 4758 4759 4760 4761 4762 4763 4764 4765 4766 4767 4768 4769 4770 4771 4772 4773 4774 4775 4776 4777 4778 4779 4780 4781 4782 4783 4784 4785 4786 4787 4788 4789 4790 4791 4792 4793 4794 4795 4796 4797 4798 4799 4800 4801 4802 4803 4804 4805 4806 4807 4808 4809 4810 4811 4812 4813 4814 4815 4816 4817 4818 4819 4820 4821 4822 4823 4824 4825 4826 4827 4828 4829 4830 4831 4832 4833 4834 4835 4836 4837 4838 4839 4840 4841 4842 4843 4844 4845 4846 4847 4848 4849 4850 4851 4852 4853 4854 4855 4856 4857 4858 4859 4860 4861 4862 4863 4864 4865 4866 4867 4868 4869 4870 4871 4872 4873 4874 4875 4876 4877 4878 4879 4880 4881 4882 4883 4884 4885 4886 4887 4888 4889 4890 4891 4892 4893 4894 4895 4896 4897 4898 4899 4900 4901 4902 4903 4904 4905 4906 4907 4908 4909 4910 4911 4912 4913 4914 4915 4916 4917 4918 4919 4920 4921 4922 4923 4924 4925 4926 4927 4928 4929 4930 4931 4932 4933 4934 4935 4936 4937 4938 4939 4940 4941 4942 4943 4944 4945 4946 4947 4948 4949 4950 4951 4952 4953 4954 4955 4956 4957 4958 4959 4960 4961 4962 4963 4964 4965 4966 4967 4968 4969 4970 4971 4972 4973 4974 4975 4976 4977 4978 4979 4980 4981 4982 4983 4984 4985 4986 4987 4988 4989 4990 4991 4992 4993 4994 4995 4996 4997 4998 4999 5000 5001 5002 5003 5004 5005 5006 5007 5008 5009 5010 5011 5012 5013 5014 5015 5016 5017 5018 5019 5020 5021 5022 5023 5024 5025 5026 5027 5028 5029 5030 5031 5032 5033 5034 5035 5036 5037 5038 5039 5040 5041 5042 5043 5044 5045 5046 5047 5048 5049 5050 5051 5052 5053 5054 5055 5056 5057 5058 5059 5060 5061 5062 5063 5064 5065 5066 5067 5068 5069 5070 5071 5072 5073 5074 5075 5076 5077 5078 5079 5080 5081 5082 5083 5084 5085 5086 5087 5088 5089 5090 5091 5092 5093 5094 5095 5096 5097 5098 5099 5100 5101 5102 5103 5104 5105 5106 5107 5108 5109 5110 5111 5112 5113 5114 5115 5116 5117 5118 5119 5120 5121 5122 5123 5124 5125 5126 5127 5128 5129 5130 5131 5132 5133 5134 5135 5136 5137 5138 5139 5140 5141 5142 5143 5144 5145 5146 5147 5148 5149 5150 5151 5152 5153 5154 5155 5156 5157 5158 5159 5160 5161 5162 5163 5164 5165 5166 5167 5168 5169 5170 5171 5172 5173 5174 5175 5176 5177 5178 5179 5180 5181 5182 5183 5184 5185 5186 5187 5188 5189 5190 5191 5192 5193 5194 5195 5196 5197 5198 5199 5200 5201 5202 5203 5204 5205 5206 5207 5208 5209 5210 5211 5212 5213 5214 5215 5216 5217 5218 5219 5220 5221 5222 5223 5224 5225 5226 5227 5228 5229 5230 5231 5232 5233 5234 5235 5236 5237 5238 5239 5240 5241 5242 5243 5244 5245 5246 5247 5248 5249 5250 5251 5252 5253 5254 5255 5256 5257 5258 5259 5260 5261 5262 5263 5264 5265 5266 5267 5268 5269 5270 5271 5272 5273 5274 5275 5276 5277 5278 5279 5280 5281 5282 5283 5284 5285 5286 5287 5288 5289 5290 5291 5292 5293 5294 5295 5296 5297 5298 5299 5300 5301 5302 5303 5304 5305 5306 5307 5308 5309 5310 5311 5312 5313 5314 5315 5316 5317 5318 5319 5320 5321 5322 5323 5324 5325 5326 5327 5328 5329 5330 5331 5332 5333 5334 5335 5336 5337 5338 5339 5340 5341 5342 5343 5344 5345 5346 5347 5348 5349 5350 5351 5352 5353 5354 5355 5356 5357 5358 5359 5360 5361 5362 5363 5364 5365 5366 5367 5368 5369 5370 5371 5372 5373 5374 5375 5376 5377 5378 5379 5380 5381 5382 5383 5384 5385 5386 5387 5388 5389 5390 5391 5392 5393 5394 5395 5396 5397 5398 5399 5400 5401 5402 5403 5404 5405 5406 5407 5408 5409 5410 5411 5412 5413 5414 5415 5416 5417 5418 5419 5420 5421 5422 5423 5424 5425 5426 5427 5428 5429 5430 5431 5432 5433 5434 5435 5436 5437 5438 5439 5440 5441 5442 5443 5444 5445 5446 5447 5448 5449 5450 5451 5452 5453 5454 5455 5456 5457 5458 5459 5460 5461 5462 5463 5464 5465 5466 5467 5468 5469 5470 5471 5472 5473 5474 5475 5476 5477 5478 5479 5480 5481 5482 5483 5484 5485 5486 5487 5488 5489 5490 5491 5492 5493 5494 5495 5496 5497 5498 5499 5500 5501 5502 5503 5504 5505 5506 5507 5508 5509 5510 5511 5512 5513 5514 5515 5516 5517 5518 5519 5520 5521 5522 5523 5524 5525 5526 5527 5528 5529 5530 5531 5532 5533 5534 5535 5536 5537 5538 5539 5540 5541 5542 5543 5544 5545 5546 5547 5548 5549 5550 5551 5552 5553 5554 5555 5556 5557 5558 5559 5560 5561 5562 5563 5564 5565 5566 5567 5568 5569 5570 5571 5572 5573 5574 5575 5576 5577 5578 5579 5580 5581 5582 5583 5584 5585 5586 5587 5588 5589 5590 5591 5592 5593 5594 5595 5596 5597 5598 5599 5600 5601 5602 5603 5604 5605 5606 5607 5608 5609 5610 5611 5612 5613 5614 5615 5616 5617 5618 5619 5620 5621 5622 5623 5624 5625 5626 5627 5628 5629 5630 5631 5632 5633 5634 5635 5636 5637 5638 5639 5640 5641 5642 5643 5644 5645 5646 5647 5648 5649 5650 5651 5652 5653 5654 5655 5656 5657 5658 5659 5660 5661 5662 5663 5664 5665 5666 5667 5668 5669 5670 5671 5672 5673 5674 5675 5676 5677 5678 5679 5680 5681 5682 5683 5684 5685 5686 5687 5688 5689 5690 5691 5692 5693 5694 5695 5696 5697 5698 5699 5700 5701 5702 5703 5704 5705 5706 5707 5708 5709 5710 5711 5712 5713 5714 5715 5716 5717 5718 5719 5720 5721 5722 5723 5724 5725 5726 5727 5728 5729 5730 5731 5732 5733 5734 5735 5736 5737 5738 5739 5740 5741 5742 5743 5744 5745 5746 5747 5748 5749 5750 5751 5752 5753 5754 5755 5756 5757 5758 5759 5760 5761 5762 5763 5764 5765 5766 5767 5768 5769 5770 5771 5772 5773 5774 5775 5776 5777 5778 5779 5780 5781 5782 5783 5784 5785 5786 5787 5788 5789 5790 5791 5792 5793 5794 5795 5796 5797 5798 5799 5800 5801 5802 5803 5804 5805 5806 5807 5808 5809 5810 5811 5812 5813 5814 5815 5816 5817 5818 5819 5820 5821 5822 5823 5824 5825 5826 5827 5828 5829 5830 5831 5832 5833 5834 5835 5836 5837 5838 5839 5840 5841 5842 5843 5844 5845 5846 5847 5848 5849 5850 5851 5852 5853 5854 5855 5856 5857 5858 5859 5860 5861 5862 5863 5864 5865 5866 5867 5868 5869 5870 5871 5872 5873 5874 5875 5876 5877 5878 5879 5880 5881 5882 5883 5884 5885 5886 5887 5888 5889 5890 5891 5892 5893 5894 5895 5896 5897 5898 5899 5900 5901 5902 5903 5904 5905 5906 5907 5908 5909 5910 5911 5912 5913 5914 5915 5916 5917 5918 5919 5920 5921 5922 5923 5924 5925 5926 5927 5928 5929 5930 5931 5932 5933 5934 5935 5936 5937 5938 5939 5940 5941 5942 5943 5944 5945 5946 5947 5948 5949 5950 5951 5952 5953 5954 5955 5956 5957 5958 5959 5960 5961 5962 5963 5964 5965 5966 5967 5968 5969 5970 5971 5972 5973 5974 5975 5976 5977 5978 5979 5980 5981 5982 5983 5984 5985 5986 5987 5988 5989 5990 5991 5992 5993 5994 5995 5996 5997 5998 5999 6000 6001 6002 6003 6004 6005 6006 6007 6008 6009 6010 6011 6012 6013 6014 6015 6016 6017 6018 6019 6020 6021 6022 6023 6024 6025 6026 6027 6028 6029 6030 6031 6032 6033 6034 6035 6036 6037 6038 6039 6040 6041 6042 6043 6044 6045 6046 6047 6048 6049 6050 6051 6052 6053 6054 6055 6056 6057 6058 6059 6060 6061 6062 6063 6064 6065 6066 6067 6068 6069 6070 6071 6072 6073 6074 6075 6076 6077 6078 6079 6080 6081 6082 6083 6084 6085 6086 6087 6088 6089 6090 6091 6092 6093 6094 6095 6096 6097 6098 6099 6100 6101 6102 6103 6104 6105 6106 6107 6108 6109 6110 6111 6112 6113 6114 6115 6116 6117 6118 6119 6120 6121 6122 6123 6124 6125 6126 6127 6128 6129 6130 6131 6132 6133 6134 6135 6136 6137 6138 6139 6140 6141 6142 6143 6144 6145 6146 6147 6148 6149 6150 6151 6152 6153 6154 6155 6156 6157 6158 6159 6160 6161 6162 6163 6164 6165 6166 6167 6168 6169 6170 6171 6172 6173 6174 6175 6176 6177 6178 6179 6180 6181 6182 6183 6184 6185 6186 6187 6188 6189 6190 6191 6192 6193 6194 6195 6196 6197 6198 6199 6200 6201 6202 6203 6204 6205 6206 6207 6208 6209 6210 6211 6212 6213 6214 6215 6216 6217 6218 6219 6220 6221 6222 6223 6224 6225 6226 6227 6228 6229 6230 6231 6232 6233 6234 6235 6236 6237 6238 6239 6240 6241 6242 6243 6244 6245 6246 6247 6248 6249 6250 6251 6252 6253 6254 6255 6256 6257 6258 6259 6260 6261 6262 6263 6264 6265 6266 6267 6268 6269 6270 6271 6272 6273 6274 6275 6276 6277 6278 6279 6280 6281 6282 6283 6284 6285 6286 6287 6288 6289 6290 6291 6292 6293 6294 6295 6296 6297 6298 6299 6300 6301 6302 6303 6304 6305 6306 6307 6308 6309 6310 6311 6312 6313 6314 6315 6316 6317 6318 6319 6320 6321 6322 6323 6324 6325 6326 6327 6328 6329 6330 6331 6332 6333 6334 6335 6336 6337 6338 6339 6340 6341 6342 6343 6344 6345 6346 6347 6348 6349 6350 6351 6352 6353 6354 6355 6356 6357 6358 6359 6360 6361 6362 6363 6364 6365 6366 6367 6368 6369 6370 6371 6372 6373 6374 6375 6376 6377 6378 6379 6380 6381 6382 6383 6384 6385 6386 6387 6388 6389 6390 6391 6392 6393 6394 6395 6396 6397 6398 6399 6400 6401 6402 6403 6404 6405 6406 6407 6408 6409 6410 6411 6412 6413 6414 6415 6416 6417 6418 6419 6420 6421 6422 6423 6424 6425 6426 6427 6428 6429 6430 6431 6432 6433 6434 6435 6436 6437 6438 6439 6440 6441 6442 6443 6444 6445 6446 6447 6448 6449 6450 6451 6452 6453 6454 6455 6456 6457 6458 6459 6460 6461 6462 6463 6464 6465 6466 6467 6468 6469 6470 6471 6472 6473 6474 6475 6476 6477 6478 6479 6480 6481 6482 6483 6484 6485 6486 6487 6488 6489 6490 6491 6492 6493 6494 6495 6496 6497 6498 6499 6500 6501 6502 6503 6504 6505 6506 6507 6508 6509 6510 6511 6512 6513 6514 6515 6516 6517 6518 6519 6520 6521 6522 6523 6524 6525 6526 6527 6528 6529 6530 6531 6532 6533 6534 6535 6536 6537 6538 6539 6540 6541 6542 6543 6544 6545 6546 6547 6548 6549 6550 6551 6552 6553 6554 6555 6556 6557 6558 6559 6560 6561 6562 6563 6564 6565 6566 6567 6568 6569 6570 6571 6572 6573 6574 6575 6576 6577 6578 6579 6580 6581 6582 6583 6584 6585 6586 6587 6588 6589 6590 6591 6592 6593 6594 6595 6596 6597 6598 6599 6600 6601 6602 6603 6604 6605 6606 6607 6608 6609 6610 6611 6612 6613 6614 6615 6616 6617 6618 6619 6620 6621 6622 6623 6624 6625 6626 6627 6628 6629 6630 6631 6632 6633 6634 6635 6636 6637 6638 6639 6640 6641 6642 6643 6644 6645 6646 6647 6648 6649 6650 6651 6652 6653 6654 6655 6656 6657 6658 6659 6660 6661 6662 6663 6664 6665 6666 6667 6668 6669 6670 6671 6672 6673 6674 6675 6676 6677 6678 6679 6680 6681 6682 6683 6684 6685 6686 6687 6688 6689 6690 6691 6692 6693 6694 6695 6696 6697 6698 6699 6700 6701 6702 6703 6704 6705 6706 6707 6708 6709 6710 6711 6712 6713 6714 6715 6716 6717 6718 6719 6720 6721 6722 6723 6724 6725 6726 6727 6728 6729 6730 6731 6732 6733 6734 6735 6736 6737 6738 6739 6740 6741 6742 6743 6744 6745 6746 6747 6748 6749 6750 6751 6752 6753 6754 6755 6756 6757 6758 6759 6760 6761 6762 6763 6764 6765 6766 6767 6768 6769 6770 6771 6772 6773 6774 6775 6776 6777 6778 6779 6780 6781 6782 6783 6784 6785 6786 6787 6788 6789 6790 6791 6792 6793 6794 6795 6796 6797 6798 6799 6800 6801 6802 6803 6804 6805 6806 6807 6808 6809 6810 6811 6812 6813 6814 6815 6816 6817 6818 6819 6820 6821 6822 6823 6824 6825 6826 6827 6828 6829 6830 6831 6832 6833 6834 6835 6836 6837 6838 6839 6840 6841 6842 6843 6844 6845 6846 6847 6848 6849 6850 6851 6852 6853 6854 6855 6856 6857 6858 6859 6860 6861 6862 6863 6864 6865 6866 6867 6868 6869 6870 6871 6872 6873 6874 6875 6876 6877 6878 6879 6880 6881 6882 6883 6884 6885 6886 6887 6888 6889 6890 6891 6892 6893 6894 6895 6896 6897 6898 6899 6900 6901 6902 6903 6904 6905 6906 6907 6908 6909 6910 6911 6912 6913 6914 6915 6916 6917 6918 6919 6920 6921 6922 6923 6924 6925 6926 6927 6928 6929 6930 6931 6932 6933 6934 6935 6936 6937 6938 6939 6940 6941 6942 6943 6944 6945 6946 6947 6948 6949 6950 6951 6952 6953 6954 6955 6956 6957 6958 6959 6960 6961 6962 6963 6964 6965 6966 6967 6968 6969 6970 6971 6972 6973 6974 6975 6976 6977 6978 6979 6980 6981 6982 6983 6984 6985 6986 6987 6988 6989 6990 6991 6992 6993 6994 6995 6996 6997 6998 6999 7000 7001 7002 7003 7004 7005 7006 7007 7008 7009 7010 7011 7012 7013 7014 7015 7016 7017 7018 7019 7020 7021 7022 7023 7024 7025 7026 7027 7028 7029 7030 7031 7032 7033 7034 7035 7036 7037 7038 7039 7040 7041 7042 7043 7044 7045 7046 7047 7048 7049 7050 7051 7052 7053 7054 7055 7056 7057 7058 7059 7060 7061 7062 7063 7064 7065 7066 7067 7068 7069 7070 7071 7072 7073 7074 7075 7076 7077 7078 7079 7080 7081 7082 7083 7084 7085 7086 7087 7088 7089 7090 7091 7092 7093 7094 7095 7096 7097 7098 7099 7100 7101 7102 7103 7104 7105 7106 7107 7108 7109 7110 7111 7112 7113 7114 7115 7116 7117 7118 7119 7120 7121 7122 7123 7124 7125 7126 7127 7128 7129 7130 7131 7132 7133 7134 7135 7136 7137 7138 7139 7140 7141 7142 7143 7144 7145 7146 7147 7148 7149 7150 7151 7152 7153 7154 7155 7156 7157 7158 7159 7160 7161 7162 7163 7164 7165 7166 7167 7168 7169 7170 7171 7172 7173 7174 7175 7176 7177 7178 7179 7180 7181 7182 7183 7184 7185 7186 7187 7188 7189 7190 7191 7192 7193 7194 7195 7196 7197 7198 7199 7200 7201 7202 7203 7204 7205 7206 7207 7208 7209 7210 7211 7212 7213 7214 7215 7216 7217 7218 7219 7220 7221 7222 7223 7224 7225 7226 7227 7228 7229 7230 7231 7232 7233 7234 7235 7236 7237 7238 7239 7240 7241 7242 7243 7244 7245 7246 7247 7248 7249 7250 7251 7252 7253 7254 7255 7256 7257 7258 7259 7260 7261 7262 7263 7264 7265 7266 7267 7268 7269 7270 7271 7272 7273 7274 7275 7276 7277 7278 7279 7280 7281 7282 7283 7284 7285 7286 7287 7288 7289 7290 7291 7292 7293 7294 7295 7296 7297 7298 7299 7300 7301 7302 7303 7304 7305 7306 7307 7308 7309 7310 7311 7312 7313 7314 7315 7316 7317 7318 7319 7320 7321 7322 7323 7324 7325 7326 7327 7328 7329 7330 7331 7332 7333 7334 7335 7336 7337 7338 7339 7340 7341 7342 7343 7344 7345 7346 7347 7348 7349 7350 7351 7352 7353 7354 7355 7356 7357 7358 7359 7360 7361 7362 7363 7364 7365 7366 7367 7368 7369 7370 7371 7372 7373 7374 7375 7376 7377 7378 7379 7380 7381 7382 7383 7384 7385 7386 7387 7388 7389 7390 7391 7392 7393 7394 7395 7396 7397 7398 7399 7400 7401 7402 7403 7404 7405 7406 7407 7408 7409 7410 7411 7412 7413 7414 7415 7416 7417 7418 7419 7420 7421 7422 7423 7424 7425 7426 7427 7428 7429 7430 7431 7432 7433 7434 7435 7436 7437 7438 7439 7440 7441 7442 7443 7444 7445 7446 7447 7448 7449 7450 7451 7452 7453 7454 7455 7456 7457 7458 7459 7460 7461 7462 7463 7464 7465 7466 7467 7468 7469 7470 7471 7472 7473 7474 7475 7476 7477 7478 7479 7480 7481 7482 7483 7484 7485 7486 7487 7488 7489 7490 7491 7492 7493 7494 7495 7496 7497 7498 7499 7500 7501 7502 7503 7504 7505 7506 7507 7508 7509 7510 7511 7512 7513 7514 7515 7516 7517 7518 7519 7520 7521 7522 7523 7524 7525 7526 7527 7528 7529 7530 7531 7532 7533 7534 7535 7536 7537 7538 7539 7540 7541 7542 7543 7544 7545 7546 7547 7548 7549 7550 7551 7552 7553 7554 7555 7556 7557 7558 7559 7560 7561 7562 7563 7564 7565 7566 7567 7568 7569 7570 7571 7572 7573 7574 7575 7576 7577 7578 7579 7580 7581 7582 7583 7584 7585 7586 7587 7588 7589 7590 7591 7592 7593 7594 7595 7596 7597 7598 7599 7600 7601 7602 7603 7604 7605 7606 7607 7608 7609 7610 7611 7612 7613 7614 7615 7616 7617 7618 7619 7620 7621 7622 7623 7624 7625 7626 7627 7628 7629 7630 7631 7632 7633 7634 7635 7636 7637 7638 7639 7640 7641 7642 7643 7644 7645 7646 7647 7648 7649 7650 7651 7652 7653 7654 7655 7656 7657 7658 7659 7660 7661 7662 7663 7664 7665 7666 7667 7668 7669 7670 7671 7672 7673 7674 7675 7676 7677 7678 7679 7680 7681 7682 7683 7684 7685 7686 7687 7688 7689 7690 7691 7692 7693 7694 7695 7696 7697 7698 7699 7700 7701 7702 7703 7704 7705 7706 7707 7708 7709 7710 7711 7712 7713 7714 7715 7716 7717 7718 7719 7720 7721 7722 7723 7724 7725 7726 7727 7728 7729 7730 7731 7732 7733 7734 7735 7736 7737 7738 7739 7740 7741 7742 7743 7744 7745 7746 7747 7748 7749 7750 7751 7752 7753 7754 7755 7756 7757 7758 7759 7760 7761 7762 7763 7764 7765 7766 7767 7768 7769 7770 7771 7772 7773 7774 7775 7776 7777 7778 7779 7780 7781 7782 7783 7784 7785 7786 7787 7788 7789 7790 7791 7792 7793 7794 7795 7796 7797 7798 7799 7800 7801 7802 7803 7804 7805 7806 7807 7808 7809 7810 7811 7812 7813 7814 7815 7816 7817 7818 7819 7820 7821 7822 7823 7824 7825 7826 7827 7828 7829 7830 7831 7832 7833 7834 7835 7836 7837 7838 7839 7840 7841 7842 7843 7844 7845 7846 7847 7848 7849 7850 7851 7852 7853 7854 7855 7856 7857 7858 7859 7860 7861 7862 7863 7864 7865 7866 7867 7868 7869 7870 7871 7872 7873 7874 7875 7876 7877 7878 7879 7880 7881 7882 7883 7884 7885 7886 7887 7888 7889 7890 7891 7892 7893 7894 7895 7896 7897 7898 7899 7900 7901 7902 7903 7904 7905 7906 7907 7908 7909 7910 7911 7912 7913 7914 7915 7916 7917 7918 7919 7920 7921 7922 7923 7924 7925 7926 7927 7928 7929 7930 7931 7932 7933 7934 7935 7936 7937 7938 7939 7940 7941 7942 7943 7944 7945 7946 7947 7948 7949 7950 7951 7952 7953 7954 7955 7956 7957 7958 7959 7960 7961 7962 7963 7964 7965 7966 7967 7968 7969 7970 7971 7972 7973 7974 7975 7976 7977 7978 7979 7980 7981 7982 7983 7984 7985 7986 7987 7988 7989 7990 7991 7992 7993 7994 7995 7996 7997 7998 7999 8000 8001 8002 8003 8004 8005 8006 8007 8008 8009 8010 8011 8012 8013 8014 8015 8016 8017 8018 8019 8020 8021 8022 8023 8024 8025 8026 8027 8028 8029 8030 8031 8032 8033 8034 8035 8036 8037 8038 8039 8040 8041 8042 8043 8044 8045 8046 8047 8048 8049 8050 8051 8052 8053 8054 8055 8056 8057 8058 8059 8060 8061 8062 8063 8064 8065 8066 8067 8068 8069 8070 8071 8072 8073 8074 8075 8076 8077 8078 8079 8080 8081 8082 8083 8084 8085 8086 8087 8088 8089 8090 8091 8092 8093 8094 8095 8096 8097 8098 8099 8100 8101 8102 8103 8104 8105 8106 8107 8108 8109 8110 8111 8112 8113 8114 8115 8116 8117 8118 8119 8120 8121 8122 8123 8124 8125 8126 8127 8128 8129 8130 8131 8132 8133 8134 8135 8136 8137 8138 8139 8140 8141 8142 8143 8144 8145 8146 8147 8148 8149 8150 8151 8152 8153 8154 8155 8156 8157 8158 8159 8160 8161 8162 8163 8164 8165 8166 8167 8168 8169 8170 8171 8172 8173 8174 8175 8176 8177 8178 8179 8180 8181 8182 8183 8184 8185 8186 8187 8188 8189 8190 8191 8192 8193 8194 8195 8196 8197 8198 8199 8200 8201 8202 8203 8204 8205 8206 8207 8208 8209 8210 8211 8212 8213 8214 8215 8216 8217 8218 8219 8220 8221 8222 8223 8224 8225 8226 8227 8228 8229 8230 8231 8232 8233 8234 8235 8236 8237 8238 8239 8240 8241 8242 8243 8244 8245 8246 8247 8248 8249 8250 8251 8252 8253 8254 8255 8256 8257 8258 8259 8260 8261 8262 8263 8264 8265 8266 8267 8268 8269 8270 8271 8272 8273 8274 8275 8276 8277 8278 8279 8280 8281 8282 8283 8284 8285 8286 8287 8288 8289 8290 8291 8292 8293 8294 8295 8296 8297 8298 8299 8300 8301 8302 8303 8304 8305 8306 8307 8308 8309 8310 8311 8312 8313 8314 8315 8316 8317 8318 8319 8320 8321 8322 8323 8324 8325 8326 8327 8328 8329 8330 8331 8332 8333 8334 8335 8336 8337 8338 8339 8340 8341 8342 8343 8344 8345 8346 8347 8348 8349 8350 8351 8352 8353 8354 8355 8356 8357 8358 8359 8360 8361 8362 8363 8364 8365 8366 8367 8368 8369 8370 8371 8372 8373 8374 8375 8376 8377 8378 8379 8380 8381 8382 8383 8384 8385 8386 8387 8388 8389 8390 8391 8392 8393 8394 8395 8396 8397 8398 8399 8400 8401 8402 8403 8404 8405 8406 8407 8408 8409 8410 8411 8412 8413 8414 8415 8416 8417 8418 8419 8420 8421 8422 8423 8424 8425 8426 8427 8428 8429 8430 8431 8432 8433 8434 8435 8436 8437 8438 8439 8440 8441 8442 8443 8444 8445 8446 8447 8448 8449 8450 8451 8452 8453 8454 8455 8456 8457 8458 8459 8460 8461 8462 8463 8464 8465 8466 8467 8468 8469 8470 8471 8472 8473 8474 8475 8476 8477 8478 8479 8480 8481 8482 8483 8484 8485 8486 8487 8488 8489 8490 8491 8492 8493 8494 8495 8496 8497 8498 8499 8500 8501 8502 8503 8504 8505 8506 8507 8508 8509 8510 8511 8512 8513 8514 8515 8516 8517 8518 8519 8520 8521 8522 8523 8524 8525 8526 8527 8528 8529 8530 8531 8532 8533 8534 8535 8536 8537 8538 8539 8540 8541 8542 8543 8544 8545 8546 8547 8548 8549 8550 8551 8552 8553 8554 8555 8556 8557 8558 8559 8560 8561 8562 8563 8564 8565 8566 8567 8568 8569 8570 8571 8572 8573 8574 8575 8576 8577 8578 8579 8580 8581 8582 8583 8584 8585 8586 8587 8588 8589 8590 8591 8592 8593 8594 8595 8596 8597 8598 8599 8600 8601 8602 8603 8604 8605 8606 8607 8608 8609 8610 8611 8612 8613 8614 8615 8616 8617 8618 8619 8620 8621 8622 8623 8624 8625 8626 8627 8628 8629 8630 8631 8632 8633 8634 8635 8636 8637 8638 8639 8640 8641 8642 8643 8644 8645 8646 8647 8648 8649 8650 8651 8652 8653 8654 8655 8656 8657 8658 8659 8660 8661 8662 8663 8664 8665 8666 8667 8668 8669 8670 8671 8672 8673 8674 8675 8676 8677 8678 8679 8680 8681 8682 8683 8684 8685 8686 8687 8688 8689 8690 8691 8692 8693 8694 8695 8696 8697 8698 8699 8700 8701 8702 8703 8704 8705 8706 8707 8708 8709 8710 8711 8712 8713 8714 8715 8716 8717 8718 8719 8720 8721 8722 8723 8724 8725 8726 8727 8728 8729 8730 8731 8732 8733 8734 8735 8736 8737 8738 8739 8740 8741 8742 8743 8744 8745 8746 8747 8748 8749 8750 8751 8752 8753 8754 8755 8756 8757 8758 8759 8760 8761 8762 8763 8764 8765 8766 8767 8768 8769 8770 8771 8772 8773 8774 8775 8776 8777 8778 8779 8780 8781 8782 8783 8784 8785 8786 8787 8788 8789 8790 8791 8792 8793 8794 8795 8796 8797 8798 8799 8800 8801 8802 8803 8804 8805 8806 8807 8808 8809 8810 8811 8812 8813 8814 8815 8816 8817 8818 8819 8820 8821 8822 8823 8824 8825 8826 8827 8828 8829 8830 8831 8832 8833 8834 8835 8836 8837 8838 8839 8840 8841 8842 8843 8844 8845 8846 8847 8848 8849 8850 8851 8852 8853 8854 8855 8856 8857 8858 8859 8860 8861 8862 8863 8864 8865 8866 8867 8868 8869 8870 8871 8872 8873 8874 8875 8876 8877 8878 8879 8880 8881 8882 8883 8884 8885 8886 8887 8888 8889 8890 8891 8892 8893 8894 8895 8896 8897 8898 8899 8900 8901 8902 8903 8904 8905 8906 8907 8908 8909 8910 8911 8912 8913 8914 8915 8916 8917 8918 8919 8920 8921 8922 8923 8924 8925 8926 8927 8928 8929 8930 8931 8932 8933 8934 8935 8936 8937 8938 8939 8940 8941 8942 8943 8944 8945 8946 8947 8948 8949 8950 8951 8952 8953 8954 8955 8956 8957 8958 8959 8960 8961 8962 8963 8964 8965 8966 8967 8968 8969 8970 8971 8972 8973 8974 8975 8976 8977 8978 8979 8980 8981 8982 8983 8984 8985 8986 8987 8988 8989 8990 8991 8992 8993 8994 8995 8996 8997 8998 8999 9000 9001 9002 9003 9004 9005 9006 9007 9008 9009 9010 9011 9012 9013 9014 9015 9016 9017 9018 9019 9020 9021 9022 9023 9024 9025 9026 9027 9028 9029 9030 9031 9032 9033 9034 9035 9036 9037 9038 9039 9040 9041 9042 9043 9044 9045 9046 9047 9048 9049 9050 9051 9052 9053 9054 9055 9056 9057 9058 9059 9060 9061 9062 9063 9064 9065 9066 9067 9068 9069 9070 9071 9072 9073 9074 9075 9076 9077 9078 9079 9080 9081 9082 9083 9084 9085 9086 9087 9088 9089 9090 9091 9092 9093 9094 9095 9096 9097 9098 9099 9100 9101 9102 9103 9104 9105 9106 9107 9108 9109 9110 9111 9112 9113 9114 9115 9116 9117 9118 9119 9120 9121 9122 9123 9124 9125 9126 9127 9128 9129 9130 9131 9132 9133 9134 9135 9136 9137 9138 9139 9140 9141 9142 9143 9144 9145 9146 9147 9148 9149 9150 9151 9152 9153 9154 9155 9156 9157 9158 9159 9160 9161 9162 9163 9164 9165 9166 9167 9168 9169 9170 9171 9172 9173 9174 9175 9176 9177 9178 9179 9180 9181 9182 9183 9184 9185 9186 9187 9188 9189 9190 9191 9192 9193 9194 9195 9196 9197 9198 9199 9200 9201 9202 9203 9204 9205 9206 9207 9208 9209 9210 9211 9212 9213 9214 9215 9216 9217 9218 9219 9220 9221 9222 9223 9224 9225 9226 9227 9228 9229 9230 9231 9232 9233 9234 9235 9236 9237 9238 9239 9240 9241 9242 9243 9244 9245 9246 9247 9248 9249 9250 9251 9252 9253 9254 9255 9256 9257 9258 9259 9260 9261 9262 9263 9264 9265 9266 9267 9268 9269 9270 9271 9272 9273 9274 9275 9276 9277 9278 9279 9280 9281 9282 9283 9284 9285 9286 9287 9288 9289 9290 9291 9292 9293 9294 9295 9296 9297 9298 9299 9300 9301 9302 9303 9304 9305 9306 9307 9308 9309 9310 9311 9312 9313 9314 9315 9316 9317 9318 9319 9320 9321 9322 9323 9324 9325 9326 9327 9328 9329 9330 9331 9332 9333 9334 9335 9336 9337 9338 9339 9340 9341 9342 9343 9344 9345 9346 9347 9348 9349 9350 9351 9352 9353 9354 9355 9356 9357 9358 9359 9360 9361 9362 9363 9364 9365 9366 9367 9368 9369 9370 9371 9372 9373 9374 9375 9376 9377 9378 9379 9380 9381 9382 9383 9384 9385 9386 9387 9388 9389 9390 9391 9392 9393 9394 9395 9396 9397 9398 9399 9400 9401 9402 9403 9404 9405 9406 9407 9408 9409 9410 9411 9412 9413 9414 9415 9416 9417 9418 9419 9420 9421 9422 9423 9424 9425 9426 9427 9428 9429 9430 9431 9432 9433 9434 9435 9436 9437 9438 9439 9440 9441 9442 9443 9444 9445 9446 9447 9448 9449 9450 9451 9452 9453 9454 9455 9456 9457 9458 9459 9460 9461 9462 9463 9464 9465 9466 9467 9468 9469 9470 9471 9472 9473 9474 9475 9476 9477 9478 9479 9480 9481 9482 9483 9484 9485 9486 9487 9488 9489 9490 9491 9492 9493 9494 9495 9496 9497 9498 9499 9500 9501 9502 9503 9504 9505 9506 9507 9508 9509 9510 9511 9512 9513 9514 9515 9516 9517 9518 9519 9520 9521 9522 9523 9524 9525 9526 9527 9528 9529 9530 9531 9532 9533 9534 9535 9536 9537 9538 9539 9540 9541 9542 9543 9544 9545 9546 9547 9548 9549 9550 9551 9552 9553 9554 9555 9556 9557 9558 9559 9560 9561 9562 9563 9564 9565 9566 9567 9568 9569 9570 9571 9572 9573 9574 9575 9576 9577 9578 9579 9580 9581 9582 9583 9584 9585 9586 9587 9588 9589 9590 9591 9592 9593 9594 9595 9596 9597 9598 9599 9600 9601 9602 9603 9604 9605 9606 9607 9608 9609 9610 9611 9612 9613 9614 9615 9616 9617 9618 9619 9620 9621 9622 9623 9624 9625 9626 9627 9628 9629 9630 9631 9632 9633 9634 9635 9636 9637 9638 9639 9640 9641 9642 9643 9644 9645 9646 9647 9648 9649 9650 9651 9652 9653 9654 9655 9656 9657 9658 9659 9660 9661 9662 9663 9664 9665 9666 9667 9668 9669 9670 9671 9672 9673 9674 9675 9676 9677 9678 9679 9680 9681 9682 9683 9684 9685 9686 9687 9688 9689 9690 9691 9692 9693 9694 9695 9696 9697 9698 9699 9700 9701 9702 9703 9704 9705 9706 9707 9708 9709 9710 9711 9712 9713 9714 9715 9716 9717 9718 9719 9720 9721 9722 9723 9724 9725 9726 9727 9728 9729 9730 9731 9732 9733 9734 9735 9736 9737 9738 9739 9740 9741 9742 9743 9744 9745 9746 9747 9748 9749 9750 9751 9752 9753 9754 9755 9756 9757 9758 9759 9760 9761 9762 9763 9764 9765 9766 9767 9768 9769 9770 9771 9772 9773 9774 9775 9776 9777 9778 9779 9780 9781 9782 9783 9784 9785 9786 9787 9788 9789 9790 9791 9792 9793 9794 9795 9796 9797 9798 9799 9800 9801 9802 9803 9804 9805 9806 9807 9808 9809 9810 9811 9812 9813 9814 9815 9816 9817 9818 9819 9820 9821 9822 9823 9824 9825 9826 9827 9828 9829 9830 9831 9832 9833 9834 9835 9836 9837 9838 9839 9840 9841 9842 9843 9844 9845 9846 9847 9848 9849 9850 9851 9852 9853 9854 9855 9856 9857 9858 9859 9860 9861 9862 9863 9864 9865 9866 9867 9868 9869 9870 9871 9872 9873 9874 9875 9876 9877 9878 9879 9880 9881 9882 9883 9884 9885 9886 9887 9888 9889 9890 9891 9892 9893 9894 9895 9896 9897 9898 9899 9900 9901 9902 9903 9904 9905 9906 9907 9908 9909 9910 9911 9912 9913 9914 9915 9916 9917 9918 9919 9920 9921 9922 9923 9924 9925 9926 9927 9928 9929 9930 9931 9932 9933 9934 9935 9936 9937 9938 9939 9940 9941 9942 9943 9944 9945 9946 9947 9948 9949 9950 9951 9952 9953 9954 9955 9956 9957 9958 9959 9960 9961 9962 9963 9964 9965 9966 9967 9968 9969 9970 9971 9972 9973 9974 9975 9976 9977 9978 9979 9980 9981 9982 9983 9984 9985 9986 9987 9988 9989 9990 9991 9992 9993 9994 9995 9996 9997 9998 9999 10000 10001 10002 10003 10004 10005 10006 10007 10008 10009 10010 10011 10012 10013 10014 10015 10016 10017 10018 10019 10020 10021 10022 10023 10024 10025 10026 10027 10028 10029 10030 10031 10032 10033 10034 10035 10036 10037 10038 10039 10040 10041 10042 10043 10044 10045 10046 10047 10048 10049 10050 10051 10052 10053 10054 10055 10056 10057 10058 10059 10060 10061 10062 10063 10064 10065 10066 10067 10068 10069 10070 10071 10072 10073 10074 10075 10076 10077 10078 10079 10080 10081 10082 10083 10084 10085 10086 10087 10088 10089 10090 10091 10092 10093 10094 10095 10096 10097 10098 10099 10100 10101 10102 10103 10104 10105 10106 10107 10108 10109 10110 10111 10112 10113 10114 10115 10116 10117 10118 10119 10120 10121 10122 10123 10124 10125 10126 10127 10128 10129 10130 10131 10132 10133 10134 10135 10136 10137 10138 10139 10140 10141 10142 10143 10144 10145 10146 10147 10148 10149 10150 10151 10152 10153 10154 10155 10156 10157 10158 10159 10160 10161 10162 10163 10164 10165 10166 10167 10168 10169 10170 10171 10172 10173 10174 10175 10176 10177 10178 10179 10180 10181 10182 10183 10184 10185 10186 10187 10188 10189 10190 10191 10192 10193 10194 10195 10196 10197 10198 10199 10200 10201 10202 10203 10204 10205 10206 10207 10208 10209 10210 10211 10212 10213 10214 10215 10216 10217 10218 10219 10220 10221 10222 10223 10224 10225 10226 10227 10228 10229 10230 10231 10232 10233 10234 10235 10236 10237 10238 10239 10240 10241 10242 10243 10244 10245 10246 10247 10248 10249 10250 10251 10252 10253 10254 10255 10256 10257 10258 10259 10260 10261 10262 10263 10264 10265 10266 10267 10268 10269 10270 10271 10272 10273 10274 10275 10276 10277 10278 10279 10280 10281 10282 10283 10284 10285 10286 10287 10288 10289 10290 10291 10292 10293 10294 10295 10296 10297 10298 10299 10300 10301 10302 10303 10304 10305 10306 10307 10308 10309 10310 10311 10312 10313 10314 10315 10316 10317 10318 10319 10320 10321 10322 10323 10324 10325 10326 10327 10328 10329 10330 10331 10332 10333 10334 10335 10336 10337 10338 10339 10340 10341 10342 10343 10344 10345 10346 10347 10348 10349 10350 10351 10352 10353 10354 10355 10356 10357 10358 10359 10360 10361 10362 10363 10364 10365 10366 10367 10368 10369 10370 10371 10372 10373 10374 10375 10376 10377 10378 10379 10380 10381 10382 10383 10384 10385 10386 10387 10388 10389 10390 10391 10392 10393 10394 10395 10396 10397 10398 10399 10400 10401 10402 10403 10404 10405 10406 10407 10408 10409 10410 10411 10412 10413 10414 10415 10416 10417 10418 10419 10420 10421 10422 10423 10424 10425 10426 10427 10428 10429 10430 10431 10432 10433 10434 10435 10436 10437 10438 10439 10440 10441 10442 10443 10444 10445 10446 10447 10448 10449 10450 10451 10452 10453 10454 10455 10456 10457 10458 10459 10460 10461 10462 10463 10464 10465 10466 10467 10468 10469 10470 10471 10472 10473 10474 10475 10476 10477 10478 10479 10480 10481 10482 10483 10484 10485 10486 10487 10488 10489 10490 10491 10492 10493 10494 10495 10496 10497 10498 10499 10500 10501 10502 10503 10504 10505 10506 10507 10508 10509 10510 10511 10512 10513 10514 10515 10516 10517 10518 10519 10520 10521 10522 10523 10524 10525 10526 10527 10528 10529 10530 10531 10532 10533 10534 10535 10536 10537 10538 10539 10540 10541 10542 10543 10544 10545 10546 10547 10548 10549 10550 10551 10552 10553 10554 10555 10556 10557 10558 10559 10560 10561 10562 10563 10564 10565 10566 10567 10568 10569 10570 10571 10572 10573 10574 10575 10576 10577 10578 10579 10580 10581 10582 10583 10584 10585 10586 10587 10588 10589 10590 10591 10592 10593 10594 10595 10596 10597 10598 10599 10600 10601 10602 10603 10604 10605 10606 10607 10608 10609 10610 10611 10612 10613 10614 10615 10616 10617 10618 10619 10620 10621 10622 10623 10624 10625 10626 10627 10628 10629 10630 10631 10632 10633 10634 10635 10636 10637 10638 10639 10640 10641 10642 10643 10644 10645 10646 10647 10648 10649 10650 10651 10652 10653 10654 10655 10656 10657 10658 10659 10660 10661 10662 10663 10664 10665 10666 10667 10668 10669 10670 10671 10672 10673 10674 10675 10676 10677 10678 10679 10680 10681 10682 10683 10684 10685 10686 10687 10688 10689 10690 10691 10692 10693 10694 10695 10696 10697 10698 10699 10700 10701 10702 10703 10704 10705 10706 10707 10708 10709 10710 10711 10712 10713 10714 10715 10716 10717 10718 10719 10720 10721 10722 10723 10724 10725 10726 10727 10728 10729 10730 10731 10732 10733 10734 10735 10736 10737 10738 10739 10740 10741 10742 10743 10744 10745 10746 10747 10748 10749 10750 10751 10752 10753 10754 10755 10756 10757 10758 10759 10760 10761 10762 10763 10764 10765 10766 10767 10768 10769 10770 10771 10772 10773 10774 10775 10776 10777 10778 10779 10780 10781 10782 10783 10784 10785 10786 10787 10788 10789 10790 10791 10792 10793 10794 10795 10796 10797 10798 10799 10800 10801 10802 10803 10804 10805 10806 10807 10808 10809 10810 10811 10812 10813 10814 10815 10816 10817 10818 10819 10820 10821 10822 10823 10824 10825 10826 10827 10828 10829 10830 10831 10832 10833 10834 10835 10836 10837 10838 10839 10840 10841 10842 10843 10844 10845 10846 10847 10848 10849 10850 10851 10852 10853 10854 10855 10856 10857 10858 10859 10860 10861 10862 10863 10864 10865 10866 10867 10868 10869 10870 10871 10872 10873 10874 10875 10876 10877 10878 10879 10880 10881 10882 10883 10884 10885 10886 10887 10888 10889 10890 10891 10892 10893 10894 10895 10896 10897 10898 10899 10900 10901 10902 10903 10904 10905 10906 10907 10908 10909 10910 10911 10912 10913 10914 10915 10916 10917 10918 10919 10920 10921 10922 10923 10924 10925 10926 10927 10928 10929 10930 10931 10932 10933 10934 10935 10936 10937 10938 10939 10940 10941 10942 10943 10944 10945 10946 10947 10948 10949 10950 10951 10952 10953 10954 10955 10956 10957 10958 10959 10960 10961 10962 10963 10964 10965 10966 10967 10968 10969 10970 10971 10972 10973 10974 10975 10976 10977 10978 10979 10980 10981 10982 10983 10984 10985 10986 10987 10988 10989 10990 10991 10992 10993 10994 10995 10996 10997 10998 10999 11000 11001 11002 11003 11004 11005 11006 11007 11008 11009 11010 11011 11012 11013 11014 11015 11016 11017 11018 11019 11020 11021 11022 11023 11024 11025 11026 11027 11028 11029 11030 11031 11032 11033 11034 11035 11036 11037 11038 11039 11040 11041 11042 11043 11044 11045 11046 11047 11048 11049 11050 11051 11052 11053 11054 11055 11056 11057 11058 11059 11060 11061 11062 11063 11064 11065 11066 11067 11068 11069 11070 11071 11072 11073 11074 11075 11076 11077 11078 11079 11080 11081 11082 11083 11084 11085 11086 11087 11088 11089 11090 11091 11092 11093 11094 11095 11096 11097 11098 11099 11100 11101 11102 11103 11104 11105 11106 11107 11108 11109 11110 11111 11112 11113 11114 11115 11116 11117 11118 11119 11120 11121 11122 11123 11124 11125 11126 11127 11128 11129 11130 11131 11132 11133 11134 11135 11136 11137 11138 11139 11140 11141 11142 11143 11144 11145 11146 11147 11148 11149 11150 11151 11152 11153 11154 11155 11156 11157 11158 11159 11160 11161 11162 11163 11164 11165 11166 11167 11168 11169 11170 11171 11172 11173 11174 11175 11176 11177 11178 11179 11180 11181 11182 11183 11184 11185 11186 11187 11188 11189 11190 11191 11192 11193 11194 11195 11196 11197 11198 11199 11200 11201 11202 11203 11204 11205 11206 11207 11208 11209 11210 11211 11212 11213 11214 11215 11216 11217 11218 11219 11220 11221 11222 11223 11224 11225 11226 11227 11228 11229 11230 11231 11232 11233 11234 11235 11236 11237 11238 11239 11240 11241 11242 11243 11244 11245 11246 11247 11248 11249 11250 11251 11252 11253 11254 11255 11256 11257 11258 11259 11260 11261 11262 11263 11264 11265 11266 11267 11268 11269 11270 11271 11272 11273 11274 11275 11276 11277 11278 11279 11280 11281 11282 11283 11284 11285 11286 11287 11288 11289 11290 11291 11292 11293 11294 11295 11296 11297 11298 11299 11300 11301 11302 11303 11304 11305 11306 11307 11308 11309 11310 11311 11312 11313 11314 11315 11316 11317 11318 11319 11320 11321 11322 11323 11324 11325 11326 11327 11328 11329 11330 11331 11332 11333 11334 11335 11336 11337 11338 11339 11340 11341 11342 11343 11344 11345 11346 11347 11348 11349 11350 11351 11352 11353 11354 11355 11356 11357 11358 11359 11360 11361 11362 11363 11364 11365 11366 11367 11368 11369 11370 11371 11372 11373 11374 11375 11376 11377 11378 11379 11380 11381 11382 11383 11384 11385 11386 11387 11388 11389 11390 11391 11392 11393 11394 11395 11396 11397 11398 11399 11400 11401 11402 11403 11404 11405 11406 11407 11408 11409 11410 11411 11412 11413 11414 11415 11416 11417 11418 11419 11420 11421 11422 11423 11424 11425 11426 11427 11428 11429 11430 11431 11432 11433 11434 11435 11436 11437 11438 11439 11440 11441 11442 11443 11444 11445 11446 11447 11448 11449 11450 11451 11452 11453 11454 11455 11456 11457 11458 11459 11460 11461 11462 11463 11464 11465 11466 11467 11468 11469 11470 11471 11472 11473 11474 11475 11476 11477 11478 11479 11480 11481 11482 11483 11484 11485 11486 11487 11488 11489 11490 11491 11492 11493 11494 11495 11496 11497 11498 11499 11500 11501 11502 11503 11504 11505 11506 11507 11508 11509 11510 11511 11512 11513 11514 11515 11516 11517 11518 11519 11520 11521 11522 11523 11524 11525 11526 11527 11528 11529 11530 11531 11532 11533 11534 11535 11536 11537 11538 11539 11540 11541 11542 11543 11544 11545 11546 11547 11548 11549 11550 11551 11552 11553 11554 11555 11556 11557 11558 11559 11560 11561 11562 11563 11564 11565 11566 11567 11568 11569 11570 11571 11572 11573 11574 11575 11576 11577 11578 11579 11580 11581 11582 11583 11584 11585 11586 11587 11588 11589 11590 11591 11592 11593 11594 11595 11596 11597 11598 11599 11600 11601 11602 11603 11604 11605 11606 11607 11608 11609 11610 11611 11612 11613 11614 11615 11616 11617 11618 11619 11620 11621 11622 11623 11624 11625 11626 11627 11628 11629 11630 11631 11632 11633 11634 11635 11636 11637 11638 11639 11640 11641 11642 11643 11644 11645 11646 11647 11648 11649 11650 11651 11652 11653 11654 11655 11656 11657 11658 11659 11660 11661 11662 11663 11664 11665 11666 11667 11668 11669 11670 11671 11672 11673 11674 11675 11676 11677 11678 11679 11680 11681 11682 11683 11684 11685 11686 11687 11688 11689 11690 11691 11692 11693 11694 11695 11696 11697 11698 11699 11700 11701 11702 11703 11704 11705 11706 11707 11708 11709 11710 11711 11712 11713 11714 11715 11716 11717 11718 11719 11720 11721 11722 11723 11724 11725 11726 11727 11728 11729 11730 11731 11732 11733 11734 11735 11736 11737 11738 11739 11740 11741 11742 11743 11744 11745 11746 11747 11748 11749 11750 11751 11752 11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 11766 11767 11768 11769 11770 11771 11772 11773 11774 11775 11776 11777 11778 11779 11780 11781 11782 11783 11784 11785 11786 11787 11788 11789 11790 11791 11792 11793 11794 11795 11796 11797 11798 11799 11800 11801 11802 11803 11804 11805 11806 11807 11808 11809 11810 11811 11812 11813 11814 11815 11816 11817 11818 11819 11820 11821 11822 11823 11824 11825 11826 11827 11828 11829 11830 11831 11832 11833 11834 11835 11836 11837 11838 11839 11840 11841 11842 11843 11844 11845 11846 11847 11848 11849 11850 11851 11852 11853 11854 11855 11856 11857 11858 11859 11860 11861 11862 11863 11864 11865 11866 11867 11868 11869 11870 11871 11872 11873 11874 11875 11876 11877 11878 11879 11880 11881 11882 11883 11884 11885 11886 11887 11888 11889 11890 11891 11892 11893 11894 11895 11896 11897 11898 11899 11900 11901 11902 11903 11904 11905 11906 11907 11908 11909 11910 11911 11912 11913 11914 11915 11916 11917 11918 11919 11920 11921 11922 11923 11924 11925 11926 11927 11928 11929 11930 11931 11932 11933 11934 11935 11936 11937 11938 11939 11940 11941 11942 11943 11944 11945 11946 11947 11948 11949 11950 11951 11952 11953 11954 11955 11956 11957 11958 11959 11960 11961 11962 11963 11964 11965 11966 11967 11968 11969 11970 11971 11972 11973 11974 11975 11976 11977 11978 11979 11980 11981 11982 11983 11984 11985 11986 11987 11988 11989 11990 11991 11992 11993 11994 11995 11996 11997 11998 11999 12000 12001 12002 12003 12004 12005 12006 12007 12008 12009 12010 12011 12012 12013 12014 12015 12016 12017 12018 12019 12020 12021 12022 12023 12024 12025 12026 12027 12028 12029 12030 12031 12032 12033 12034 12035 12036 12037 12038 12039 12040 12041 12042 12043 12044 12045 12046 12047 12048 12049 12050 12051 12052 12053 12054 12055 12056 12057 12058 12059 12060 12061 12062 12063 12064 12065 12066 12067 12068 12069 12070 12071 12072 12073 12074 12075 12076 12077 12078 12079 12080 12081 12082 12083 12084 12085 12086 12087 12088 12089 12090 12091 12092 12093 12094 12095 12096 12097 12098 12099 12100 12101 12102 12103 12104 12105 12106 12107 12108 12109 12110 12111 12112 12113 12114 12115 12116 12117 12118 12119 12120 12121 12122 12123 12124 12125 12126 12127 12128 12129 12130 12131 12132 12133 12134 12135 12136 12137 12138 12139 12140 12141 12142 12143 12144 12145 12146 12147 12148 12149 12150 12151 12152 12153 12154 12155 12156 12157 12158 12159 12160 12161 12162 12163 12164 12165 12166 12167 12168 12169 12170 12171 12172 12173 12174 12175 12176 12177 12178 12179 12180 12181 12182 12183 12184 12185 12186 12187 12188 12189 12190 12191 12192 12193 12194 12195 12196 12197 12198 12199 12200 12201 12202 12203 12204 12205 12206 12207 12208 12209 12210 12211 12212 12213 12214 12215 12216 12217 12218 12219 12220 12221 12222 12223 12224 12225 12226 12227 12228 12229 12230 12231 12232 12233 12234 12235 12236 12237 12238 12239 12240 12241 12242 12243 12244 12245 12246 12247 12248 12249 12250 12251 12252 12253 12254 12255 12256 12257 12258 12259 12260 12261 12262 12263 12264 12265 12266 12267 12268 12269 12270 12271 12272 12273 12274 12275 12276 12277 12278 12279 12280 12281 12282 12283 12284 12285 12286 12287 12288 12289 12290 12291 12292 12293 12294 12295 12296 12297 12298 12299 12300 12301 12302 12303 12304 12305 12306 12307 12308 12309 12310 12311 12312 12313 12314 12315 12316 12317 12318 12319 12320 12321 12322 12323 12324 12325 12326 12327 12328 12329 12330 12331 12332 12333 12334 12335 12336 12337 12338 12339 12340 12341 12342 12343 12344 12345 12346 12347 12348 12349 12350 12351 12352 12353 12354 12355 12356 12357 12358 12359 12360 12361 12362 12363 12364 12365 12366 12367 12368 12369 12370 12371 12372 12373 12374 12375 12376 12377 12378 12379 12380 12381 12382 12383 12384 12385 12386 12387 12388 12389 12390 12391 12392 12393 12394 12395 12396 12397 12398 12399 12400 12401 12402 12403 12404 12405 12406 12407 12408 12409 12410 12411 12412 12413 12414 12415 12416 12417 12418 12419 12420 12421 12422 12423 12424 12425 12426 12427 12428 12429 12430 12431 12432 12433 12434 12435 12436 12437 12438 12439 12440 12441 12442 12443 12444 12445 12446 12447 12448 12449 12450 12451 12452 12453 12454 12455 12456 12457 12458 12459 12460 12461 12462 12463 12464 12465 12466 12467 12468 12469 12470 12471 12472 12473 12474 12475 12476 12477 12478 12479 12480 12481 12482 12483 12484 12485 12486 12487 12488 12489 12490 12491 12492 12493 12494 12495 12496 12497 12498 12499 12500 12501 12502 12503 12504 12505 12506 12507 12508 12509 12510 12511 12512 12513 12514 12515 12516 12517 12518 12519 12520 12521 12522 12523 12524 12525 12526 12527 12528 12529 12530 12531 12532 12533 12534 12535 12536 12537 12538 12539 12540 12541 12542 12543 12544 12545 12546 12547 12548 12549 12550 12551 12552 12553 12554 12555 12556 12557 12558 12559 12560 12561 12562 12563 12564 12565 12566 12567 12568 12569 12570 12571 12572 12573 12574 12575 12576 12577 12578 12579 12580 12581 12582 12583 12584 12585 12586 12587 12588 12589 12590 12591 12592 12593 12594 12595 12596 12597 12598 12599 12600 12601 12602 12603 12604 12605 12606 12607 12608 12609 12610 12611 12612 12613 12614 12615 12616 12617 12618 12619 12620 12621 12622 12623 12624 12625 12626 12627 12628 12629 12630 12631 12632 12633 12634 12635 12636 12637 12638 12639 12640 12641 12642 12643 12644 12645 12646 12647 12648 12649 12650 12651 12652 12653 12654 12655 12656 12657 12658 12659 12660 12661 12662 12663 12664 12665 12666 12667 12668 12669 12670 12671 12672 12673 12674 12675 12676 12677 12678 12679 12680 12681 12682 12683 12684 12685 12686 12687 12688 12689 12690 12691 12692 12693 12694 12695 12696 12697 12698 12699 12700 12701 12702 12703 12704 12705 12706 12707 12708 12709 12710 12711 12712 12713 12714 12715 12716 12717 12718 12719 12720 12721 12722 12723 12724 12725 12726 12727 12728 12729 12730 12731 12732 12733 12734 12735 12736 12737 12738 12739 12740 12741 12742 12743 12744 12745 12746 12747 12748 12749 12750 12751 12752 12753 12754 12755 12756 12757 12758 12759 12760 12761 12762 12763 12764 12765 12766 12767 12768 12769 12770 12771 12772 12773 12774 12775 12776 12777 12778 12779 12780 12781 12782 12783 12784 12785 12786 12787 12788 12789 12790 12791 12792 12793 12794 12795 12796 12797 12798 12799 12800 12801 12802 12803 12804 12805 12806 12807 12808 12809 12810 12811 12812 12813 12814 12815 12816 12817 12818 12819 12820 12821 12822 12823 12824 12825 12826 12827 12828 12829 12830 12831 12832 12833 12834 12835 12836 12837 12838 12839 12840 12841 12842 12843 12844 12845 12846 12847 12848 12849 12850 12851 12852 12853 12854 12855 12856 12857 12858 12859 12860 12861 12862 12863 12864 12865 12866 12867 12868 12869 12870 12871 12872 12873 12874 12875 12876 12877 12878 12879 12880 12881 12882 12883 12884 12885 12886 12887 12888 12889 12890 12891 12892 12893 12894 12895 12896 12897 12898 12899 12900 12901 12902 12903 12904 12905 12906 12907 12908 12909 12910 12911 12912 12913 12914 12915 12916 12917 12918 12919 12920 12921 12922 12923 12924 12925 12926 12927 12928 12929 12930 12931 12932 12933 12934 12935 12936 12937 12938 12939 12940 12941 12942 12943 12944 12945 12946 12947 12948 12949 12950 12951 12952 12953 12954 12955 12956 12957 12958 12959 12960 12961 12962 12963 12964 12965 12966 12967 12968 12969 12970 12971 12972 12973 12974 12975 12976 12977 12978 12979 12980 12981 12982 12983 12984 12985 12986 12987 12988 12989 12990 12991 12992 12993 12994 12995 12996 12997 12998 12999 13000 13001 13002 13003 13004 13005 13006 13007 13008 13009 13010 13011 13012 13013 13014 13015 13016 13017 13018 13019 13020 13021 13022 13023 13024 13025 13026 13027 13028 13029 13030 13031 13032 13033 13034 13035 13036 13037 13038 13039 13040 13041 13042 13043 13044 13045 13046 13047 13048 13049 13050 13051 13052 13053 13054 13055 13056 13057 13058 13059 13060 13061 13062 13063 13064 13065 13066 13067 13068 13069 13070 13071 13072 13073 13074 13075 13076 13077 13078 13079 13080 13081 13082 13083 13084 13085 13086 13087 13088 13089 13090 13091 13092 13093 13094 13095 13096 13097 13098 13099 13100 13101 13102 13103 13104 13105 13106 13107 13108 13109 13110 13111 13112 13113 13114 13115 13116 13117 13118 13119 13120 13121 13122 13123 13124 13125 13126 13127 13128 13129 13130 13131 13132 13133 13134 13135 13136 13137 13138 13139 13140 13141 13142 13143 13144 13145 13146 13147 13148 13149 13150 13151 13152 13153 13154 13155 13156 13157 13158 13159 13160 13161 13162 13163 13164 13165 13166 13167 13168 13169 13170 13171 13172 13173 13174 13175 13176 13177 13178 13179 13180 13181 13182 13183 13184 13185 13186 13187 13188 13189 13190 13191 13192 13193 13194 13195 13196 13197 13198 13199 13200 13201 13202 13203 13204 13205 13206 13207 13208 13209 13210 13211 13212 13213 13214 13215 13216 13217 13218 13219 13220 13221 13222 13223 13224 13225 13226 13227 13228 13229 13230 13231 13232 13233 13234 13235 13236 13237 13238 13239 13240 13241 13242 13243 13244 13245 13246 13247 13248 13249 13250 13251 13252 13253 13254 13255 13256 13257 13258 13259 13260 13261 13262 13263 13264 13265 13266 13267 13268 13269 13270 13271 13272 13273 13274 13275 13276 13277 13278 13279 13280 13281 13282 13283 13284 13285 13286 13287 13288 13289 13290 13291 13292 13293 13294 13295 13296 13297 13298 13299 13300 13301 13302 13303 13304 13305 13306 13307 13308 13309 13310 13311 13312 13313 13314 13315 13316 13317 13318 13319 13320 13321 13322 13323 13324 13325 13326 13327 13328 13329 13330 13331 13332 13333 13334 13335 13336 13337 13338 13339 13340 13341 13342 13343 13344 13345 13346 13347 13348 13349 13350 13351 13352 13353 13354 13355 13356 13357 13358 13359 13360 13361 13362 13363 13364 13365 13366 13367 13368 13369 13370 13371 13372 13373 13374 13375 13376 13377 13378 13379 13380 13381 13382 13383 13384 13385 13386 13387 13388 13389 13390 13391 13392 13393 13394 13395 13396 13397 13398 13399 13400 13401 13402 13403 13404 13405 13406 13407 13408 13409 13410 13411 13412 13413 13414 13415 13416 13417 13418 13419 13420 13421 13422 13423 13424 13425 13426 13427 13428 13429 13430 13431 13432 13433 13434 13435 13436 13437 13438 13439 13440 13441 13442 13443 13444 13445 13446 13447 13448 13449 13450 13451 13452 13453 13454 13455 13456 13457 13458 13459 13460 13461 13462 13463 13464 13465 13466 13467 13468 13469 13470 13471 13472 13473 13474 13475 13476 13477 13478 13479 13480 13481 13482 13483 13484 13485 13486 13487 13488 13489 13490 13491 13492 13493 13494 13495 13496 13497 13498 13499 13500 13501 13502 13503 13504 13505 13506 13507 13508 13509 13510 13511 13512 13513 13514 13515 13516 13517 13518 13519 13520 13521 13522 13523 13524 13525 13526 13527 13528 13529 13530 13531 13532 13533 13534 13535 13536 13537 13538 13539 13540 13541 13542 13543 13544 13545 13546 13547 13548 13549 13550 13551 13552 13553 13554 13555 13556 13557 13558 13559 13560 13561 13562 13563 13564 13565 13566 13567 13568 13569 13570 13571 13572 13573 13574 13575 13576 13577 13578 13579 13580 13581 13582 13583 13584 13585 13586 13587 13588 13589 13590 13591 13592 13593 13594 13595 13596 13597 13598 13599 13600 13601 13602 13603 13604 13605 13606 13607 13608 13609 13610 13611 13612 13613 13614 13615 13616 13617 13618 13619 13620 13621 13622 13623 13624 13625 13626 13627 13628 13629 13630 13631 13632 13633 13634 13635 13636 13637 13638 13639 13640 13641 13642 13643 13644 13645 13646 13647 13648 13649 13650 13651 13652 13653 13654 13655 13656 13657 13658 13659 13660 13661 13662 13663 13664 13665 13666 13667 13668 13669 13670 13671 13672 13673 13674 13675 13676 13677 13678 13679 13680 13681 13682 13683 13684 13685 13686 13687 13688 13689 13690 13691 13692 13693 13694 13695 13696 13697 13698 13699 13700 13701 13702 13703 13704 13705 13706 13707 13708 13709 13710 13711 13712 13713 13714 13715 13716 13717 13718 13719 13720 13721 13722 13723 13724 13725 13726 13727 13728 13729 13730 13731 13732 13733 13734 13735 13736 13737 13738 13739 13740 13741 13742 13743 13744 13745 13746 13747 13748 13749 13750 13751 13752 13753 13754 13755 13756 13757 13758 13759 13760 13761 13762 13763 13764 13765 13766 13767 13768 13769 13770 13771 13772 13773 13774 13775 13776 13777 13778 13779 13780 13781 13782 13783 13784 13785 13786 13787 13788 13789 13790 13791 13792 13793 13794 13795 13796 13797 13798 13799 13800 13801 13802 13803 13804 13805 13806 13807 13808 13809 13810 13811 13812 13813 13814 13815 13816 13817 13818 13819 13820 13821 13822 13823 13824 13825 13826 13827 13828 13829 13830 13831 13832 13833 13834 13835 13836 13837 13838 13839 13840 13841 13842 13843 13844 13845 13846 13847 13848 13849 13850 13851 13852 13853 13854 13855 13856 13857 13858 13859 13860 13861 13862 13863 13864 13865 13866 13867 13868 13869 13870 13871 13872 13873 13874 13875 13876 13877 13878 13879 13880 13881 13882 13883 13884 13885 13886 13887 13888 13889 13890 13891 13892 13893 13894 13895 13896 13897 13898 13899 13900 13901 13902 13903 13904 13905 13906 13907 13908 13909 13910 13911 13912 13913 13914 13915 13916 13917 13918 13919 13920 13921 13922 13923 13924 13925 13926 13927 13928 13929 13930 13931 13932 13933 13934 13935 13936 13937 13938 13939 13940 13941 13942 13943 13944 13945 13946 13947 13948 13949 13950 13951 13952 13953 13954 13955 13956 13957 13958 13959 13960 13961 13962 13963 13964 13965 13966 13967 13968 13969 13970 13971 13972 13973 13974 13975 13976 13977 13978 13979 13980 13981 13982 13983 13984 13985 13986 13987 13988 13989 13990 13991 13992 13993 13994 13995 13996 13997 13998 13999 14000 14001 14002 14003 14004 14005 14006 14007 14008 14009 14010 14011 14012 14013 14014 14015 14016 14017 14018 14019 14020 14021 14022 14023 14024 14025 14026 14027 14028 14029 14030 14031 14032 14033 14034 14035 14036 14037 14038 14039 14040 14041 14042 14043 14044 14045 14046 14047 14048 14049 14050 14051 14052 14053 14054 14055 14056 14057 14058 14059 14060 14061 14062 14063 14064 14065 14066 14067 14068 14069 14070 14071 14072 14073 14074 14075 14076 14077 14078 14079 14080 14081 14082 14083 14084 14085 14086 14087 14088 14089 14090 14091 14092 14093 14094 14095 14096 14097 14098 14099 14100 14101 14102 14103 14104 14105 14106 14107 14108 14109 14110 14111 14112 14113 14114 14115 14116 14117 14118 14119 14120 14121 14122 14123 14124 14125 14126 14127 14128 14129 14130 14131 14132 14133 14134 14135 14136 14137 14138 14139 14140 14141 14142 14143 14144 14145 14146 14147 14148 14149 14150 14151 14152 14153 14154 14155 14156 14157 14158 14159 14160 14161 14162 14163 14164 14165 14166 14167 14168 14169 14170 14171 14172 14173 14174 14175 14176 14177 14178 14179 14180 14181 14182 14183 14184 14185 14186 14187 14188 14189 14190 14191 14192 14193 14194 14195 14196 14197 14198 14199 14200 14201 14202 14203 14204 14205 14206 14207 14208 14209 14210 14211 14212 14213 14214 14215 14216 14217 14218 14219 14220 14221 14222 14223 14224 14225 14226 14227 14228 14229 14230 14231 14232 14233 14234 14235 14236 14237 14238 14239 14240 14241 14242 14243 14244 14245 14246 14247 14248 14249 14250 14251 14252 14253 14254 14255 14256 14257 14258 14259 14260 14261 14262 14263 14264 14265 14266 14267 14268 14269 14270 14271 14272 14273 14274 14275 14276 14277 14278 14279 14280 14281 14282 14283 14284 14285 14286 14287 14288 14289 14290 14291 14292 14293 14294 14295 14296 14297 14298 14299 14300 14301 14302 14303 14304 14305 14306 14307 14308 14309 14310 14311 14312 14313 14314 14315 14316 14317 14318 14319 14320 14321 14322 14323 14324 14325 14326 14327 14328 14329 14330 14331 14332 14333 14334 14335 14336 14337 14338 14339 14340 14341 14342 14343 14344 14345 14346 14347 14348 14349 14350 14351 14352 14353 14354 14355 14356 14357 14358 14359 14360 14361 14362 14363 14364 14365 14366 14367 14368 14369 14370 14371 14372 14373 14374 14375 14376 14377 14378 14379 14380 14381 14382 14383 14384 14385 14386 14387 14388 14389 14390 14391 14392 14393 14394 14395 14396 14397 14398 14399 14400 14401 14402 14403 14404 14405 14406 14407 14408 14409 14410 14411 14412 14413 14414 14415 14416 14417 14418 14419 14420 14421 14422 14423 14424 14425 14426 14427 14428 14429 14430 14431 14432 14433 14434 14435 14436 14437 14438 14439 14440 14441 14442 14443 14444 14445 14446 14447 14448 14449 14450 14451 14452 14453 14454 14455 14456 14457 14458 14459 14460 14461 14462 14463 14464 14465 14466 14467 14468 14469 14470 14471 14472 14473 14474 14475 14476 14477 14478 14479 14480 14481 14482 14483 14484 14485 14486 14487 14488 14489 14490 14491 14492 14493 14494 14495 14496 14497 14498 14499 14500 14501 14502 14503 14504 14505 14506 14507 14508 14509 14510 14511 14512 14513 14514 14515 14516 14517 14518 14519 14520 14521 14522 14523 14524 14525 14526 14527 14528 14529 14530 14531 14532 14533 14534 14535 14536 14537 14538 14539 14540 14541 14542 14543 14544 14545 14546 14547 14548 14549 14550 14551 14552 14553 14554 14555 14556 14557 14558 14559 14560 14561 14562 14563 14564 14565 14566 14567 14568 14569 14570 14571 14572 14573 14574 14575 14576 14577 14578 14579 14580 14581 14582 14583 14584 14585 14586 14587 14588 14589 14590 14591 14592 14593 14594 14595 14596 14597 14598 14599 14600 14601 14602 14603 14604 14605 14606 14607 14608 14609 14610 14611 14612 14613 14614 14615 14616 14617 14618 14619 14620 14621 14622 14623 14624 14625 14626 14627 14628 14629 14630 14631 14632 14633 14634 14635 14636 14637 14638 14639 14640 14641 14642 14643 14644 14645 14646 14647 14648 14649 14650 14651 14652 14653 14654 14655 14656 14657 14658 14659 14660 14661 14662 14663 14664 14665 14666 14667 14668 14669 14670 14671 14672 14673 14674 14675 14676 14677 14678 14679 14680 14681 14682 14683 14684 14685 14686 14687 14688 14689 14690 14691 14692 14693 14694 14695 14696 14697 14698 14699 14700 14701 14702 14703 14704 14705 14706 14707 14708 14709 14710 14711 14712 14713 14714 14715 14716 14717 14718 14719 14720 14721 14722 14723 14724 14725 14726 14727 14728 14729 14730 14731 14732 14733 14734 14735 14736 14737 14738 14739 14740 14741 14742 14743 14744 14745 14746 14747 14748 14749 14750 14751 14752 14753 14754 14755 14756 14757 14758 14759 14760 14761 14762 14763 14764 14765 14766 14767 14768 14769 14770 14771 14772 14773 14774 14775 14776 14777 14778 14779 14780 14781 14782 14783 14784 14785 14786 14787 14788 14789 14790 14791 14792 14793 14794 14795 14796 14797 14798 14799 14800 14801 14802 14803 14804 14805 14806 14807 14808 14809 14810 14811 14812 14813 14814 14815 14816 14817 14818 14819 14820 14821 14822 14823 14824 14825 14826 14827 14828 14829 14830 14831 14832 14833 14834 14835 14836 14837 14838 14839 14840 14841 14842 14843 14844 14845 14846 14847 14848 14849 14850 14851 14852 14853 14854 14855 14856 14857 14858 14859 14860 14861 14862 14863 14864 14865 14866 14867 14868 14869 14870 14871 14872 14873 14874 14875 14876 14877 14878 14879 14880 14881 14882 14883 14884 14885 14886 14887 14888 14889 14890 14891 14892 14893 14894 14895 14896 14897 14898 14899 14900 14901 14902 14903 14904 14905 14906 14907 14908 14909 14910 14911 14912 14913 14914 14915 14916 14917 14918 14919 14920 14921 14922 14923 14924 14925 14926 14927 14928 14929 14930 14931 14932 14933 14934 14935 14936 14937 14938 14939 14940 14941 14942 14943 14944 14945 14946 14947 14948 14949 14950 14951 14952 14953 14954 14955 14956 14957 14958 14959 14960 14961 14962 14963 14964 14965 14966 14967 14968 14969 14970 14971 14972 14973 14974 14975 14976 14977 14978 14979 14980 14981 14982 14983 14984 14985 14986 14987 14988 14989 14990 14991 14992 14993 14994 14995 14996 14997 14998 14999 15000 15001 15002 15003 15004 15005 15006 15007 15008 15009 15010 15011 15012 15013 15014 15015 15016 15017 15018 15019 15020 15021 15022 15023 15024 15025 15026 15027 15028 15029 15030 15031 15032 15033 15034 15035 15036 15037 15038 15039 15040 15041 15042 15043 15044 15045 15046 15047 15048 15049 15050 15051 15052 15053 15054 15055 15056 15057 15058 15059 15060 15061 15062 15063 15064 15065 15066 15067 15068 15069 15070 15071 15072 15073 15074 15075 15076 15077 15078 15079 15080 15081 15082 15083 15084 15085 15086 15087 15088 15089 15090 15091 15092 15093 15094 15095 15096 15097 15098 15099 15100 15101 15102 15103 15104 15105 15106 15107 15108 15109 15110 15111 15112 15113 15114 15115 15116 15117 15118 15119 15120 15121 15122 15123 15124 15125 15126 15127 15128 15129 15130 15131 15132 15133 15134 15135 15136 15137 15138 15139 15140 15141 15142 15143 15144 15145 15146 15147 15148 15149 15150 15151 15152 15153 15154 15155 15156 15157 15158 15159 15160 15161 15162 15163 15164 15165 15166 15167 15168 15169 15170 15171 15172 15173 15174 15175 15176 15177 15178 15179 15180 15181 15182 15183 15184 15185 15186 15187 15188 15189 15190 15191 15192 15193 15194 15195 15196 15197 15198 15199 15200 15201 15202 15203 15204 15205 15206 15207 15208 15209 15210 15211 15212 15213 15214 15215 15216 15217 15218 15219 15220 15221 15222 15223 15224 15225 15226 15227 15228 15229 15230 15231 15232 15233 15234 15235 15236 15237 15238 15239 15240 15241 15242 15243 15244 15245 15246 15247 15248 15249 15250 15251 15252 15253 15254 15255 15256 15257 15258 15259 15260 15261 15262 15263 15264 15265 15266 15267 15268 15269 15270 15271 15272 15273 15274 15275 15276 15277 15278 15279 15280 15281 15282 15283 15284 15285 15286 15287 15288 15289 15290 15291 15292 15293 15294 15295 15296 15297 15298 15299 15300 15301 15302 15303 15304 15305 15306 15307 15308 15309 15310 15311 15312 15313 15314 15315 15316 15317 15318 15319 15320 15321 15322 15323 15324 15325 15326 15327 15328 15329 15330 15331 15332 15333 15334 15335 15336 15337 15338 15339 15340 15341 15342 15343 15344 15345 15346 15347 15348 15349 15350 15351 15352 15353 15354 15355 15356 15357 15358 15359 15360 15361 15362 15363 15364 15365 15366 15367 15368 15369 15370 15371 15372 15373 15374 15375 15376 15377 15378 15379 15380 15381 15382 15383 15384 15385 15386 15387 15388 15389 15390 15391 15392 15393 15394 15395 15396 15397 15398 15399 15400 15401 15402 15403 15404 15405 15406 15407 15408 15409 15410 15411 15412 15413 15414 15415 15416 15417 15418 15419 15420 15421 15422 15423 15424 15425 15426 15427 15428 15429 15430 15431 15432 15433 15434 15435 15436 15437 15438 15439 15440 15441 15442 15443 15444 15445 15446 15447 15448 15449 15450 15451 15452 15453 15454 15455 15456 15457 15458 15459 15460 15461 15462 15463 15464 15465 15466 15467 15468 15469 15470 15471 15472 15473 15474 15475 15476 15477 15478 15479 15480 15481 15482 15483 15484 15485 15486 15487 15488 15489 15490 15491 15492 15493 15494 15495 15496 15497 15498 15499 15500 15501 15502 15503 15504 15505 15506 15507 15508 15509 15510 15511 15512 15513 15514 15515 15516 15517 15518 15519 15520 15521 15522 15523 15524 15525 15526 15527 15528 15529 15530 15531 15532 15533 15534 15535 15536 15537 15538 15539 15540 15541 15542 15543 15544 15545 15546 15547 15548 15549 15550 15551 15552 15553 15554 15555 15556 15557 15558 15559 15560 15561 15562 15563 15564 15565 15566 15567 15568 15569 15570 15571 15572 15573 15574 15575 15576 15577 15578 15579 15580 15581 15582 15583 15584 15585 15586 15587 15588 15589 15590 15591 15592 15593 15594 15595 15596 15597 15598 15599 15600 15601 15602 15603 15604 15605 15606 15607 15608 15609 15610 15611 15612 15613 15614 15615 15616 15617 15618 15619 15620 15621 15622 15623 15624 15625 15626 15627 15628 15629 15630 15631 15632 15633 15634 15635 15636 15637 15638 15639 15640 15641 15642 15643 15644 15645 15646 15647 15648 15649 15650 15651 15652 15653 15654 15655 15656 15657 15658 15659 15660 15661 15662 15663 15664 15665 15666 15667 15668 15669 15670 15671 15672 15673 15674 15675 15676 15677 15678 15679 15680 15681 15682 15683 15684 15685 15686 15687 15688 15689 15690 15691 15692 15693 15694 15695 15696 15697 15698 15699 15700 15701 15702 15703 15704 15705 15706 15707 15708 15709 15710 15711 15712 15713 15714 15715 15716 15717 15718 15719 15720 15721 15722 15723 15724 15725 15726 15727 15728 15729 15730 15731 15732 15733 15734 15735 15736 15737 15738 15739 15740 15741 15742 15743 15744 15745 15746 15747 15748 15749 15750 15751 15752 15753 15754 15755 15756 15757 15758 15759 15760 15761 15762 15763 15764 15765 15766 15767 15768 15769 15770 15771 15772 15773 15774 15775 15776 15777 15778 15779 15780 15781 15782 15783 15784 15785 15786 15787 15788 15789 15790 15791 15792 15793 15794 15795 15796 15797 15798 15799 15800 15801 15802 15803 15804 15805 15806 15807 15808 15809 15810 15811 15812 15813 15814 15815 15816 15817 15818 15819 15820 15821 15822 15823 15824 15825 15826 15827 15828 15829 15830 15831 15832 15833 15834 15835 15836 15837 15838 15839 15840 15841 15842 15843 15844 15845 15846 15847 15848 15849 15850 15851 15852 15853 15854 15855 15856 15857 15858 15859 15860 15861 15862 15863 15864 15865 15866 15867 15868 15869 15870 15871 15872 15873 15874 15875 15876 15877 15878 15879 15880 15881 15882 15883 15884 15885 15886 15887 15888 15889 15890 15891 15892 15893 15894 15895 15896 15897 15898 15899 15900 15901 15902 15903 15904 15905 15906 15907 15908 15909 15910 15911 15912 15913 15914 15915 15916 15917 15918 15919 15920 15921 15922 15923 15924 15925 15926 15927 15928 15929 15930 15931 15932 15933 15934 15935 15936 15937 15938 15939 15940 15941 15942 15943 15944 15945 15946 15947 15948 15949 15950 15951 15952 15953 15954 15955 15956 15957 15958 15959 15960 15961 15962 15963 15964 15965 15966 15967 15968 15969 15970 15971 15972 15973 15974 15975 15976 15977 15978 15979 15980 15981 15982 15983 15984 15985 15986 15987 15988 15989 15990 15991 15992 15993 15994 15995 15996 15997 15998 15999 16000 16001 16002 16003 16004 16005 16006 16007 16008 16009 16010 16011 16012 16013 16014 16015 16016 16017 16018 16019 16020 16021 16022 16023 16024 16025 16026 16027 16028 16029 16030 16031 16032 16033 16034 16035 16036 16037 16038 16039 16040 16041 16042 16043 16044 16045 16046 16047 16048 16049 16050 16051 16052 16053 16054 16055 16056 16057 16058 16059 16060 16061 16062 16063 16064 16065 16066 16067 16068 16069 16070 16071 16072 16073 16074 16075 16076 16077 16078 16079 16080 16081 16082 16083 16084 16085 16086 16087 16088 16089 16090 16091 16092 16093 16094 16095 16096 16097 16098 16099 16100 16101 16102 16103 16104 16105 16106 16107 16108 16109 16110 16111 16112 16113 16114 16115 16116 16117 16118 16119 16120 16121 16122 16123 16124 16125 16126 16127 16128 16129 16130 16131 16132 16133 16134 16135 16136 16137 16138 16139 16140 16141 16142 16143 16144 16145 16146 16147 16148 16149 16150 16151 16152 16153 16154 16155 16156 16157 16158 16159 16160 16161 16162 16163 16164 16165 16166 16167 16168 16169 16170 16171 16172 16173 16174 16175 16176 16177 16178 16179 16180 16181 16182 16183 16184 16185 16186 16187 16188 16189 16190 16191 16192 16193 16194 16195 16196 16197 16198 16199 16200 16201 16202 16203 16204 16205 16206 16207 16208 16209 16210 16211 16212 16213 16214 16215 16216 16217 16218 16219 16220 16221 16222 16223 16224 16225 16226 16227 16228 16229 16230 16231 16232 16233 16234 16235 16236 16237 16238 16239 16240 16241 16242 16243 16244 16245 16246 16247 16248 16249 16250 16251 16252 16253 16254 16255 16256 16257 16258 16259 16260 16261 16262 16263 16264 16265 16266 16267 16268 16269 16270 16271 16272 16273 16274 16275 16276 16277 16278 16279 16280 16281 16282 16283 16284 16285 16286 16287 16288 16289 16290 16291 16292 16293 16294 16295 16296 16297 16298 16299 16300 16301 16302 16303 16304 16305 16306 16307 16308 16309 16310 16311 16312 16313 16314 16315 16316 16317 16318 16319 16320 16321 16322 16323 16324 16325 16326 16327 16328 16329 16330 16331 16332 16333 16334 16335 16336 16337 16338 16339 16340 16341 16342 16343 16344 16345 16346 16347 16348 16349 16350 16351 16352 16353 16354 16355 16356 16357 16358 16359 16360 16361 16362 16363 16364 16365 16366 16367 16368 16369 16370 16371 16372 16373 16374 16375 16376 16377 16378 16379 16380 16381 16382 16383 16384 16385 16386 16387 16388 16389 16390 16391 16392 16393 16394 16395 16396 16397 16398 16399 16400 16401 16402 16403 16404 16405 16406 16407 16408 16409 16410 16411 16412 16413 16414 16415 16416 16417 16418 16419 16420 16421 16422 16423 16424 16425 16426 16427 16428 16429 16430 16431 16432 16433 16434 16435 16436 16437 16438 16439 16440 16441 16442 16443 16444 16445 16446 16447 16448 16449 16450 16451 16452 16453 16454 16455 16456 16457 16458 16459 16460 16461 16462 16463 16464 16465 16466 16467 16468 16469 16470 16471 16472 16473 16474 16475 16476 16477 16478 16479 16480 16481 16482 16483 16484 16485 16486 16487 16488 16489 16490 16491 16492 16493 16494 16495 16496 16497 16498 16499 16500 16501 16502 16503 16504 16505 16506 16507 16508 16509 16510 16511 16512 16513 16514 16515 16516 16517 16518 16519 16520 16521 16522 16523 16524 16525 16526 16527 16528 16529 16530 16531 16532 16533 16534 16535 16536 16537 16538 16539 16540 16541 16542 16543 16544 16545 16546 16547 16548 16549 16550 16551 16552 16553 16554 16555 16556 16557 16558 16559 16560 16561 16562 16563 16564 16565 16566 16567 16568 16569 16570 16571 16572 16573 16574 16575 16576 16577 16578 16579 16580 16581 16582 16583 16584 16585 16586 16587 16588 16589 16590 16591 16592 16593 16594 16595 16596 16597 16598 16599 16600 16601 16602 16603 16604 16605 16606 16607 16608 16609 16610 16611 16612 16613 16614 16615 16616 16617 16618 16619 16620 16621 16622 16623 16624 16625 16626 16627 16628 16629 16630 16631 16632 16633 16634 16635 16636 16637 16638 16639 16640 16641 16642 16643 16644 16645 16646 16647 16648 16649 16650 16651 16652 16653 16654 16655 16656 16657 16658 16659 16660 16661 16662 16663 16664 16665 16666 16667 16668 16669 16670 16671 16672 16673 16674 16675 16676 16677 16678 16679 16680 16681 16682 16683 16684 16685 16686 16687 16688 16689 16690 16691 16692 16693 16694 16695 16696 16697 16698 16699 16700 16701 16702 16703 16704 16705 16706 16707 16708 16709 16710 16711 16712 16713 16714 16715 16716 16717 16718 16719 16720 16721 16722 16723 16724 16725 16726 16727 16728 16729 16730 16731 16732 16733 16734 16735 16736 16737 16738 16739 16740 16741 16742 16743 16744 16745 16746 16747 16748 16749 16750 16751 16752 16753 16754 16755 16756 16757 16758 16759 16760 16761 16762 16763 16764 16765 16766 16767 16768 16769 16770 16771 16772 16773 16774 16775 16776 16777 16778 16779 16780 16781 16782 16783 16784 16785 16786 16787 16788 16789 16790 16791 16792 16793 16794 16795 16796 16797 16798 16799 16800 16801 16802 16803 16804 16805 16806 16807 16808 16809 16810 16811 16812 16813 16814 16815 16816 16817 16818 16819 16820 16821 16822 16823 16824 16825 16826 16827 16828 16829 16830 16831 16832 16833 16834 16835 16836 16837 16838 16839 16840 16841 16842 16843 16844 16845 16846 16847 16848 16849 16850 16851 16852 16853 16854 16855 16856 16857 16858 16859 16860 16861 16862 16863 16864 16865 16866 16867 16868 16869 16870 16871 16872 16873 16874 16875 16876 16877 16878 16879 16880 16881 16882 16883 16884 16885 16886 16887 16888 16889 16890 16891 16892 16893 16894 16895 16896 16897 16898 16899 16900 16901 16902 16903 16904 16905 16906 16907 16908 16909 16910 16911 16912 16913 16914 16915 16916 16917 16918 16919 16920 16921 16922 16923 16924 16925 16926 16927 16928 16929 16930 16931 16932 16933 16934 16935 16936 16937 16938 16939 16940 16941 16942 16943 16944 16945 16946 16947 16948 16949 16950 16951 16952 16953 16954 16955 16956 16957 16958 16959 16960 16961 16962 16963 16964 16965 16966 16967 16968 16969 16970 16971 16972 16973 16974 16975 16976 16977 16978 16979 16980 16981 16982 16983 16984 16985 16986 16987 16988 16989 16990 16991 16992 16993 16994 16995 16996 16997 16998 16999 17000 17001 17002 17003 17004 17005 17006 17007 17008 17009 17010 17011 17012 17013 17014 17015 17016 17017 17018 17019 17020 17021 17022 17023 17024 17025 17026 17027 17028 17029 17030 17031 17032 17033 17034 17035 17036 17037 17038 17039 17040 17041 17042 17043 17044 17045 17046 17047 17048 17049 17050 17051 17052 17053 17054 17055 17056 17057 17058 17059 17060 17061 17062 17063 17064 17065 17066 17067 17068 17069 17070 17071 17072 17073 17074 17075 17076 17077 17078 17079 17080 17081 17082 17083 17084 17085 17086 17087 17088 17089 17090 17091 17092 17093 17094 17095 17096 17097 17098 17099 17100 17101 17102 17103 17104 17105 17106 17107 17108 17109 17110 17111 17112 17113 17114 17115 17116 17117 17118 17119 17120 17121 17122 17123 17124 17125 17126 17127 17128 17129 17130 17131 17132 17133 17134 17135 17136 17137 17138 17139 17140 17141 17142 17143 17144 17145 17146 17147 17148 17149 17150 17151 17152 17153 17154 17155 17156 17157 17158 17159 17160 17161 17162 17163 17164 17165 17166 17167 17168 17169 17170 17171 17172 17173 17174 17175 17176 17177 17178 17179 17180 17181 17182 17183 17184 17185 17186 17187 17188 17189 17190 17191 17192 17193 17194 17195 17196 17197 17198 17199 17200 17201 17202 17203 17204 17205 17206 17207 17208 17209 17210 17211 17212 17213 17214 17215 17216 17217 17218 17219 17220 17221 17222 17223 17224 17225 17226 17227 17228 17229 17230 17231 17232 17233 17234 17235 17236 17237 17238 17239 17240 17241 17242 17243 17244 17245 17246 17247 17248 17249 17250 17251 17252 17253 17254 17255 17256 17257 17258 17259 17260 17261 17262 17263 17264 17265 17266 17267 17268 17269 17270 17271 17272 17273 17274 17275 17276 17277 17278 17279 17280 17281 17282 17283 17284 17285 17286 17287 17288 17289 17290 17291 17292 17293 17294 17295 17296 17297 17298 17299 17300 17301 17302 17303 17304 17305 17306 17307 17308 17309 17310 17311 17312 17313 17314 17315 17316 17317 17318 17319 17320 17321 17322 17323 17324 17325 17326 17327 17328 17329 17330 17331 17332 17333 17334 17335 17336 17337 17338 17339 17340 17341 17342 17343 17344 17345 17346 17347 17348 17349 17350 17351 17352 17353 17354 17355 17356 17357 17358 17359 17360 17361 17362 17363 17364 17365 17366 17367 17368 17369 17370 17371 17372 17373 17374 17375 17376 17377 17378 17379 17380 17381 17382 17383 17384 17385 17386 17387 17388 17389 17390 17391 17392 17393 17394 17395 17396 17397 17398 17399 17400 17401 17402 17403 17404 17405 17406 17407 17408 17409 17410 17411 17412 17413 17414 17415 17416 17417 17418 17419 17420 17421 17422 17423 17424 17425 17426 17427 17428 17429 17430 17431 17432 17433 17434 17435 17436 17437 17438 17439 17440 17441 17442 17443 17444 17445 17446 17447 17448 17449 17450 17451 17452 17453 17454 17455 17456 17457 17458 17459 17460 17461 17462 17463 17464 17465 17466 17467 17468 17469 17470 17471 17472 17473 17474 17475 17476 17477 17478 17479 17480 17481 17482 17483 17484 17485 17486 17487 17488 17489 17490 17491 17492 17493 17494 17495 17496 17497 17498 17499 17500 17501 17502 17503 17504 17505 17506 17507 17508 17509 17510 17511 17512 17513 17514 17515 17516 17517 17518 17519 17520 17521 17522 17523 17524 17525 17526 17527 17528 17529 17530 17531 17532 17533 17534 17535 17536 17537 17538 17539 17540 17541 17542 17543 17544 17545 17546 17547 17548 17549 17550 17551 17552 17553 17554 17555 17556 17557 17558 17559 17560 17561 17562 17563 17564 17565 17566 17567 17568 17569 17570 17571 17572 17573 17574 17575 17576 17577 17578 17579 17580 17581 17582 17583 17584 17585 17586 17587 17588 17589 17590 17591 17592 17593 17594 17595 17596 17597 17598 17599 17600 17601 17602 17603 17604 17605 17606 17607 17608 17609 17610 17611 17612 17613 17614 17615 17616 17617 17618 17619 17620 17621 17622 17623 17624 17625 17626 17627 17628 17629 17630 17631 17632 17633 17634 17635 17636 17637 17638 17639 17640 17641 17642 17643 17644 17645 17646 17647 17648 17649 17650 17651 17652 17653 17654 17655 17656 17657 17658 17659 17660 17661 17662 17663 17664 17665 17666 17667 17668 17669 17670 17671 17672 17673 17674 17675 17676 17677 17678 17679 17680 17681 17682 17683 17684 17685 17686 17687 17688 17689 17690 17691 17692 17693 17694 17695 17696 17697 17698 17699 17700 17701 17702 17703 17704 17705 17706 17707 17708 17709 17710 17711 17712 17713 17714 17715 17716 17717 17718 17719 17720 17721 17722 17723 17724 17725 17726 17727 17728 17729 17730 17731 17732 17733 17734 17735 17736 17737 17738 17739 17740 17741 17742 17743 17744 17745 17746 17747 17748 17749 17750 17751 17752 17753 17754 17755 17756 17757 17758 17759 17760 17761 17762 17763 17764 17765 17766 17767 17768 17769 17770 17771 17772 17773 17774 17775 17776 17777 17778 17779 17780 17781 17782 17783 17784 17785 17786 17787 17788 17789 17790 17791 17792 17793 17794 17795 17796 17797 17798 17799 17800 17801 17802 17803 17804 17805 17806 17807 17808 17809 17810 17811 17812 17813 17814 17815 17816 17817 17818 17819 17820 17821 17822 17823 17824 17825 17826 17827 17828 17829 17830 17831 17832 17833 17834 17835 17836 17837 17838 17839 17840 17841 17842 17843 17844 17845 17846 17847 17848 17849 17850 17851 17852 17853 17854 17855 17856 17857 17858 17859 17860 17861 17862 17863 17864 17865 17866 17867 17868 17869 17870 17871 17872 17873 17874 17875 17876 17877 17878 17879 17880 17881 17882 17883 17884 17885 17886 17887 17888 17889 17890 17891 17892 17893 17894 17895 17896 17897 17898 17899 17900 17901 17902 17903 17904 17905 17906 17907 17908 17909 17910 17911 17912 17913 17914 17915 17916 17917 17918 17919 17920 17921 17922 17923 17924 17925 17926 17927 17928 17929 17930 17931 17932 17933 17934 17935 17936 17937 17938 17939 17940 17941 17942 17943 17944 17945 17946 17947 17948 17949 17950 17951 17952 17953 17954 17955 17956 17957 17958 17959 17960 17961 17962 17963 17964 17965 17966 17967 17968 17969 17970 17971 17972 17973 17974 17975 17976 17977 17978 17979 17980 17981 17982 17983 17984 17985 17986 17987 17988 17989 17990 17991 17992 17993 17994 17995 17996 17997 17998 17999 18000 18001 18002 18003 18004 18005 18006 18007 18008 18009 18010 18011 18012 18013 18014 18015 18016 18017 18018 18019 18020 18021 18022 18023 18024 18025 18026 18027 18028 18029 18030 18031 18032 18033 18034 18035 18036 18037 18038 18039 18040 18041 18042 18043 18044 18045 18046 18047 18048 18049 18050 18051 18052 18053 18054 18055 18056 18057 18058 18059 18060 18061 18062 18063 18064 18065 18066 18067 18068 18069 18070 18071 18072 18073 18074 18075 18076 18077 18078 18079 18080 18081 18082 18083 18084 18085 18086 18087 18088 18089 18090 18091 18092 18093 18094 18095 18096 18097 18098 18099 18100 18101 18102 18103 18104 18105 18106 18107 18108 18109 18110 18111 18112 18113 18114 18115 18116 18117 18118 18119 18120 18121 18122 18123 18124 18125 18126 18127 18128 18129 18130 18131 18132 18133 18134 18135 18136 18137 18138 18139 18140 18141 18142 18143 18144 18145 18146 18147 18148 18149 18150 18151 18152 18153 18154 18155 18156 18157 18158 18159 18160 18161 18162 18163 18164 18165 18166 18167 18168 18169 18170 18171 18172 18173 18174 18175 18176 18177 18178 18179 18180 18181 18182 18183 18184 18185 18186 18187 18188 18189 18190 18191 18192 18193 18194 18195 18196 18197 18198 18199 18200 18201 18202 18203 18204 18205 18206 18207 18208 18209 18210 18211 18212 18213 18214 18215 18216 18217 18218 18219 18220 18221 18222 18223 18224 18225 18226 18227 18228 18229 18230 18231 18232 18233 18234 18235 18236 18237 18238 18239 18240 18241 18242 18243 18244 18245 18246 18247 18248 18249 18250 18251 18252 18253 18254 18255 18256 18257 18258 18259 18260 18261 18262 18263 18264 18265 18266 18267 18268 18269 18270 18271 18272 18273 18274 18275 18276 18277 18278 18279 18280 18281 18282 18283 18284 18285 18286 18287 18288 18289 18290 18291 18292 18293 18294 18295 18296 18297 18298 18299 18300 18301 18302 18303 18304 18305 18306 18307 18308 18309 18310 18311 18312 18313 18314 18315 18316 18317 18318 18319 18320 18321 18322 18323 18324 18325 18326 18327 18328 18329 18330 18331 18332 18333 18334 18335 18336 18337 18338 18339 18340 18341 18342 18343 18344 18345 18346 18347 18348 18349 18350 18351 18352 18353 18354 18355 18356 18357 18358 18359 18360 18361 18362 18363 18364 18365 18366 18367 18368 18369 18370 18371 18372 18373 18374 18375 18376 18377 18378 18379 18380 18381 18382 18383 18384 18385 18386 18387 18388 18389 18390 18391 18392 18393 18394 18395 18396 18397 18398 18399 18400 18401 18402 18403 18404 18405 18406 18407 18408 18409 18410 18411 18412 18413 18414 18415 18416 18417 18418 18419 18420 18421 18422 18423 18424 18425 18426 18427 18428 18429 18430 18431 18432 18433 18434 18435 18436 18437 18438 18439 18440 18441 18442 18443 18444 18445 18446 18447 18448 18449 18450 18451 18452 18453 18454 18455 18456 18457 18458 18459 18460 18461 18462 18463 18464 18465 18466 18467 18468 18469 18470 18471 18472 18473 18474 18475 18476 18477 18478 18479 18480 18481 18482 18483 18484 18485 18486 18487 18488 18489 18490 18491 18492 18493 18494 18495 18496 18497 18498 18499 18500 18501 18502 18503 18504 18505 18506 18507 18508 18509 18510 18511 18512 18513 18514 18515 18516 18517 18518 18519 18520 18521 18522 18523 18524 18525 18526 18527 18528 18529 18530 18531 18532 18533 18534 18535 18536 18537 18538 18539 18540 18541 18542 18543 18544 18545 18546 18547 18548 18549 18550 18551 18552 18553 18554 18555 18556 18557 18558 18559 18560 18561 18562 18563 18564 18565 18566 18567 18568 18569 18570 18571 18572 18573 18574 18575 18576 18577 18578 18579 18580 18581 18582 18583 18584 18585 18586 18587 18588 18589 18590 18591 18592 18593 18594 18595 18596 18597 18598 18599 18600 18601 18602 18603 18604 18605 18606 18607 18608 18609 18610 18611 18612 18613 18614 18615 18616 18617 18618 18619 18620 18621 18622 18623 18624 18625 18626 18627 18628 18629 18630 18631 18632 18633 18634 18635 18636 18637 18638 18639 18640 18641 18642 18643 18644 18645 18646 18647 18648 18649 18650 18651 18652 18653 18654 18655 18656 18657 18658 18659 18660 18661 18662 18663 18664 18665 18666 18667 18668 18669 18670 18671 18672 18673 18674 18675 18676 18677 18678 18679 18680 18681 18682 18683 18684 18685 18686 18687 18688 18689 18690 18691 18692 18693 18694 18695 18696 18697 18698 18699 18700 18701 18702 18703 18704 18705 18706 18707 18708 18709 18710 18711 18712 18713 18714 18715 18716 18717 18718 18719 18720 18721 18722 18723 18724 18725 18726 18727 18728 18729 18730 18731 18732 18733 18734 18735 18736 18737 18738 18739 18740 18741 18742 18743 18744 18745 18746 18747 18748 18749 18750 18751 18752 18753 18754 18755 18756 18757 18758 18759 18760 18761 18762 18763 18764 18765 18766 18767 18768 18769 18770 18771 18772 18773 18774 18775 18776 18777 18778 18779 18780 18781 18782 18783 18784 18785 18786 18787 18788 18789 18790 18791 18792 18793 18794 18795 18796 18797 18798 18799 18800 18801 18802 18803 18804 18805 18806 18807 18808 18809 18810 18811 18812 18813 18814 18815 18816 18817 18818 18819 18820 18821 18822 18823 18824 18825 18826 18827 18828 18829 18830 18831 18832 18833 18834 18835 18836 18837 18838 18839 18840 18841 18842 18843 18844 18845 18846 18847 18848 18849 18850 18851 18852 18853 18854 18855 18856 18857 18858 18859 18860 18861 18862 18863 18864 18865 18866 18867 18868 18869 18870 18871 18872 18873 18874 18875 18876 18877 18878 18879 18880 18881 18882 18883 18884 18885 18886 18887 18888 18889 18890 18891 18892 18893 18894 18895 18896 18897 18898 18899 18900 18901 18902 18903 18904 18905 18906 18907 18908 18909 18910 18911 18912 18913 18914 18915 18916 18917 18918 18919 18920 18921 18922 18923 18924 18925 18926 18927 18928 18929 18930 18931 18932 18933 18934 18935 18936 18937 18938 18939 18940 18941 18942 18943 18944 18945 18946 18947 18948 18949 18950 18951 18952 18953 18954 18955 18956 18957 18958 18959 18960 18961 18962 18963 18964 18965 18966 18967 18968 18969 18970 18971 18972 18973 18974 18975 18976 18977 18978 18979 18980 18981 18982 18983 18984 18985 18986 18987 18988 18989 18990 18991 18992 18993 18994 18995 18996 18997 18998 18999 19000 19001 19002 19003 19004 19005 19006 19007 19008 19009 19010 19011 19012 19013 19014 19015 19016 19017 19018 19019 19020 19021 19022 19023 19024 19025 19026 19027 19028 19029 19030 19031 19032 19033 19034 19035 19036 19037 19038 19039 19040 19041 19042 19043 19044 19045 19046 19047 19048 19049 19050 19051 19052 19053 19054 19055 19056 19057 19058 19059 19060 19061 19062 19063 19064 19065 19066 19067 19068 19069 19070 19071 19072 19073 19074 19075 19076 19077 19078 19079 19080 19081 19082 19083 19084 19085 19086 19087 19088 19089 19090 19091 19092 19093 19094 19095 19096 19097 19098 19099 19100 19101 19102 19103 19104 19105 19106 19107 19108 19109 19110 19111 19112 19113 19114 19115 19116 19117 19118 19119 19120 19121 19122 19123 19124 19125 19126 19127 19128 19129 19130 19131 19132 19133 19134 19135 19136 19137 19138 19139 19140 19141 19142 19143 19144 19145 19146 19147 19148 19149 19150 19151 19152 19153 19154 19155 19156 19157 19158 19159 19160 19161 19162 19163 19164 19165 19166 19167 19168 19169 19170 19171 19172 19173 19174 19175 19176 19177 19178 19179 19180 19181 19182 19183 19184 19185 19186 19187 19188 19189 19190 19191 19192 19193 19194 19195 19196 19197 19198 19199 19200 19201 19202 19203 19204 19205 19206 19207 19208 19209 19210 19211 19212 19213 19214 19215 19216 19217 19218 19219 19220 19221 19222 19223 19224 19225 19226 19227 19228 19229 19230 19231 19232 19233 19234 19235 19236 19237 19238 19239 19240 19241 19242 19243 19244 19245 19246 19247 19248 19249 19250 19251 19252 19253 19254 19255 19256 19257 19258 19259 19260 19261 19262 19263 19264 19265 19266 19267 19268 19269 19270 19271 19272 19273 19274 19275 19276 19277 19278 19279 19280 19281 19282 19283 19284 19285 19286 19287 19288 19289 19290 19291 19292 19293 19294 19295 19296 19297 19298 19299 19300 19301 19302 19303 19304 19305 19306 19307 19308 19309 19310 19311 19312 19313 19314 19315 19316 19317 19318 19319 19320 19321 19322 19323 19324 19325 19326 19327 19328 19329 19330 19331 19332 19333 19334 19335 19336 19337 19338 19339 19340 19341 19342 19343 19344 19345 19346 19347 19348 19349 19350 19351 19352 19353 19354 19355 19356 19357 19358 19359 19360 19361 19362 19363 19364 19365 19366 19367 19368 19369 19370 19371 19372 19373 19374 19375 19376 19377 19378 19379 19380 19381 19382 19383 19384 19385 19386 19387 19388 19389 19390 19391 19392 19393 19394 19395 19396 19397 19398 19399 19400 19401 19402 19403 19404 19405 19406 19407 19408 19409 19410 19411 19412 19413 19414 19415 19416 19417 19418 19419 19420 19421 19422 19423 19424 19425 19426 19427 19428 19429 19430 19431 19432 19433 19434 19435 19436 19437 19438 19439 19440 19441 19442 19443 19444 19445 19446 19447 19448 19449 19450 19451 19452 19453 19454 19455 19456 19457 19458 19459 19460 19461 19462 19463 19464 19465 19466 19467 19468 19469 19470 19471 19472 19473 19474 19475 19476 19477 19478 19479 19480 19481 19482 19483 19484 19485 19486 19487 19488 19489 19490 19491 19492 19493 19494 19495 19496 19497 19498 19499 19500 19501 19502 19503 19504 19505 19506 19507 19508 19509 19510 19511 19512 19513 19514 19515 19516 19517 19518 19519 19520 19521 19522 19523 19524 19525 19526 19527 19528 19529 19530 19531 19532 19533 19534 19535 19536 19537 19538 19539 19540 19541 19542 19543 19544 19545 19546 19547 19548 19549 19550 19551 19552 19553 19554 19555 19556 19557 19558 19559 19560 19561 19562 19563 19564 19565 19566 19567 19568 19569 19570 19571 19572 19573 19574 19575 19576 19577 19578 19579 19580 19581 19582 19583 19584 19585 19586 19587 19588 19589 19590 19591 19592 19593 19594 19595 19596 19597 19598 19599 19600 19601 19602 19603 19604 19605 19606 19607 19608 19609 19610 19611 19612 19613 19614 19615 19616 19617 19618 19619 19620 19621 19622 19623 19624 19625 19626 19627 19628 19629 19630 19631 19632 19633 19634 19635 19636 19637 19638 19639 19640 19641 19642 19643 19644 19645 19646 19647 19648 19649 19650 19651 19652 19653 19654 19655 19656 19657 19658 19659 19660 19661 19662 19663 19664 19665 19666 19667 19668 19669 19670 19671 19672 19673 19674 19675 19676 19677 19678 19679 19680 19681 19682 19683 19684 19685 19686 19687 19688 19689 19690 19691 19692 19693 19694 19695 19696 19697 19698 19699 19700 19701 19702 19703 19704 19705 19706 19707 19708 19709 19710 19711 19712 19713 19714 19715 19716 19717 19718 19719 19720 19721 19722 19723 19724 19725 19726 19727 19728 19729 19730 19731 19732 19733 19734 19735 19736 19737 19738 19739 19740 19741 19742 19743 19744 19745 19746 19747 19748 19749 19750 19751 19752 19753 19754 19755 19756 19757 19758 19759 19760 19761 19762 19763 19764 19765 19766 19767 19768 19769 19770 19771 19772 19773 19774 19775 19776 19777 19778 19779 19780 19781 19782 19783 19784 19785 19786 19787 19788 19789 19790 19791 19792 19793 19794 19795 19796 19797 19798 19799 19800 19801 19802 19803 19804 19805 19806 19807 19808 19809 19810 19811 19812 19813 19814 19815 19816 19817 19818 19819 19820 19821 19822 19823 19824 19825 19826 19827 19828 19829 19830 19831 19832 19833 19834 19835 19836 19837 19838 19839 19840 19841 19842 19843 19844 19845 19846 19847 19848 19849 19850 19851 19852 19853 19854 19855 19856 19857 19858 19859 19860 19861 19862 19863 19864 19865 19866 19867 19868 19869 19870 19871 19872 19873 19874 19875 19876 19877 19878 19879 19880 19881 19882 19883 19884 19885 19886 19887 19888 19889 19890 19891 19892 19893 19894 19895 19896 19897 19898 19899 19900 19901 19902 19903 19904 19905 19906 19907 19908 19909 19910 19911 19912 19913 19914 19915 19916 19917 19918 19919 19920 19921 19922 19923 19924 19925 19926 19927 19928 19929 19930 19931 19932 19933 19934 19935 19936 19937 19938 19939 19940 19941 19942 19943 19944 19945 19946 19947 19948 19949 19950 19951 19952 19953 19954 19955 19956 19957 19958 19959 19960 19961 19962 19963 19964 19965 19966 19967 19968 19969 19970 19971 19972 19973 19974 19975 19976 19977 19978 19979 19980 19981 19982 19983 19984 19985 19986 19987 19988 19989 19990 19991 19992 19993 19994 19995 19996 19997 19998 19999 20000 20001 20002 20003 20004 20005 20006 20007 20008 20009 20010 20011 20012 20013 20014 20015 20016 20017 20018 20019 20020 20021 20022 20023 20024 20025 20026 20027 20028 20029 20030 20031 20032 20033 20034 20035 20036 20037 20038 20039 20040 20041 20042 20043 20044 20045 20046 20047 20048 20049 20050 20051 20052 20053 20054 20055 20056 20057 20058 20059 20060 20061 20062 20063 20064 20065 20066 20067 20068 20069 20070 20071 20072 20073 20074 20075 20076 20077 20078 20079 20080 20081 20082 20083 20084 20085 20086 20087 20088 20089 20090 20091 20092 20093 20094 20095 20096 20097 20098 20099 20100 20101 20102 20103 20104 20105 20106 20107 20108 20109 20110 20111 20112 20113 20114 20115 20116 20117 20118 20119 20120 20121 20122 20123 20124 20125 20126 20127 20128 20129 20130 20131 20132 20133 20134 20135 20136 20137 20138 20139 20140 20141 20142 20143 20144 20145 20146 20147 20148 20149 20150 20151 20152 20153 20154 20155 20156 20157 20158 20159 20160 20161 20162 20163 20164 20165 20166 20167 20168 20169 20170 20171 20172 20173 20174 20175 20176 20177 20178 20179 20180 20181 20182 20183 20184 20185 20186 20187 20188 20189 20190 20191 20192 20193 20194 20195 20196 20197 20198 20199 20200 20201 20202 20203 20204 20205 20206 20207 20208 20209 20210 20211 20212 20213 20214 20215 20216 20217 20218 20219 20220 20221 20222 20223 20224 20225 20226 20227 20228 20229 20230 20231 20232 20233 20234 20235 20236 20237 20238 20239 20240 20241 20242 20243 20244 20245 20246 20247 20248 20249 20250 20251 20252 20253 20254 20255 20256 20257 20258 20259 20260 20261 20262 20263 20264 20265 20266 20267 20268 20269 20270 20271 20272 20273 20274 20275 20276 20277 20278 20279 20280 20281 20282 20283 20284 20285 20286 20287 20288 20289 20290 20291 20292 20293 20294 20295 20296 20297 20298 20299 20300 20301 20302 20303 20304 20305 20306 20307 20308 20309 20310 20311 20312 20313 20314 20315 20316 20317 20318 20319 20320 20321 20322 20323 20324 20325 20326 20327 20328 20329 20330 20331 20332 20333 20334 20335 20336 20337 20338 20339 20340 20341 20342 20343 20344 20345 20346 20347 20348 20349 20350 20351 20352 20353 20354 20355 20356 20357 20358 20359 20360 20361 20362 20363 20364 20365 20366 20367 20368 20369 20370 20371 20372 20373 20374 20375 20376 20377 20378 20379 20380 20381 20382 20383 20384 20385 20386 20387 20388 20389 20390 20391 20392 20393 20394 20395 20396 20397 20398 20399 20400 20401 20402 20403 20404 20405 20406 20407 20408 20409 20410 20411 20412 20413 20414 20415 20416 20417 20418 20419 20420 20421 20422 20423 20424 20425 20426 20427 20428 20429 20430 20431 20432 20433 20434 20435 20436 20437 20438 20439 20440 20441 20442 20443 20444 20445 20446 20447 20448 20449 20450 20451 20452 20453 20454 20455 20456 20457 20458 20459 20460 20461 20462 20463 20464 20465 20466 20467 20468 20469 20470 20471 20472 20473 20474 20475 20476 20477 20478 20479 20480 20481 20482 20483 20484 20485 20486 20487 20488 20489 20490 20491 20492 20493 20494 20495 20496 20497 20498 20499 20500 20501 20502 20503 20504 20505 20506 20507 20508 20509 20510 20511 20512 20513 20514 20515 20516 20517 20518 20519 20520 20521 20522 20523 20524 20525 20526 20527 20528 20529 20530 20531 20532 20533 20534 20535 20536 20537 20538 20539 20540 20541 20542 20543 20544 20545 20546 20547 20548 20549 20550 20551 20552 20553 20554 20555 20556 20557 20558 20559 20560 20561 20562 20563 20564 20565 20566 20567 20568 20569 20570 20571 20572 20573 20574 20575 20576 20577 20578 20579 20580 20581 20582 20583 20584 20585 20586 20587 20588 20589 20590 20591 20592 20593 20594 20595 20596 20597 20598 20599 20600 20601 20602 20603 20604 20605 20606 20607 20608 20609 20610 20611 20612 20613 20614 20615 20616 20617 20618 20619 20620 20621 20622 20623 20624 20625 20626 20627 20628 20629 20630 20631 20632 20633 20634 20635 20636 20637 20638 20639 20640 20641 20642 20643 20644 20645 20646 20647 20648 20649 20650 20651 20652 20653 20654 20655 20656 20657 20658 20659 20660 20661 20662 20663 20664 20665 20666 20667 20668 20669 20670 20671 20672 20673 20674 20675 20676 20677 20678 20679 20680 20681 20682 20683 20684 20685 20686 20687 20688 20689 20690 20691 20692 20693 20694 20695 20696 20697 20698 20699 20700 20701 20702 20703 20704 20705 20706 20707 20708 20709 20710 20711 20712 20713 20714 20715 20716 20717 20718 20719 20720 20721 20722 20723 20724 20725 20726 20727 20728 20729 20730 20731 20732 20733 20734 20735 20736 20737 20738 20739 20740 20741 20742 20743 20744 20745 20746 20747 20748 20749 20750 20751 20752 20753 20754 20755 20756 20757 20758 20759 20760 20761 20762 20763 20764 20765 20766 20767 20768 20769 20770 20771 20772 20773 20774 20775 20776 20777 20778 20779 20780 20781 20782 20783 20784 20785 20786 20787 20788 20789 20790 20791 20792 20793 20794 20795 20796 20797 20798 20799 20800 20801 20802 20803 20804 20805 20806 20807 20808 20809 20810 20811 20812 20813 20814 20815 20816 20817 20818 20819 20820 20821 20822 20823 20824 20825 20826 20827 20828 20829 20830 20831 20832 20833 20834 20835 20836 20837 20838 20839 20840 20841 20842 20843 20844 20845 20846 20847 20848 20849 20850 20851 20852 20853 20854 20855 20856 20857 20858 20859 20860 20861 20862 20863 20864 20865 20866 20867 20868 20869 20870 20871 20872 20873 20874 20875 20876 20877 20878 20879 20880 20881 20882 20883 20884 20885 20886 20887 20888 20889 20890 20891 20892 20893 20894 20895 20896 20897 20898 20899 20900 20901 20902 20903 20904 20905 20906 20907 20908 20909 20910 20911 20912 20913 20914 20915 20916 20917 20918 20919 20920 20921 20922 20923 20924 20925 20926 20927 20928 20929 20930 20931 20932 20933 20934 20935 20936 20937 20938 20939 20940 20941 20942 20943 20944 20945 20946 20947 20948 20949 20950 20951 20952 20953 20954 20955 20956 20957 20958 20959 20960 20961 20962 20963 20964 20965 20966 20967 20968 20969 20970 20971 20972 20973 20974 20975 20976 20977 20978 20979 20980 20981 20982 20983 20984 20985 20986 20987 20988 20989 20990 20991 20992 20993 20994 20995 20996 20997 20998 20999 21000 21001 21002 21003 21004 21005 21006 21007 21008 21009 21010 21011 21012 21013 21014 21015 21016 21017 21018 21019 21020 21021 21022 21023 21024 21025 21026 21027 21028 21029 21030 21031 21032 21033 21034 21035 21036 21037 21038 21039 21040 21041 21042 21043 21044 21045 21046 21047 21048 21049 21050 21051 21052 21053 21054 21055 21056 21057 21058 21059 21060 21061 21062 21063 21064 21065 21066 21067 21068 21069 21070 21071 21072 21073 21074 21075 21076 21077 21078 21079 21080 21081 21082 21083 21084 21085 21086 21087 21088 21089 21090 21091 21092 21093 21094 21095 21096 21097 21098 21099 21100 21101 21102 21103 21104 21105 21106 21107 21108 21109 21110 21111 21112 21113 21114 21115 21116 21117 21118 21119 21120 21121 21122 21123 21124 21125 21126 21127 21128 21129 21130 21131 21132 21133 21134 21135 21136 21137 21138 21139 21140 21141 21142 21143 21144 21145 21146 21147 21148 21149 21150 21151 21152 21153 21154 21155 21156 21157 21158 21159 21160 21161 21162 21163 21164 21165 21166 21167 21168 21169 21170 21171 21172 21173 21174 21175 21176 21177 21178 21179 21180 21181 21182 21183 21184 21185 21186 21187 21188 21189 21190 21191 21192 21193 21194 21195 21196 21197 21198 21199 21200 21201 21202 21203 21204 21205 21206 21207 21208 21209 21210 21211 21212 21213 21214 21215 21216 21217 21218 21219 21220 21221 21222 21223 21224 21225 21226 21227 21228 21229 21230 21231 21232 21233 21234 21235 21236 21237 21238 21239 21240 21241 21242 21243 21244 21245 21246 21247 21248 21249 21250 21251 21252 21253 21254 21255 21256 21257 21258 21259 21260 21261 21262 21263 21264 21265 21266 21267 21268 21269 21270 21271 21272 21273 21274 21275 21276 21277 21278 21279 21280 21281 21282 21283 21284 21285 21286 21287 21288 21289 21290 21291 21292 21293 21294 21295 21296 21297 21298 21299 21300 21301 21302 21303 21304 21305 21306 21307 21308 21309 21310 21311 21312 21313 21314 21315 21316 21317 21318 21319 21320 21321 21322 21323 21324 21325 21326 21327 21328 21329 21330 21331 21332 21333 21334 21335 21336 21337 21338 21339 21340 21341 21342 21343 21344 21345 21346 21347 21348 21349 21350 21351 21352 21353 21354 21355 21356 21357 21358 21359 21360 21361 21362 21363 21364 21365 21366 21367 21368 21369 21370 21371 21372 21373 21374 21375 21376 21377 21378 21379 21380 21381 21382 21383 21384 21385 21386 21387 21388 21389 21390 21391 21392 21393 21394 21395 21396 21397 21398 21399 21400 21401 21402 21403 21404 21405 21406 21407 21408 21409 21410 21411 21412 21413 21414 21415 21416 21417 21418 21419 21420 21421 21422 21423 21424 21425 21426 21427 21428 21429 21430 21431 21432 21433 21434 21435 21436 21437 21438 21439 21440 21441 21442 21443 21444 21445 21446 21447 21448 21449 21450 21451 21452 21453 21454 21455 21456 21457 21458 21459 21460 21461 21462 21463 21464 21465 21466 21467 21468 21469 21470 21471 21472 21473 21474 21475 21476 21477 21478 21479 21480 21481 21482 21483 21484 21485 21486 21487 21488 21489 21490 21491 21492 21493 21494 21495 21496 21497 21498 21499 21500 21501 21502 21503 21504 21505 21506 21507 21508 21509 21510 21511 21512 21513 21514 21515 21516 21517 21518 21519 21520 21521 21522 21523 21524 21525 21526 21527 21528 21529 21530 21531 21532 21533 21534 21535 21536 21537 21538 21539 21540 21541 21542 21543 21544 21545 21546 21547 21548 21549 21550 21551 21552 21553 21554 21555 21556 21557 21558 21559 21560 21561 21562 21563 21564 21565 21566 21567 21568 21569 21570 21571 21572 21573 21574 21575 21576 21577 21578 21579 21580 21581 21582 21583 21584 21585 21586 21587 21588 21589 21590 21591 21592 21593 21594 21595 21596 21597 21598 21599 21600 21601 21602 21603 21604 21605 21606 21607 21608 21609 21610 21611 21612 21613 21614 21615 21616 21617 21618 21619 21620 21621 21622 21623 21624 21625 21626 21627 21628 21629 21630 21631 21632 21633 21634 21635 21636 21637 21638 21639 21640 21641 21642 21643 21644 21645 21646 21647 21648 21649 21650 21651 21652 21653 21654 21655 21656 21657 21658 21659 21660 21661 21662 21663 21664 21665 21666 21667 21668 21669 21670 21671 21672 21673 21674 21675 21676 21677 21678 21679 21680 21681 21682 21683 21684 21685 21686 21687 21688 21689 21690 21691 21692 21693 21694 21695 21696 21697 21698 21699 21700 21701 21702 21703 21704 21705 21706 21707 21708 21709 21710 21711 21712 21713 21714 21715 21716 21717 21718 21719 21720 21721 21722 21723 21724 21725 21726 21727 21728 21729 21730 21731 21732 21733 21734 21735 21736 21737 21738 21739 21740 21741 21742 21743 21744 21745 21746 21747 21748 21749 21750 21751 21752 21753 21754 21755 21756 21757 21758 21759 21760 21761 21762 21763 21764 21765 21766 21767 21768 21769 21770 21771 21772 21773 21774 21775 21776 21777 21778 21779 21780 21781 21782 21783 21784 21785 21786 21787 21788 21789 21790 21791 21792 21793 21794 21795 21796 21797 21798 21799 21800 21801 21802 21803 21804 21805 21806 21807 21808 21809 21810 21811 21812 21813 21814 21815 21816 21817 21818 21819 21820 21821 21822 21823 21824 21825 21826 21827 21828 21829 21830 21831 21832 21833 21834 21835 21836 21837 21838 21839 21840 21841 21842 21843 21844 21845 21846 21847 21848 21849 21850 21851 21852 21853 21854 21855 21856 21857 21858 21859 21860 21861 21862 21863 21864 21865 21866 21867 21868 21869 21870 21871 21872 21873 21874 21875 21876 21877 21878 21879 21880 21881 21882 21883 21884 21885 21886 21887 21888 21889 21890 21891 21892 21893 21894 21895 21896 21897 21898 21899 21900 21901 21902 21903 21904 21905 21906 21907 21908 21909 21910 21911 21912 21913 21914 21915 21916 21917 21918 21919 21920 21921 21922 21923 21924 21925 21926 21927 21928 21929 21930 21931 21932 21933 21934 21935 21936 21937 21938 21939 21940 21941 21942 21943 21944 21945 21946 21947 21948 21949 21950 21951 21952 21953 21954 21955 21956 21957 21958 21959 21960 21961 21962 21963 21964 21965 21966 21967 21968 21969 21970 21971 21972 21973 21974 21975 21976 21977 21978 21979 21980 21981 21982 21983 21984 21985 21986 21987 21988 21989 21990 21991 21992 21993 21994 21995 21996 21997 21998 21999 22000 22001 22002 22003 22004 22005 22006 22007 22008 22009 22010 22011 22012 22013 22014 22015 22016 22017 22018 22019 22020 22021 22022 22023 22024 22025 22026 22027 22028 22029 22030 22031 22032 22033 22034 22035 22036 22037 22038 22039 22040 22041 22042 22043 22044 22045 22046 22047 22048 22049 22050 22051 22052 22053 22054 22055 22056 22057 22058 22059 22060 22061 22062 22063 22064 22065 22066 22067 22068 22069 22070 22071 22072 22073 22074 22075 22076 22077 22078 22079 22080 22081 22082 22083 22084 22085 22086 22087 22088 22089 22090 22091 22092 22093 22094 22095 22096 22097 22098 22099 22100 22101 22102 22103 22104 22105 22106 22107 22108 22109 22110 22111 22112 22113 22114 22115 22116 22117 22118 22119 22120 22121 22122 22123 22124 22125 22126 22127 22128 22129 22130 22131 22132 22133 22134 22135 22136 22137 22138 22139 22140 22141 22142 22143 22144 22145 22146 22147 22148 22149 22150 22151 22152 22153 22154 22155 22156 22157 22158 22159 22160 22161 22162 22163 22164 22165 22166 22167 22168 22169 22170 22171 22172 22173 22174 22175 22176 22177 22178 22179 22180 22181 22182 22183 22184 22185 22186 22187 22188 22189 22190 22191 22192 22193 22194 22195 22196 22197 22198 22199 22200 22201 22202 22203 22204 22205 22206 22207 22208 22209 22210 22211 22212 22213 22214 22215 22216 22217 22218 22219 22220 22221 22222 22223 22224 22225 22226 22227 22228 22229 22230 22231 22232 22233 22234 22235 22236 22237 22238 22239 22240 22241 22242 22243 22244 22245 22246 22247 22248 22249 22250 22251 22252 22253 22254 22255 22256 22257 22258 22259 22260 22261 22262 22263 22264 22265 22266 22267 22268 22269 22270 22271 22272 22273 22274 22275 22276 22277 22278 22279 22280 22281 22282 22283 22284 22285 22286 22287 22288 22289 22290 22291 22292 22293 22294 22295 22296 22297 22298 22299 22300 22301 22302 22303 22304 22305 22306 22307 22308 22309 22310 22311 22312 22313 22314 22315 22316 22317 22318 22319 22320 22321 22322 22323 22324 22325 22326 22327 22328 22329 22330 22331 22332 22333 22334 22335 22336 22337 22338 22339 22340 22341 22342 22343 22344 22345 22346 22347 22348 22349 22350 22351 22352 22353 22354 22355 22356 22357 22358 22359 22360 22361 22362 22363 22364 22365 22366 22367 22368 22369 22370 22371 22372 22373 22374 22375 22376 22377 22378 22379 22380 22381 22382 22383 22384 22385 22386 22387 22388 22389 22390 22391 22392 22393 22394 22395 22396 22397 22398 22399 22400 22401 22402 22403 22404 22405 22406 22407 22408 22409 22410 22411 22412 22413 22414 22415 22416 22417 22418 22419 22420 22421 22422 22423 22424 22425 22426 22427 22428 22429 22430 22431 22432 22433 22434 22435 22436 22437 22438 22439 22440 22441 22442 22443 22444 22445 22446 22447 22448 22449 22450 22451 22452 22453 22454 22455 22456 22457 22458 22459 22460 22461 22462 22463 22464 22465 22466 22467 22468 22469 22470 22471 22472 22473 22474 22475 22476 22477 22478 22479 22480 22481 22482 22483 22484 22485 22486 22487 22488 22489 22490 22491 22492 22493 22494 22495 22496 22497 22498 22499 22500 22501 22502 22503 22504 22505 22506 22507 22508 22509 22510 22511 22512 22513 22514 22515 22516 22517 22518 22519 22520 22521 22522 22523 22524 22525 22526 22527 22528 22529 22530 22531 22532 22533 22534 22535 22536 22537 22538 22539 22540 22541 22542 22543 22544 22545 22546 22547 22548 22549 22550 22551 22552 22553 22554 22555 22556 22557 22558 22559 22560 22561 22562 22563 22564 22565 22566 22567 22568 22569 22570 22571 22572 22573 22574 22575 22576 22577 22578 22579 22580 22581 22582 22583 22584 22585 22586 22587 22588 22589 22590 22591 22592 22593 22594 22595 22596 22597 22598 22599 22600 22601 22602 22603 22604 22605 22606 22607 22608 22609 22610 22611 22612 22613 22614 22615 22616 22617 22618 22619 22620 22621 22622 22623 22624 22625 22626 22627 22628 22629 22630 22631 22632 22633 22634 22635 22636 22637 22638 22639 22640 22641 22642 22643 22644 22645 22646 22647 22648 22649 22650 22651 22652 22653 22654 22655 22656 22657 22658 22659 22660 22661 22662 22663 22664 22665 22666 22667 22668 22669 22670 22671 22672 22673 22674 22675 22676 22677 22678 22679 22680 22681 22682 22683 22684 22685 22686 22687 22688 22689 22690 22691 22692 22693 22694 22695 22696 22697 22698 22699 22700 22701 22702 22703 22704 22705 22706 22707 22708 22709 22710 22711 22712 22713 22714 22715 22716 22717 22718 22719 22720 22721 22722 22723 22724 22725 22726 22727 22728 22729 22730 22731 22732 22733 22734 22735 22736 22737 22738 22739 22740 22741 22742 22743 22744 22745 22746 22747 22748 22749 22750 22751 22752 22753 22754 22755 22756 22757 22758 22759 22760 22761 22762 22763 22764 22765 22766 22767 22768 22769 22770 22771 22772 22773 22774 22775 22776 22777 22778 22779 22780 22781 22782 22783 22784 22785 22786 22787 22788 22789 22790 22791 22792 22793 22794 22795 22796 22797 22798 22799 22800 22801 22802 22803 22804 22805 22806 22807 22808 22809 22810 22811 22812 22813 22814 22815 22816 22817 22818 22819 22820 22821 22822 22823 22824 22825 22826 22827 22828 22829 22830 22831 22832 22833 22834 22835 22836 22837 22838 22839 22840 22841 22842 22843 22844 22845 22846 22847 22848 22849 22850 22851 22852 22853 22854 22855 22856 22857 22858 22859 22860 22861 22862 22863 22864 22865 22866 22867 22868 22869 22870 22871 22872 22873 22874 22875 22876 22877 22878 22879 22880 22881 22882 22883 22884 22885 22886 22887 22888 22889 22890 22891 22892 22893 22894 22895 22896 22897 22898 22899 22900 22901 22902 22903 22904 22905 22906 22907 22908 22909 22910 22911 22912 22913 22914 22915 22916 22917 22918 22919 22920 22921 22922 22923 22924 22925 22926 22927 22928 22929 22930 22931 22932 22933 22934 22935 22936 22937 22938 22939 22940 22941 22942 22943 22944 22945 22946 22947 22948 22949 22950 22951 22952 22953 22954 22955 22956 22957 22958 22959 22960 22961 22962 22963 22964 22965 22966 22967 22968 22969 22970 22971 22972 22973 22974 22975 22976 22977 22978 22979 22980 22981 22982 22983 22984 22985 22986 22987 22988 22989 22990 22991 22992 22993 22994 22995 22996 22997 22998 22999 23000 23001 23002 23003 23004 23005 23006 23007 23008 23009 23010 23011 23012 23013 23014 23015 23016 23017 23018 23019 23020 23021 23022 23023 23024 23025 23026 23027 23028 23029 23030 23031 23032 23033 23034 23035 23036 23037 23038 23039 23040 23041 23042 23043 23044 23045 23046 23047 23048 23049 23050 23051 23052 23053 23054 23055 23056 23057 23058 23059 23060 23061 23062 23063 23064 23065 23066 23067 23068 23069 23070 23071 23072 23073 23074 23075 23076 23077 23078 23079 23080 23081 23082 23083 23084 23085 23086 23087 23088 23089 23090 23091 23092 23093 23094 23095 23096 23097 23098 23099 23100 23101 23102 23103 23104 23105 23106 23107 23108 23109 23110 23111 23112 23113 23114 23115 23116 23117 23118 23119 23120 23121 23122 23123 23124 23125 23126 23127 23128 23129 23130 23131 23132 23133 23134 23135 23136 23137 23138 23139 23140 23141 23142 23143 23144 23145 23146 23147 23148 23149 23150 23151 23152 23153 23154 23155 23156 23157 23158 23159 23160 23161 23162 23163 23164 23165 23166 23167 23168 23169 23170 23171 23172 23173 23174 23175 23176 23177 23178 23179 23180 23181 23182 23183 23184 23185 23186 23187 23188 23189 23190 23191 23192 23193 23194 23195 23196 23197 23198 23199 23200 23201 23202 23203 23204 23205 23206 23207 23208 23209 23210 23211 23212 23213 23214 23215 23216 23217 23218 23219 23220 23221 23222 23223 23224 23225 23226 23227 23228 23229 23230 23231 23232 23233 23234 23235 23236 23237 23238 23239 23240 23241 23242 23243 23244 23245 23246 23247 23248 23249 23250 23251 23252 23253 23254 23255 23256 23257 23258 23259 23260 23261 23262 23263 23264 23265 23266 23267 23268 23269 23270 23271 23272 23273 23274 23275 23276 23277 23278 23279 23280 23281 23282 23283 23284 23285 23286 23287 23288 23289 23290 23291 23292 23293 23294 23295 23296 23297 23298 23299 23300 23301 23302 23303 23304 23305 23306 23307 23308 23309 23310 23311 23312 23313 23314 23315 23316 23317 23318 23319 23320 23321 23322 23323 23324 23325 23326 23327 23328 23329 23330 23331 23332 23333 23334 23335 23336 23337 23338 23339 23340 23341 23342 23343 23344 23345 23346 23347 23348 23349 23350 23351 23352 23353 23354 23355 23356 23357 23358 23359 23360 23361 23362 23363 23364 23365 23366 23367 23368 23369 23370 23371 23372 23373 23374 23375 23376 23377 23378 23379 23380 23381 23382 23383 23384 23385 23386 23387 23388 23389 23390 23391 23392 23393 23394 23395 23396 23397 23398 23399 23400 23401 23402 23403 23404 23405 23406 23407 23408 23409 23410 23411 23412 23413 23414 23415 23416 23417 23418 23419 23420 23421 23422 23423 23424 23425 23426 23427 23428 23429 23430 23431 23432 23433 23434 23435 23436 23437 23438 23439 23440 23441 23442 23443 23444 23445 23446 23447 23448 23449 23450 23451 23452 23453 23454 23455 23456 23457 23458 23459 23460 23461 23462 23463 23464 23465 23466 23467 23468 23469 23470 23471 23472 23473 23474 23475 23476 23477 23478 23479 23480 23481 23482 23483 23484 23485 23486 23487 23488 23489 23490 23491 23492 23493 23494 23495 23496 23497 23498 23499 23500 23501 23502 23503 23504 23505 23506 23507 23508 23509 23510 23511 23512 23513 23514 23515 23516 23517 23518 23519 23520 23521 23522 23523 23524 23525 23526 23527 23528 23529 23530 23531 23532 23533 23534 23535 23536 23537 23538 23539 23540 23541 23542 23543 23544 23545 23546 23547 23548 23549 23550 23551 23552 23553 23554 23555 23556 23557 23558 23559 23560 23561 23562 23563 23564 23565 23566 23567 23568 23569 23570 23571 23572 23573 23574 23575 23576 23577 23578 23579 23580 23581 23582 23583 23584 23585 23586 23587 23588 23589 23590 23591 23592 23593 23594 23595 23596 23597 23598 23599 23600 23601 23602 23603 23604 23605 23606 23607 23608 23609 23610 23611 23612 23613 23614 23615 23616 23617 23618 23619 23620 23621 23622 23623 23624 23625 23626 23627 23628 23629 23630 23631 23632 23633 23634 23635 23636 23637 23638 23639 23640 23641 23642 23643 23644 23645 23646 23647 23648 23649 23650 23651 23652 23653 23654 23655 23656 23657 23658 23659 23660 23661 23662 23663 23664 23665 23666 23667 23668 23669 23670 23671 23672 23673 23674 23675 23676 23677 23678 23679 23680 23681 23682 23683 23684 23685 23686 23687 23688 23689 23690 23691 23692 23693 23694 23695 23696 23697 23698 23699 23700 23701 23702 23703 23704 23705 23706 23707 23708 23709 23710 23711 23712 23713 23714 23715 23716 23717 23718 23719 23720 23721 23722 23723 23724 23725 23726 23727 23728 23729 23730 23731 23732 23733 23734 23735 23736 23737 23738 23739 23740 23741 23742 23743 23744 23745 23746 23747 23748 23749 23750 23751 23752 23753 23754 23755 23756 23757 23758 23759 23760 23761 23762 23763 23764 23765 23766 23767 23768 23769 23770 23771 23772 23773 23774 23775 23776 23777 23778 23779 23780 23781 23782 23783 23784 23785 23786 23787 23788 23789 23790 23791 23792 23793 23794 23795 23796 23797 23798 23799 23800 23801 23802 23803 23804 23805 23806 23807 23808 23809 23810 23811 23812 23813 23814 23815 23816 23817 23818 23819 23820 23821 23822 23823 23824 23825 23826 23827 23828 23829 23830 23831 23832 23833 23834 23835 23836 23837 23838 23839 23840 23841 23842 23843 23844 23845 23846 23847 23848 23849 23850 23851 23852 23853 23854 23855 23856 23857 23858 23859 23860 23861 23862 23863 23864 23865 23866 23867 23868 23869 23870 23871 23872 23873 23874 23875 23876 23877 23878 23879 23880 23881 23882 23883 23884 23885 23886 23887 23888 23889 23890 23891 23892 23893 23894 23895 23896 23897 23898 23899 23900 23901 23902 23903 23904 23905 23906 23907 23908 23909 23910 23911 23912 23913 23914 23915 23916 23917 23918 23919 23920 23921 23922 23923 23924 23925 23926 23927 23928 23929 23930 23931 23932 23933 23934 23935 23936 23937 23938 23939 23940 23941 23942 23943 23944 23945 23946 23947 23948 23949 23950 23951 23952 23953 23954 23955 23956 23957 23958 23959 23960 23961 23962 23963 23964 23965 23966 23967 23968 23969 23970 23971 23972 23973 23974 23975 23976 23977 23978 23979 23980 23981 23982 23983 23984 23985 23986 23987 23988 23989 23990 23991 23992 23993 23994 23995 23996 23997 23998 23999 24000 24001 24002 24003 24004 24005 24006 24007 24008 24009 24010 24011 24012 24013 24014 24015 24016 24017 24018 24019 24020 24021 24022 24023 24024 24025 24026 24027 24028 24029 24030 24031 24032 24033 24034 24035 24036 24037 24038 24039 24040 24041 24042 24043 24044 24045 24046 24047 24048 24049 24050 24051 24052 24053 24054 24055 24056 24057 24058 24059 24060 24061 24062 24063 24064 24065 24066 24067 24068 24069 24070 24071 24072 24073 24074 24075 24076 24077 24078 24079 24080 24081 24082 24083 24084 24085 24086 24087 24088 24089 24090 24091 24092 24093 24094 24095 24096 24097 24098 24099 24100 24101 24102 24103 24104 24105 24106 24107 24108 24109 24110 24111 24112 24113 24114 24115 24116 24117 24118 24119 24120 24121 24122 24123 24124 24125 24126 24127 24128 24129 24130 24131 24132 24133 24134 24135 24136 24137 24138 24139 24140 24141 24142 24143 24144 24145 24146 24147 24148 24149 24150 24151 24152 24153 24154 24155 24156 24157 24158 24159 24160 24161 24162 24163 24164 24165 24166 24167 24168 24169 24170 24171 24172 24173 24174 24175 24176 24177 24178 24179 24180 24181 24182 24183 24184 24185 24186 24187 24188 24189 24190 24191 24192 24193 24194 24195 24196 24197 24198 24199 24200 24201 24202 24203 24204 24205 24206 24207 24208 24209 24210 24211 24212 24213 24214 24215 24216 24217 24218 24219 24220 24221 24222 24223 24224 24225 24226 24227 24228 24229 24230 24231 24232 24233 24234 24235 24236 24237 24238 24239 24240 24241 24242 24243 24244 24245 24246 24247 24248 24249 24250 24251 24252 24253 24254 24255 24256 24257 24258 24259 24260 24261 24262 24263 24264 24265 24266 24267 24268 24269 24270 24271 24272 24273 24274 24275 24276 24277 24278 24279 24280 24281 24282 24283 24284 24285 24286 24287 24288 24289 24290 24291 24292 24293 24294 24295 24296 24297 24298 24299 24300 24301 24302 24303 24304 24305 24306 24307 24308 24309 24310 24311 24312 24313 24314 24315 24316 24317 24318 24319 24320 24321 24322 24323 24324 24325 24326 24327 24328 24329 24330 24331 24332 24333 24334 24335 24336 24337 24338 24339 24340 24341 24342 24343 24344 24345 24346 24347 24348 24349 24350 24351 24352 24353 24354 24355 24356 24357 24358 24359 24360 24361 24362 24363 24364 24365 24366 24367 24368 24369 24370 24371 24372 24373 24374 24375 24376 24377 24378 24379 24380 24381 24382 24383 24384 24385 24386 24387 24388 24389 24390 24391 24392 24393 24394 24395 24396 24397 24398 24399 24400 24401 24402 24403 24404 24405 24406 24407 24408 24409 24410 24411 24412 24413 24414 24415 24416 24417 24418 24419 24420 24421 24422 24423 24424 24425 24426 24427 24428 24429 24430 24431 24432 24433 24434 24435 24436 24437 24438 24439 24440 24441 24442 24443 24444 24445 24446 24447 24448 24449 24450 24451 24452 24453 24454 24455 24456 24457 24458 24459 24460 24461 24462 24463 24464 24465 24466 24467 24468 24469 24470 24471 24472 24473 24474 24475 24476 24477 24478 24479 24480 24481 24482 24483 24484 24485 24486 24487 24488 24489 24490 24491 24492 24493 24494 24495 24496 24497 24498 24499 24500 24501 24502 24503 24504 24505 24506 24507 24508 24509 24510 24511 24512 24513 24514 24515 24516 24517 24518 24519 24520 24521 24522 24523 24524 24525 24526 24527 24528 24529 24530 24531 24532 24533 24534 24535 24536 24537 24538 24539 24540 24541 24542 24543 24544 24545 24546 24547 24548 24549 24550 24551 24552 24553 24554 24555 24556 24557 24558 24559 24560 24561 24562 24563 24564 24565 24566 24567 24568 24569 24570 24571 24572 24573 24574 24575 24576 24577 24578 24579 24580 24581 24582 24583 24584 24585 24586 24587 24588 24589 24590 24591 24592 24593 24594 24595 24596 24597 24598 24599 24600 24601 24602 24603 24604 24605 24606 24607 24608 24609 24610 24611 24612 24613 24614 24615 24616 24617 24618 24619 24620 24621 24622 24623 24624 24625 24626 24627 24628 24629 24630 24631 24632 24633 24634 24635 24636 24637 24638 24639 24640 24641 24642 24643 24644 24645 24646 24647 24648 24649 24650 24651 24652 24653 24654 24655 24656 24657 24658 24659 24660 24661 24662 24663 24664 24665 24666 24667 24668 24669 24670 24671 24672 24673 24674 24675 24676 24677 24678 24679 24680 24681 24682 24683 24684 24685 24686 24687 24688 24689 24690 24691 24692 24693 24694 24695 24696 24697 24698 24699 24700 24701 24702 24703 24704 24705 24706 24707 24708 24709 24710 24711 24712 24713 24714 24715 24716 24717 24718 24719 24720 24721 24722 24723 24724 24725 24726 24727 24728 24729 24730 24731 24732 24733 24734 24735 24736 24737 24738 24739 24740 24741 24742 24743 24744 24745 24746 24747 24748 24749 24750 24751 24752 24753 24754 24755 24756 24757 24758 24759 24760 24761 24762 24763 24764 24765 24766 24767 24768 24769 24770 24771 24772 24773 24774 24775 24776 24777 24778 24779 24780 24781 24782 24783 24784 24785 24786 24787 24788 24789 24790 24791 24792 24793 24794 24795 24796 24797 24798 24799 24800 24801 24802 24803 24804 24805 24806 24807 24808 24809 24810 24811 24812 24813 24814 24815 24816 24817 24818 24819 24820 24821 24822 24823 24824 24825 24826 24827 24828 24829 24830 24831 24832 24833 24834 24835 24836 24837 24838 24839 24840 24841 24842 24843 24844 24845 24846 24847 24848 24849 24850 24851 24852 24853 24854 24855 24856 24857 24858 24859 24860 24861 24862 24863 24864 24865 24866 24867 24868 24869 24870 24871 24872 24873 24874 24875 24876 24877 24878 24879 24880 24881 24882 24883 24884 24885 24886 24887 24888 24889 24890 24891 24892 24893 24894 24895 24896 24897 24898 24899 24900 24901 24902 24903 24904 24905 24906 24907 24908 24909 24910 24911 24912 24913 24914 24915 24916 24917 24918 24919 24920 24921 24922 24923 24924 24925 24926 24927 24928 24929 24930 24931 24932 24933 24934 24935 24936 24937 24938 24939 24940 24941 24942 24943 24944 24945 24946 24947 24948 24949 24950 24951 24952 24953 24954 24955 24956 24957 24958 24959 24960 24961 24962 24963 24964 24965 24966 24967 24968 24969 24970 24971 24972 24973 24974 24975 24976 24977 24978 24979 24980 24981 24982 24983 24984 24985 24986 24987 24988 24989 24990 24991 24992 24993 24994 24995 24996 24997 24998 24999 25000 25001 25002 25003 25004 25005 25006 25007 25008 25009 25010 25011 25012 25013 25014 25015 25016 25017 25018 25019 25020 25021 25022 25023 25024 25025 25026 25027 25028 25029 25030 25031 25032 25033 25034 25035 25036 25037 25038 25039 25040 25041 25042 25043 25044 25045 25046 25047 25048 25049 25050 25051 25052 25053 25054 25055 25056 25057 25058 25059 25060 25061 25062 25063 25064 25065 25066 25067 25068 25069 25070 25071 25072 25073 25074 25075 25076 25077 25078 25079 25080 25081 25082 25083 25084 25085 25086 25087 25088 25089 25090 25091 25092 25093 25094 25095 25096 25097 25098 25099 25100 25101 25102 25103 25104 25105 25106 25107 25108 25109 25110 25111 25112 25113 25114 25115 25116 25117 25118 25119 25120 25121 25122 25123 25124 25125 25126 25127 25128 25129 25130 25131 25132 25133 25134 25135 25136 25137 25138 25139 25140 25141 25142 25143 25144 25145 25146 25147 25148 25149 25150 25151 25152 25153 25154 25155 25156 25157 25158 25159 25160 25161 25162 25163 25164 25165 25166 25167 25168 25169 25170 25171 25172 25173 25174 25175 25176 25177 25178 25179 25180 25181 25182 25183 25184 25185 25186 25187 25188 25189 25190 25191 25192 25193 25194 25195 25196 25197 25198 25199 25200 25201 25202 25203 25204 25205 25206 25207 25208 25209 25210 25211 25212 25213 25214 25215 25216 25217 25218 25219 25220 25221 25222 25223 25224 25225 25226 25227 25228 25229 25230 25231 25232 25233 25234 25235 25236 25237 25238 25239 25240 25241 25242 25243 25244 25245 25246 25247 25248 25249 25250 25251 25252 25253 25254 25255 25256 25257 25258 25259 25260 25261 25262 25263 25264 25265 25266 25267 25268 25269 25270 25271 25272 25273 25274 25275 25276 25277 25278 25279 25280 25281 25282 25283 25284 25285 25286 25287 25288 25289 25290 25291 25292 25293 25294 25295 25296 25297 25298 25299 25300 25301 25302 25303 25304 25305 25306 25307 25308 25309 25310 25311 25312 25313 25314 25315 25316 25317 25318 25319 25320 25321 25322 25323 25324 25325 25326 25327 25328 25329 25330 25331 25332 25333 25334 25335 25336 25337 25338 25339 25340 25341 25342 25343 25344 25345 25346 25347 25348 25349 25350 25351 25352 25353 25354 25355 25356 25357 25358 25359 25360 25361 25362 25363 25364 25365 25366 25367 25368 25369 25370 25371 25372 25373 25374 25375 25376 25377 25378 25379 25380 25381 25382 25383 25384 25385 25386 25387 25388 25389 25390 25391 25392 25393 25394 25395 25396 25397 25398 25399 25400 25401 25402 25403 25404 25405 25406 25407 25408 25409 25410 25411 25412 25413 25414 25415 25416 25417 25418 25419 25420 25421 25422 25423 25424 25425 25426 25427 25428 25429 25430 25431 25432 25433 25434 25435 25436 25437 25438 25439 25440 25441 25442 25443 25444 25445 25446 25447 25448 25449 25450 25451 25452 25453 25454 25455 25456 25457 25458 25459 25460 25461 25462 25463 25464 25465 25466 25467 25468 25469 25470 25471 25472 25473 25474 25475 25476 25477 25478 25479 25480 25481 25482 25483 25484 25485 25486 25487 25488 25489 25490 25491 25492 25493 25494 25495 25496 25497 25498 25499 25500 25501 25502 25503 25504 25505 25506 25507 25508 25509 25510 25511 25512 25513 25514 25515 25516 25517 25518 25519 25520 25521 25522 25523 25524 25525 25526 25527 25528 25529 25530 25531 25532 25533 25534 25535 25536 25537 25538 25539 25540 25541 25542 25543 25544 25545 25546 25547 25548 25549 25550 25551 25552 25553 25554 25555 25556 25557 25558 25559 25560 25561 25562 25563 25564 25565 25566 25567 25568 25569 25570 25571 25572 25573 25574 25575 25576 25577 25578 25579 25580 25581 25582 25583 25584 25585 25586 25587 25588 25589 25590 25591 25592 25593 25594 25595 25596 25597 25598 25599 25600 25601 25602 25603 25604 25605 25606 25607 25608 25609 25610 25611 25612 25613 25614 25615 25616 25617 25618 25619 25620 25621 25622 25623 25624 25625 25626 25627 25628 25629 25630 25631 25632 25633 25634 25635 25636 25637 25638 25639 25640 25641 25642 25643 25644 25645 25646 25647 25648 25649 25650 25651 25652 25653 25654 25655 25656 25657 25658 25659 25660 25661 25662 25663 25664 25665 25666 25667 25668 25669 25670 25671 25672 25673 25674 25675 25676 25677 25678 25679 25680 25681 25682 25683 25684 25685 25686 25687 25688 25689 25690 25691 25692 25693 25694 25695 25696 25697 25698 25699 25700 25701 25702 25703 25704 25705 25706 25707 25708 25709 25710 25711 25712 25713 25714 25715 25716 25717 25718 25719 25720 25721 25722 25723 25724 25725 25726 25727 25728 25729 25730 25731 25732 25733 25734 25735 25736 25737 25738 25739 25740 25741 25742 25743 25744 25745 25746 25747 25748 25749 25750 25751 25752 25753 25754 25755 25756 25757 25758 25759 25760 25761 25762 25763 25764 25765 25766 25767 25768 25769 25770 25771 25772 25773 25774 25775 25776 25777 25778 25779 25780 25781 25782 25783 25784 25785 25786 25787 25788 25789 25790 25791 25792 25793 25794 25795 25796 25797 25798 25799 25800 25801 25802 25803 25804 25805 25806 25807 25808 25809 25810 25811 25812 25813 25814 25815 25816 25817 25818 25819 25820 25821 25822 25823 25824 25825 25826 25827 25828 25829 25830 25831 25832 25833 25834 25835 25836 25837 25838 25839 25840 25841 25842 25843 25844 25845 25846 25847 25848 25849 25850 25851 25852 25853 25854 25855 25856 25857 25858 25859 25860 25861 25862 25863 25864 25865 25866 25867 25868 25869 25870 25871 25872 25873 25874 25875 25876 25877 25878 25879 25880 25881 25882 25883 25884 25885 25886 25887 25888 25889 25890 25891 25892 25893 25894 25895 25896 25897 25898 25899 25900 25901 25902 25903 25904 25905 25906 25907 25908 25909 25910 25911 25912 25913 25914 25915 25916 25917 25918 25919 25920 25921 25922 25923 25924 25925 25926 25927 25928 25929 25930 25931 25932 25933 25934 25935 25936 25937 25938 25939 25940 25941 25942 25943 25944 25945 25946 25947 25948 25949 25950 25951 25952 25953 25954 25955 25956 25957 25958 25959 25960 25961 25962 25963 25964 25965 25966 25967 25968 25969 25970 25971 25972 25973 25974 25975 25976 25977 25978 25979 25980 25981 25982 25983 25984 25985 25986 25987 25988 25989 25990 25991 25992 25993 25994 25995 25996 25997 25998 25999 26000 26001 26002 26003 26004 26005 26006 26007 26008 26009 26010 26011 26012 26013 26014 26015 26016 26017 26018 26019 26020 26021 26022 26023 26024 26025 26026 26027 26028 26029 26030 26031 26032 26033 26034 26035 26036 26037 26038 26039 26040 26041 26042 26043 26044 26045 26046 26047 26048 26049 26050 26051 26052 26053 26054 26055 26056 26057 26058 26059 26060 26061 26062 26063 26064 26065 26066 26067 26068 26069 26070 26071 26072 26073 26074 26075 26076 26077 26078 26079 26080 26081 26082 26083 26084 26085 26086 26087 26088 26089 26090 26091 26092 26093 26094 26095 26096 26097 26098 26099 26100 26101 26102 26103 26104 26105 26106 26107 26108 26109 26110 26111 26112 26113 26114 26115 26116 26117 26118 26119 26120 26121 26122 26123 26124 26125 26126 26127 26128 26129 26130 26131 26132 26133 26134 26135 26136 26137 26138 26139 26140 26141 26142 26143 26144 26145 26146 26147 26148 26149 26150 26151 26152 26153 26154 26155 26156 26157 26158 26159 26160 26161 26162 26163 26164 26165 26166 26167 26168 26169 26170 26171 26172 26173 26174 26175 26176 26177 26178 26179 26180 26181 26182 26183 26184 26185 26186 26187 26188 26189 26190 26191 26192 26193 26194 26195 26196 26197 26198 26199 26200 26201 26202 26203 26204 26205 26206 26207 26208 26209 26210 26211 26212 26213 26214 26215 26216 26217 26218 26219 26220 26221 26222 26223 26224 26225 26226 26227 26228 26229 26230 26231 26232 26233 26234 26235 26236 26237 26238 26239 26240 26241 26242 26243 26244 26245 26246 26247 26248 26249 26250 26251 26252 26253 26254 26255 26256 26257 26258 26259 26260 26261 26262 26263 26264 26265 26266 26267 26268 26269 26270 26271 26272 26273 26274 26275 26276 26277 26278 26279 26280 26281 26282 26283 26284 26285 26286 26287 26288 26289 26290 26291 26292 26293 26294 26295 26296 26297 26298 26299 26300 26301 26302 26303 26304 26305 26306 26307 26308 26309 26310 26311 26312 26313 26314 26315 26316 26317 26318 26319 26320 26321 26322 26323 26324 26325 26326 26327 26328 26329 26330 26331 26332 26333 26334 26335 26336 26337 26338 26339 26340 26341 26342 26343 26344 26345 26346 26347 26348 26349 26350 26351 26352 26353 26354 26355 26356 26357 26358 26359 26360 26361 26362 26363 26364 26365 26366 26367 26368 26369 26370 26371 26372 26373 26374 26375 26376 26377 26378 26379 26380 26381 26382 26383 26384 26385 26386 26387 26388 26389 26390 26391 26392 26393 26394 26395 26396 26397 26398 26399 26400 26401 26402 26403 26404 26405 26406 26407 26408 26409 26410 26411 26412 26413 26414 26415 26416 26417 26418 26419 26420 26421 26422 26423 26424 26425 26426 26427 26428 26429 26430 26431 26432 26433 26434 26435 26436 26437 26438 26439 26440 26441 26442 26443 26444 26445 26446 26447 26448 26449 26450 26451 26452 26453 26454 26455 26456 26457 26458 26459 26460 26461 26462 26463 26464 26465 26466 26467 26468 26469 26470 26471 26472 26473 26474 26475 26476 26477 26478 26479 26480 26481 26482 26483 26484 26485 26486 26487 26488 26489 26490 26491 26492 26493 26494 26495 26496 26497 26498 26499 26500 26501 26502 26503 26504 26505 26506 26507 26508 26509 26510 26511 26512 26513 26514 26515 26516 26517 26518 26519 26520 26521 26522 26523 26524 26525 26526 26527 26528 26529 26530 26531 26532 26533 26534 26535 26536 26537 26538 26539 26540 26541 26542 26543 26544 26545 26546 26547 26548 26549 26550 26551 26552 26553 26554 26555 26556 26557 26558 26559 26560 26561 26562 26563 26564 26565 26566 26567 26568 26569 26570 26571 26572 26573 26574 26575 26576 26577 26578 26579 26580 26581 26582 26583 26584 26585 26586 26587 26588 26589 26590 26591 26592 26593 26594 26595 26596 26597 26598 26599 26600 26601 26602 26603 26604 26605 26606 26607 26608 26609 26610 26611 26612 26613 26614 26615 26616 26617 26618 26619 26620 26621 26622 26623 26624 26625 26626 26627 26628 26629 26630 26631 26632 26633 26634 26635 26636 26637 26638 26639 26640 26641 26642 26643 26644 26645 26646 26647 26648 26649 26650 26651 26652 26653 26654 26655 26656 26657 26658 26659 26660 26661 26662 26663 26664 26665 26666 26667 26668 26669 26670 26671 26672 26673 26674 26675 26676 26677 26678 26679 26680 26681 26682 26683 26684 26685 26686 26687 26688 26689 26690 26691 26692 26693 26694 26695 26696 26697 26698 26699 26700 26701 26702 26703 26704 26705 26706 26707 26708 26709 26710 26711 26712 26713 26714 26715 26716 26717 26718 26719 26720 26721 26722 26723 26724 26725 26726 26727 26728 26729 26730 26731 26732 26733 26734 26735 26736 26737 26738 26739 26740 26741 26742 26743 26744 26745 26746 26747 26748 26749 26750 26751 26752 26753 26754 26755 26756 26757 26758 26759 26760 26761 26762 26763 26764 26765 26766 26767 26768 26769 26770 26771 26772 26773 26774 26775 26776 26777 26778 26779 26780 26781 26782 26783 26784 26785 26786 26787 26788 26789 26790 26791 26792 26793 26794 26795 26796 26797 26798 26799 26800 26801 26802 26803 26804 26805 26806 26807 26808 26809 26810 26811 26812 26813 26814 26815 26816 26817 26818 26819 26820 26821 26822 26823 26824 26825 26826 26827 26828 26829 26830 26831 26832 26833 26834 26835 26836 26837 26838 26839 26840 26841 26842 26843 26844 26845 26846 26847 26848 26849 26850 26851 26852 26853 26854 26855 26856 26857 26858 26859 26860 26861 26862 26863 26864 26865 26866 26867 26868 26869 26870 26871 26872 26873 26874 26875 26876 26877 26878 26879 26880 26881 26882 26883 26884 26885 26886 26887 26888 26889 26890 26891 26892 26893 26894 26895 26896 26897 26898 26899 26900 26901 26902 26903 26904 26905 26906 26907 26908 26909 26910 26911 26912 26913 26914 26915 26916 26917 26918 26919 26920 26921 26922 26923 26924 26925 26926 26927 26928 26929 26930 26931 26932 26933 26934 26935 26936 26937 26938 26939 26940 26941 26942 26943 26944 26945 26946 26947 26948 26949 26950 26951 26952 26953 26954 26955 26956 26957 26958 26959 26960 26961 26962 26963 26964 26965 26966 26967 26968 26969 26970 26971 26972 26973 26974 26975 26976 26977 26978 26979 26980 26981 26982 26983 26984 26985 26986 26987 26988 26989 26990 26991 26992 26993 26994 26995 26996 26997 26998 26999 27000 27001 27002 27003 27004 27005 27006 27007 27008 27009 27010 27011 27012 27013 27014 27015 27016 27017 27018 27019 27020 27021 27022 27023 27024 27025 27026 27027 27028 27029 27030 27031 27032 27033 27034 27035 27036 27037 27038 27039 27040 27041 27042 27043 27044 27045 27046 27047 27048 27049 27050 27051 27052 27053 27054 27055 27056 27057 27058 27059 27060 27061 27062 27063 27064 27065 27066 27067 27068 27069 27070 27071 27072 27073 27074 27075 27076 27077 27078 27079 27080 27081 27082 27083 27084 27085 27086 27087 27088 27089 27090 27091 27092 27093 27094 27095 27096 27097 27098 27099 27100 27101 27102 27103 27104 27105 27106 27107 27108 27109 27110 27111 27112 27113 27114 27115 27116 27117 27118 27119 27120 27121 27122 27123 27124 27125 27126 27127 27128 27129 27130 27131 27132 27133 27134 27135 27136 27137 27138 27139 27140 27141 27142 27143 27144 27145 27146 27147 27148 27149 27150 27151 27152 27153 27154 27155 27156 27157 27158 27159 27160 27161 27162 27163 27164 27165 27166 27167 27168 27169 27170 27171 27172 27173 27174 27175 27176 27177 27178 27179 27180 27181 27182 27183 27184 27185 27186 27187 27188 27189 27190 27191 27192 27193 27194 27195 27196 27197 27198 27199 27200 27201 27202 27203 27204 27205 27206 27207 27208 27209 27210 27211 27212 27213 27214 27215 27216 27217 27218 27219 27220 27221 27222 27223 27224 27225 27226 27227 27228 27229 27230 27231 27232 27233 27234 27235 27236 27237 27238 27239 27240 27241 27242 27243 27244 27245 27246 27247 27248 27249 27250 27251 27252 27253 27254 27255 27256 27257 27258 27259 27260 27261 27262 27263 27264 27265 27266 27267 27268 27269 27270 27271 27272 27273 27274 27275 27276 27277 27278 27279 27280 27281 27282 27283 27284 27285 27286 27287 27288 27289 27290 27291 27292 27293 27294 27295 27296 27297 27298 27299 27300 27301 27302 27303 27304 27305 27306 27307 27308 27309 27310 27311 27312 27313 27314 27315 27316 27317 27318 27319 27320 27321 27322 27323 27324 27325 27326 27327 27328 27329 27330 27331 27332 27333 27334 27335 27336 27337 27338 27339 27340 27341 27342 27343 27344 27345 27346 27347 27348 27349 27350 27351 27352 27353 27354 27355 27356 27357 27358 27359 27360 27361 27362 27363 27364 27365 27366 27367 27368 27369 27370 27371 27372 27373 27374 27375 27376 27377 27378 27379 27380 27381 27382 27383 27384 27385 27386 27387 27388 27389 27390 27391 27392 27393 27394 27395 27396 27397 27398 27399 27400 27401 27402 27403 27404 27405 27406 27407 27408 27409 27410 27411 27412 27413 27414 27415 27416 27417 27418 27419 27420 27421 27422 27423 27424 27425 27426 27427 27428 27429 27430 27431 27432 27433 27434 27435 27436 27437 27438 27439 27440 27441 27442 27443 27444 27445 27446 27447 27448 27449 27450 27451 27452 27453 27454 27455 27456 27457 27458 27459 27460 27461 27462 27463 27464 27465 27466 27467 27468 27469 27470 27471 27472 27473 27474 27475 27476 27477 27478 27479 27480 27481 27482 27483 27484 27485 27486 27487 27488 27489 27490 27491 27492 27493 27494 27495 27496 27497 27498 27499 27500 27501 27502 27503 27504 27505 27506 27507 27508 27509 27510 27511 27512 27513 27514 27515 27516 27517 27518 27519 27520 27521 27522 27523 27524 27525 27526 27527 27528 27529 27530 27531 27532 27533 27534 27535 27536 27537 27538 27539 27540 27541 27542 27543 27544 27545 27546 27547 27548 27549 27550 27551 27552 27553 27554 27555 27556 27557 27558 27559 27560 27561 27562 27563 27564 27565 27566 27567 27568 27569 27570 27571 27572 27573 27574 27575 27576 27577 27578 27579 27580 27581 27582 27583 27584 27585 27586 27587 27588 27589 27590 27591 27592 27593 27594 27595 27596 27597 27598 27599 27600 27601 27602 27603 27604 27605 27606 27607 27608 27609 27610 27611 27612 27613 27614 27615 27616 27617 27618 27619 27620 27621 27622 27623 27624 27625 27626 27627 27628 27629 27630 27631 27632 27633 27634 27635 27636 27637 27638 27639 27640 27641 27642 27643 27644 27645 27646 27647 27648 27649 27650 27651 27652 27653 27654 27655 27656 27657 27658 27659 27660 27661 27662 27663 27664 27665 27666 27667 27668 27669 27670 27671 27672 27673 27674 27675 27676 27677 27678 27679 27680 27681 27682 27683 27684 27685 27686 27687 27688 27689 27690 27691 27692 27693 27694 27695 27696 27697 27698 27699 27700 27701 27702 27703 27704 27705 27706 27707 27708 27709 27710 27711 27712 27713 27714 27715 27716 27717 27718 27719 27720 27721 27722 27723 27724 27725 27726 27727 27728 27729 27730 27731 27732 27733 27734 27735 27736 27737 27738 27739 27740 27741 27742 27743 27744 27745 27746 27747 27748 27749 27750 27751 27752 27753 27754 27755 27756 27757 27758 27759 27760 27761 27762 27763 27764 27765 27766 27767 27768 27769 27770 27771 27772 27773 27774 27775 27776 27777 27778 27779 27780 27781 27782 27783 27784 27785 27786 27787 27788 27789 27790 27791 27792 27793 27794 27795 27796 27797 27798 27799 27800 27801 27802 27803 27804 27805 27806 27807 27808 27809 27810 27811 27812 27813 27814 27815 27816 27817 27818 27819 27820 27821 27822 27823 27824 27825 27826 27827 27828 27829 27830 27831 27832 27833 27834 27835 27836 27837 27838 27839 27840 27841 27842 27843 27844 27845 27846 27847 27848 27849 27850 27851 27852 27853 27854 27855 27856 27857 27858 27859 27860 27861 27862 27863 27864 27865 27866 27867 27868 27869 27870 27871 27872 27873 27874 27875 27876 27877 27878 27879 27880 27881 27882 27883 27884 27885 27886 27887 27888 27889 27890 27891 27892 27893 27894 27895 27896 27897 27898 27899 27900 27901 27902 27903 27904 27905 27906 27907 27908 27909 27910 27911 27912 27913 27914 27915 27916 27917 27918 27919 27920 27921 27922 27923 27924 27925 27926 27927 27928 27929 27930 27931 27932 27933 27934 27935 27936 27937 27938 27939 27940 27941 27942 27943 27944 27945 27946 27947 27948 27949 27950 27951 27952 27953 27954 27955 27956 27957 27958 27959 27960 27961 27962 27963 27964 27965 27966 27967 27968 27969 27970 27971 27972 27973 27974 27975 27976 27977 27978 27979 27980 27981 27982 27983 27984 27985 27986 27987 27988 27989 27990 27991 27992 27993 27994 27995 27996 27997 27998 27999 28000 28001 28002 28003 28004 28005 28006 28007 28008 28009 28010 28011 28012 28013 28014 28015 28016 28017 28018 28019 28020 28021 28022 28023 28024 28025 28026 28027 28028 28029 28030 28031 28032 28033 28034 28035 28036 28037 28038 28039 28040 28041 28042 28043 28044 28045 28046 28047 28048 28049 28050 28051 28052 28053 28054 28055 28056 28057 28058 28059 28060 28061 28062 28063 28064 28065 28066 28067 28068 28069 28070 28071 28072 28073 28074 28075 28076 28077 28078 28079 28080 28081 28082 28083 28084 28085 28086 28087 28088 28089 28090 28091 28092 28093 28094 28095 28096 28097 28098 28099 28100 28101 28102 28103 28104 28105 28106 28107 28108 28109 28110 28111 28112 28113 28114 28115 28116 28117 28118 28119 28120 28121 28122 28123 28124 28125 28126 28127 28128 28129 28130 28131 28132 28133 28134 28135 28136 28137 28138 28139 28140 28141 28142 28143 28144 28145 28146 28147 28148 28149 28150 28151 28152 28153 28154 28155 28156 28157 28158 28159 28160 28161 28162 28163 28164 28165 28166 28167 28168 28169 28170 28171 28172 28173 28174 28175 28176 28177 28178 28179 28180 28181 28182 28183 28184 28185 28186 28187 28188 28189 28190 28191 28192 28193 28194 28195 28196 28197 28198 28199 28200 28201 28202 28203 28204 28205 28206 28207 28208 28209 28210 28211 28212 28213 28214 28215 28216 28217 28218 28219 28220 28221 28222 28223 28224 28225 28226 28227 28228 28229 28230 28231 28232 28233 28234 28235 28236 28237 28238 28239 28240 28241 28242 28243 28244 28245 28246 28247 28248 28249 28250 28251 28252 28253 28254 28255 28256 28257 28258 28259 28260 28261 28262 28263 28264 28265 28266 28267 28268 28269 28270 28271 28272 28273 28274 28275 28276 28277 28278 28279 28280 28281 28282 28283 28284 28285 28286 28287 28288 28289 28290 28291 28292 28293 28294 28295 28296 28297 28298 28299 28300 28301 28302 28303 28304 28305 28306 28307 28308 28309 28310 28311 28312 28313 28314 28315 28316 28317 28318 28319 28320 28321 28322 28323 28324 28325 28326 28327 28328 28329 28330 28331 28332 28333 28334 28335 28336 28337 28338 28339 28340 28341 28342 28343 28344 28345 28346 28347 28348 28349 28350 28351 28352 28353 28354 28355 28356 28357 28358 28359 28360 28361 28362 28363 28364 28365 28366 28367 28368 28369 28370 28371 28372 28373 28374 28375 28376 28377 28378 28379 28380 28381 28382 28383 28384 28385 28386 28387 28388 28389 28390 28391 28392 28393 28394 28395 28396 28397 28398 28399 28400 28401 28402 28403 28404 28405 28406 28407 28408 28409 28410 28411 28412 28413 28414 28415 28416 28417 28418 28419 28420 28421 28422 28423 28424 28425 28426 28427 28428 28429 28430 28431 28432 28433 28434 28435 28436 28437 28438 28439 28440 28441 28442 28443 28444 28445 28446 28447 28448 28449 28450 28451 28452 28453 28454 28455 28456 28457 28458 28459 28460 28461 28462 28463 28464 28465 28466 28467 28468 28469 28470 28471 28472 28473 28474 28475 28476 28477 28478 28479 28480 28481 28482 28483 28484 28485 28486 28487 28488 28489 28490 28491 28492 28493 28494 28495 28496 28497 28498 28499 28500 28501 28502 28503 28504 28505 28506 28507 28508 28509 28510 28511 28512 28513 28514 28515 28516 28517 28518 28519 28520 28521 28522 28523 28524 28525 28526 28527 28528 28529 28530 28531 28532 28533 28534 28535 28536 28537 28538 28539 28540 28541 28542 28543 28544 28545 28546 28547 28548 28549 28550 28551 28552 28553 28554 28555 28556 28557 28558 28559 28560 28561 28562 28563 28564 28565 28566 28567 28568 28569 28570 28571 28572 28573 28574 28575 28576 28577 28578 28579 28580 28581 28582 28583 28584 28585 28586 28587 28588 28589 28590 28591 28592 28593 28594 28595 28596 28597 28598 28599 28600 28601 28602 28603 28604 28605 28606 28607 28608 28609 28610 28611 28612 28613 28614 28615 28616 28617 28618 28619 28620 28621 28622 28623 28624 28625 28626 28627 28628 28629 28630 28631 28632 28633 28634 28635 28636 28637 28638 28639 28640 28641 28642 28643 28644 28645 28646 28647 28648 28649 28650 28651 28652 28653 28654 28655 28656 28657 28658 28659 28660 28661 28662 28663 28664 28665 28666 28667 28668 28669 28670 28671 28672 28673 28674 28675 28676 28677 28678 28679 28680 28681 28682 28683 28684 28685 28686 28687 28688 28689 28690 28691 28692 28693 28694 28695 28696 28697 28698 28699 28700 28701 28702 28703 28704 28705 28706 28707 28708 28709 28710 28711 28712 28713 28714 28715 28716 28717 28718 28719 28720 28721 28722 28723 28724 28725 28726 28727 28728 28729 28730 28731 28732 28733 28734 28735 28736 28737 28738 28739 28740 28741 28742 28743 28744 28745 28746 28747 28748 28749 28750 28751 28752 28753 28754 28755 28756 28757 28758 28759 28760 28761 28762 28763 28764 28765 28766 28767 28768 28769 28770 28771 28772 28773 28774 28775 28776 28777 28778 28779 28780 28781 28782 28783 28784 28785 28786 28787 28788 28789 28790 28791 28792 28793 28794 28795 28796 28797 28798 28799 28800 28801 28802 28803 28804 28805 28806 28807 28808 28809 28810 28811 28812 28813 28814 28815 28816 28817 28818 28819 28820 28821 28822 28823 28824 28825 28826 28827 28828 28829 28830 28831 28832 28833 28834 28835 28836 28837 28838 28839 28840 28841 28842 28843 28844 28845 28846 28847 28848 28849 28850 28851 28852 28853 28854 28855 28856 28857 28858 28859 28860 28861 28862 28863 28864 28865 28866 28867 28868 28869 28870 28871 28872 28873 28874 28875 28876 28877 28878 28879 28880 28881 28882 28883 28884 28885 28886 28887 28888 28889 28890 28891 28892 28893 28894 28895 28896 28897 28898 28899 28900 28901 28902 28903 28904 28905 28906 28907 28908 28909 28910 28911 28912 28913 28914 28915 28916 28917 28918 28919 28920 28921 28922 28923 28924 28925 28926 28927 28928 28929 28930 28931 28932 28933 28934 28935 28936 28937 28938 28939 28940 28941 28942 28943 28944 28945 28946 28947 28948 28949 28950 28951 28952 28953 28954 28955 28956 28957 28958 28959 28960 28961 28962 28963 28964 28965 28966 28967 28968 28969 28970 28971 28972 28973 28974 28975 28976 28977 28978 28979 28980 28981 28982 28983 28984 28985 28986 28987 28988 28989 28990 28991 28992 28993 28994 28995 28996 28997 28998 28999 29000 29001 29002 29003 29004 29005 29006 29007 29008 29009 29010 29011 29012 29013 29014 29015 29016 29017 29018 29019 29020 29021 29022 29023 29024 29025 29026 29027 29028 29029 29030 29031 29032 29033 29034 29035 29036 29037 29038 29039 29040 29041 29042 29043 29044 29045 29046 29047 29048 29049 29050 29051 29052 29053 29054 29055 29056 29057 29058 29059 29060 29061 29062 29063 29064 29065 29066 29067 29068 29069 29070 29071 29072 29073 29074 29075 29076 29077 29078 29079 29080 29081 29082 29083 29084 29085 29086 29087 29088 29089 29090 29091 29092 29093 29094 29095 29096 29097 29098 29099 29100 29101 29102 29103 29104 29105 29106 29107 29108 29109 29110 29111 29112 29113 29114 29115 29116 29117 29118 29119 29120 29121 29122 29123 29124 29125 29126 29127 29128 29129 29130 29131 29132 29133 29134 29135 29136 29137 29138 29139 29140 29141 29142 29143 29144 29145 29146 29147 29148 29149 29150 29151 29152 29153 29154 29155 29156 29157 29158 29159 29160 29161 29162 29163 29164 29165 29166 29167 29168 29169 29170 29171 29172 29173 29174 29175 29176 29177 29178 29179 29180 29181 29182 29183 29184 29185 29186 29187 29188 29189 29190 29191 29192 29193 29194 29195 29196 29197 29198 29199 29200 29201 29202 29203 29204 29205 29206 29207 29208 29209 29210 29211 29212 29213 29214 29215 29216 29217 29218 29219 29220 29221 29222 29223 29224 29225 29226 29227 29228 29229 29230 29231 29232 29233 29234 29235 29236 29237 29238 29239 29240 29241 29242 29243 29244 29245 29246 29247 29248 29249 29250 29251 29252 29253 29254 29255 29256 29257 29258 29259 29260 29261 29262 29263 29264 29265 29266 29267 29268 29269 29270 29271 29272 29273 29274 29275 29276 29277 29278 29279 29280 29281 29282 29283 29284 29285 29286 29287 29288 29289 29290 29291 29292 29293 29294 29295 29296 29297 29298 29299 29300 29301 29302 29303 29304 29305 29306 29307 29308 29309 29310 29311 29312 29313 29314 29315 29316 29317 29318 29319 29320 29321 29322 29323 29324 29325 29326 29327 29328 29329 29330 29331 29332 29333 29334 29335 29336 29337 29338 29339 29340 29341 29342 29343 29344 29345 29346 29347 29348 29349 29350 29351 29352 29353 29354 29355 29356 29357 29358 29359 29360 29361 29362 29363 29364 29365 29366 29367 29368 29369 29370 29371 29372 29373 29374 29375 29376 29377 29378 29379 29380 29381 29382 29383 29384 29385 29386 29387 29388 29389 29390 29391 29392 29393 29394 29395 29396 29397 29398 29399 29400 29401 29402 29403 29404 29405 29406 29407 29408 29409 29410 29411 29412 29413 29414 29415 29416 29417 29418 29419 29420 29421 29422 29423 29424 29425 29426 29427 29428 29429 29430 29431 29432 29433 29434 29435 29436 29437 29438 29439 29440 29441 29442 29443 29444 29445 29446 29447 29448 29449 29450 29451 29452 29453 29454 29455 29456 29457 29458 29459 29460 29461 29462 29463 29464 29465 29466 29467 29468 29469 29470 29471 29472 29473 29474 29475 29476 29477 29478 29479 29480 29481 29482 29483 29484 29485 29486 29487 29488 29489 29490 29491 29492 29493 29494 29495 29496 29497 29498 29499 29500 29501 29502 29503 29504 29505 29506 29507 29508 29509 29510 29511 29512 29513 29514 29515 29516 29517 29518 29519 29520 29521 29522 29523 29524 29525 29526 29527 29528 29529 29530 29531 29532 29533 29534 29535 29536 29537 29538 29539 29540 29541 29542 29543 29544 29545 29546 29547 29548 29549 29550 29551 29552 29553 29554 29555 29556 29557 29558 29559 29560 29561 29562 29563 29564 29565 29566 29567 29568 29569 29570 29571 29572 29573 29574 29575 29576 29577 29578 29579 29580 29581 29582 29583 29584 29585 29586 29587 29588 29589 29590 29591 29592 29593 29594 29595 29596 29597 29598 29599 29600 29601 29602 29603 29604 29605 29606 29607 29608 29609 29610 29611 29612 29613 29614 29615 29616 29617 29618 29619 29620 29621 29622 29623 29624 29625 29626 29627 29628 29629 29630 29631 29632 29633 29634 29635 29636 29637 29638 29639 29640 29641 29642 29643 29644 29645 29646 29647 29648 29649 29650 29651 29652 29653 29654 29655 29656 29657 29658 29659 29660 29661 29662 29663 29664 29665 29666 29667 29668 29669 29670 29671 29672 29673 29674 29675 29676 29677 29678 29679 29680 29681 29682 29683 29684 29685 29686 29687 29688 29689 29690 29691 29692 29693 29694 29695 29696 29697 29698 29699 29700 29701 29702 29703 29704 29705 29706 29707 29708 29709 29710 29711 29712 29713 29714 29715 29716 29717 29718 29719 29720 29721 29722 29723 29724 29725 29726 29727 29728 29729 29730 29731 29732 29733 29734 29735 29736 29737 29738 29739 29740 29741 29742 29743 29744 29745 29746 29747 29748 29749 29750 29751 29752 29753 29754 29755 29756 29757 29758 29759 29760 29761 29762 29763 29764 29765 29766 29767 29768 29769 29770 29771 29772 29773 29774 29775 29776 29777 29778 29779 29780 29781 29782 29783 29784 29785 29786 29787 29788 29789 29790 29791 29792 29793 29794 29795 29796 29797 29798 29799 29800 29801 29802 29803 29804 29805 29806 29807 29808 29809 29810 29811 29812 29813 29814 29815 29816 29817 29818 29819 29820 29821 29822 29823 29824 29825 29826 29827 29828 29829 29830 29831 29832 29833 29834 29835 29836 29837 29838 29839 29840 29841 29842 29843 29844 29845 29846 29847 29848 29849 29850 29851 29852 29853 29854 29855 29856 29857 29858 29859 29860 29861 29862 29863 29864 29865 29866 29867 29868 29869 29870 29871 29872 29873 29874 29875 29876 29877 29878 29879 29880 29881 29882 29883 29884 29885 29886 29887 29888 29889 29890 29891 29892 29893 29894 29895 29896 29897 29898 29899 29900 29901 29902 29903 29904 29905 29906 29907 29908 29909 29910 29911 29912 29913 29914 29915 29916 29917 29918 29919 29920 29921 29922 29923 29924 29925 29926 29927 29928 29929 29930 29931 29932 29933 29934 29935 29936 29937 29938 29939 29940 29941 29942 29943 29944 29945 29946 29947 29948 29949 29950 29951 29952 29953 29954 29955 29956 29957 29958 29959 29960 29961 29962 29963 29964 29965 29966 29967 29968 29969 29970 29971 29972 29973 29974 29975 29976 29977 29978 29979 29980 29981 29982 29983 29984 29985 29986 29987 29988 29989 29990 29991 29992 29993 29994 29995 29996 29997 29998 29999 30000 30001 30002 30003 30004 30005 30006 30007 30008 30009 30010 30011 30012 30013 30014 30015 30016 30017 30018 30019 30020 30021 30022 30023 30024 30025 30026 30027 30028 30029 30030 30031 30032 30033 30034 30035 30036 30037 30038 30039 30040 30041 30042 30043 30044 30045 30046 30047 30048 30049 30050 30051 30052 30053 30054 30055 30056 30057 30058 30059 30060 30061 30062 30063 30064 30065 30066 30067 30068 30069 30070 30071 30072 30073 30074 30075 30076 30077 30078 30079 30080 30081 30082 30083 30084 30085 30086 30087 30088 30089 30090 30091 30092 30093 30094 30095 30096 30097 30098 30099 30100 30101 30102 30103 30104 30105 30106 30107 30108 30109 30110 30111 30112 30113 30114 30115 30116 30117 30118 30119 30120 30121 30122 30123 30124 30125 30126 30127 30128 30129 30130 30131 30132 30133 30134 30135 30136 30137 30138 30139 30140 30141 30142 30143 30144 30145 30146 30147 30148 30149 30150 30151 30152 30153 30154 30155 30156 30157 30158 30159 30160 30161 30162 30163 30164 30165 30166 30167 30168 30169 30170 30171 30172 30173 30174 30175 30176 30177 30178 30179 30180 30181 30182 30183 30184 30185 30186 30187 30188 30189 30190 30191 30192 30193 30194 30195 30196 30197 30198 30199 30200 30201 30202 30203 30204 30205 30206 30207 30208 30209 30210 30211 30212 30213 30214 30215 30216 30217 30218 30219 30220 30221 30222 30223 30224 30225 30226 30227 30228 30229 30230 30231 30232 30233 30234 30235 30236 30237 30238 30239 30240 30241 30242 30243 30244 30245 30246 30247 30248 30249 30250 30251 30252 30253 30254 30255 30256 30257 30258 30259 30260 30261 30262 30263 30264 30265 30266 30267 30268 30269 30270 30271 30272 30273 30274 30275 30276 30277 30278 30279 30280 30281 30282 30283 30284 30285 30286 30287 30288 30289 30290 30291 30292 30293 30294 30295 30296 30297 30298 30299 30300 30301 30302 30303 30304 30305 30306 30307 30308 30309 30310 30311 30312 30313 30314 30315 30316 30317 30318 30319 30320 30321 30322 30323 30324 30325 30326 30327 30328 30329 30330 30331 30332 30333 30334 30335 30336 30337 30338 30339 30340 30341 30342 30343 30344 30345 30346 30347 30348 30349 30350 30351 30352 30353 30354 30355 30356 30357 30358 30359 30360 30361 30362 30363 30364 30365 30366 30367 30368 30369 30370 30371 30372 30373 30374 30375 30376 30377 30378 30379 30380 30381 30382 30383 30384 30385 30386 30387 30388 30389 30390 30391 30392 30393 30394 30395 30396 30397 30398 30399 30400 30401 30402 30403 30404 30405 30406 30407 30408 30409 30410 30411 30412 30413 30414 30415 30416 30417 30418 30419 30420 30421 30422 30423 30424 30425 30426 30427 30428 30429 30430 30431 30432 30433 30434 30435 30436 30437 30438 30439 30440 30441 30442 30443 30444 30445 30446 30447 30448 30449 30450 30451 30452 30453 30454 30455 30456 30457 30458 30459 30460 30461 30462 30463 30464 30465 30466 30467 30468 30469 30470 30471 30472 30473 30474 30475 30476 30477 30478 30479 30480 30481 30482 30483 30484 30485 30486 30487 30488 30489 30490 30491 30492 30493 30494 30495 30496 30497 30498 30499 30500 30501 30502 30503 30504 30505 30506 30507 30508 30509 30510 30511 30512 30513 30514 30515 30516 30517 30518 30519 30520 30521 30522 30523 30524 30525 30526 30527 30528 30529 30530 30531 30532 30533 30534 30535 30536 30537 30538 30539 30540 30541 30542 30543 30544 30545 30546 30547 30548 30549 30550 30551 30552 30553 30554 30555 30556 30557 30558 30559 30560 30561 30562 30563 30564 30565 30566 30567 30568 30569 30570 30571 30572 30573 30574 30575 30576 30577 30578 30579 30580 30581 30582 30583 30584 30585 30586 30587 30588 30589 30590 30591 30592 30593 30594 30595 30596 30597 30598 30599 30600 30601 30602 30603 30604 30605 30606 30607 30608 30609 30610 30611 30612 30613 30614 30615 30616 30617 30618 30619 30620 30621 30622 30623 30624 30625 30626 30627 30628 30629 30630 30631 30632 30633 30634 30635 30636 30637 30638 30639 30640 30641 30642 30643 30644 30645 30646 30647 30648 30649 30650 30651 30652 30653 30654 30655 30656 30657 30658 30659 30660 30661 30662 30663 30664 30665 30666 30667 30668 30669 30670 30671 30672 30673 30674 30675 30676 30677 30678 30679 30680 30681 30682 30683 30684 30685 30686 30687 30688 30689 30690 30691 30692 30693 30694 30695 30696 30697 30698 30699 30700 30701 30702 30703 30704 30705 30706 30707 30708 30709 30710 30711 30712 30713 30714 30715 30716 30717 30718 30719 30720 30721 30722 30723 30724 30725 30726 30727 30728 30729 30730 30731 30732 30733 30734 30735 30736 30737 30738 30739 30740 30741 30742 30743 30744 30745 30746 30747 30748 30749 30750 30751 30752 30753 30754 30755 30756 30757 30758 30759 30760 30761 30762 30763 30764 30765 30766 30767 30768 30769 30770 30771 30772 30773 30774 30775 30776 30777 30778 30779 30780 30781 30782 30783 30784 30785 30786 30787 30788 30789 30790 30791 30792 30793 30794 30795 30796 30797 30798 30799 30800 30801 30802 30803 30804 30805 30806 30807 30808 30809 30810 30811 30812 30813 30814 30815 30816 30817 30818 30819 30820 30821 30822 30823 30824 30825 30826 30827 30828 30829 30830 30831 30832 30833 30834 30835 30836 30837 30838 30839 30840 30841 30842 30843 30844 30845 30846 30847 30848 30849 30850 30851 30852 30853 30854 30855 30856 30857 30858 30859 30860 30861 30862 30863 30864 30865 30866 30867 30868 30869 30870 30871 30872 30873 30874 30875 30876 30877 30878 30879 30880 30881 30882 30883 30884 30885 30886 30887 30888 30889 30890 30891 30892 30893 30894 30895 30896 30897 30898 30899 30900 30901 30902 30903 30904 30905 30906 30907 30908 30909 30910 30911 30912 30913 30914 30915 30916 30917 30918 30919 30920 30921 30922 30923 30924 30925 30926 30927 30928 30929 30930 30931 30932 30933 30934 30935 30936 30937 30938 30939 30940 30941 30942 30943 30944 30945 30946 30947 30948 30949 30950 30951 30952 30953 30954 30955 30956 30957 30958 30959 30960 30961 30962 30963 30964 30965 30966 30967 30968 30969 30970 30971 30972 30973 30974 30975 30976 30977 30978 30979 30980 30981 30982 30983 30984 30985 30986 30987 30988 30989 30990 30991 30992 30993 30994 30995 30996 30997 30998 30999 31000 31001 31002 31003 31004 31005 31006 31007 31008 31009 31010 31011 31012 31013 31014 31015 31016 31017 31018 31019 31020 31021 31022 31023 31024 31025 31026 31027 31028 31029 31030 31031 31032 31033 31034 31035 31036 31037 31038 31039 31040 31041 31042 31043 31044 31045 31046 31047 31048 31049 31050 31051 31052 31053 31054 31055 31056 31057 31058 31059 31060 31061 31062 31063 31064 31065 31066 31067 31068 31069 31070 31071 31072 31073 31074 31075 31076 31077 31078 31079 31080 31081 31082 31083 31084 31085 31086 31087 31088 31089 31090 31091 31092 31093 31094 31095 31096 31097 31098 31099 31100 31101 31102 31103 31104 31105 31106 31107 31108 31109 31110 31111 31112 31113 31114 31115 31116 31117 31118 31119 31120 31121 31122 31123 31124 31125 31126 31127 31128 31129 31130 31131 31132 31133 31134 31135 31136 31137 31138 31139 31140 31141 31142 31143 31144 31145 31146 31147 31148 31149 31150 31151 31152 31153 31154 31155 31156 31157 31158 31159 31160 31161 31162 31163 31164 31165 31166 31167 31168 31169 31170 31171 31172 31173 31174 31175 31176 31177 31178 31179 31180 31181 31182 31183 31184 31185 31186 31187 31188 31189 31190 31191 31192 31193 31194 31195 31196 31197 31198 31199 31200 31201 31202 31203 31204 31205 31206 31207 31208 31209 31210 31211 31212 31213 31214 31215 31216 31217 31218 31219 31220 31221 31222 31223 31224 31225 31226 31227 31228 31229 31230 31231 31232 31233 31234 31235 31236 31237 31238 31239 31240 31241 31242 31243 31244 31245 31246 31247 31248 31249 31250 31251 31252 31253 31254 31255 31256 31257 31258 31259 31260 31261 31262 31263 31264 31265 31266 31267 31268 31269 31270 31271 31272 31273 31274 31275 31276 31277 31278 31279 31280 31281 31282 31283 31284 31285 31286 31287 31288 31289 31290 31291 31292 31293 31294 31295 31296 31297 31298 31299 31300 31301 31302 31303 31304 31305 31306 31307 31308 31309 31310 31311 31312 31313 31314 31315 31316 31317 31318 31319 31320 31321 31322 31323 31324 31325 31326 31327 31328 31329 31330 31331 31332 31333 31334 31335 31336 31337 31338 31339 31340 31341 31342 31343 31344 31345 31346 31347 31348 31349 31350 31351 31352 31353 31354 31355 31356 31357 31358 31359 31360 31361 31362 31363 31364 31365 31366 31367 31368 31369 31370 31371 31372 31373 31374 31375 31376 31377 31378 31379 31380 31381 31382 31383 31384 31385 31386 31387 31388 31389 31390 31391 31392 31393 31394 31395 31396 31397 31398 31399 31400 31401 31402 31403 31404 31405 31406 31407 31408 31409 31410 31411 31412 31413 31414 31415 31416 31417 31418 31419 31420 31421 31422 31423 31424 31425 31426 31427 31428 31429 31430 31431 31432 31433 31434 31435 31436 31437 31438 31439 31440 31441 31442 31443 31444 31445 31446 31447 31448 31449 31450 31451 31452 31453 31454 31455 31456 31457 31458 31459 31460 31461 31462 31463 31464 31465 31466 31467 31468 31469 31470 31471 31472 31473 31474 31475 31476 31477 31478 31479 31480 31481 31482 31483 31484 31485 31486 31487 31488 31489 31490 31491 31492 31493 31494 31495 31496 31497 31498 31499 31500 31501 31502 31503 31504 31505 31506 31507 31508 31509 31510 31511 31512 31513 31514 31515 31516 31517 31518 31519 31520 31521 31522 31523 31524 31525 31526 31527 31528 31529 31530 31531 31532 31533 31534 31535 31536 31537 31538 31539 31540 31541 31542 31543 31544 31545 31546 31547 31548 31549 31550 31551 31552 31553 31554 31555 31556 31557 31558 31559 31560 31561 31562 31563 31564 31565 31566 31567 31568 31569 31570 31571 31572 31573 31574 31575 31576 31577 31578 31579 31580 31581 31582 31583 31584 31585 31586 31587 31588 31589 31590 31591 31592 31593 31594 31595 31596 31597 31598 31599 31600 31601 31602 31603 31604 31605 31606 31607 31608 31609 31610 31611 31612 31613 31614 31615 31616 31617 31618 31619 31620 31621 31622 31623 31624 31625 31626 31627 31628 31629 31630 31631 31632 31633 31634 31635 31636 31637 31638 31639 31640 31641 31642 31643 31644 31645 31646 31647 31648 31649 31650 31651 31652 31653 31654 31655 31656 31657 31658 31659 31660 31661 31662 31663 31664 31665 31666 31667 31668 31669 31670 31671 31672 31673 31674 31675 31676 31677 31678 31679 31680 31681 31682 31683 31684 31685 31686 31687 31688 31689 31690 31691 31692 31693 31694 31695 31696 31697 31698 31699 31700 31701 31702 31703 31704 31705 31706 31707 31708 31709 31710 31711 31712 31713 31714 31715 31716 31717 31718 31719 31720 31721 31722 31723 31724 31725 31726 31727 31728 31729 31730 31731 31732 31733 31734 31735 31736 31737 31738 31739 31740 31741 31742 31743 31744 31745 31746 31747 31748 31749 31750 31751 31752 31753 31754 31755 31756 31757 31758 31759 31760 31761 31762 31763 31764 31765 31766 31767 31768 31769 31770 31771 31772 31773 31774 31775 31776 31777 31778 31779 31780 31781 31782 31783 31784 31785 31786 31787 31788 31789 31790 31791 31792 31793 31794 31795 31796 31797 31798 31799 31800 31801 31802 31803 31804 31805 31806 31807 31808 31809 31810 31811 31812 31813 31814 31815 31816 31817 31818 31819 31820 31821 31822 31823 31824 31825 31826 31827 31828 31829 31830 31831 31832 31833 31834 31835 31836 31837 31838 31839 31840 31841 31842 31843 31844 31845 31846 31847 31848 31849 31850 31851 31852 31853 31854 31855 31856 31857 31858 31859 31860 31861 31862 31863 31864 31865 31866 31867 31868 31869 31870 31871 31872 31873 31874 31875 31876 31877 31878 31879 31880 31881 31882 31883 31884 31885 31886 31887 31888 31889 31890 31891 31892 31893 31894 31895 31896 31897 31898 31899 31900 31901 31902 31903 31904 31905 31906 31907 31908 31909 31910 31911 31912 31913 31914 31915 31916 31917 31918 31919 31920 31921 31922 31923 31924 31925 31926 31927 31928 31929 31930 31931 31932 31933 31934 31935 31936 31937 31938 31939 31940 31941 31942 31943 31944 31945 31946 31947 31948 31949 31950 31951 31952 31953 31954 31955 31956 31957 31958 31959 31960 31961 31962 31963 31964 31965 31966 31967 31968 31969 31970 31971 31972 31973 31974 31975 31976 31977 31978 31979 31980 31981 31982 31983 31984 31985 31986 31987 31988 31989 31990 31991 31992 31993 31994 31995 31996 31997 31998 31999 32000 32001 32002 32003 32004 32005 32006 32007 32008 32009 32010 32011 32012 32013 32014 32015 32016 32017 32018 32019 32020 32021 32022 32023 32024 32025 32026 32027 32028 32029 32030 32031 32032 32033 32034 32035 32036 32037 32038 32039 32040 32041 32042 32043 32044 32045 32046 32047 32048 32049 32050 32051 32052 32053 32054 32055 32056 32057 32058 32059 32060 32061 32062 32063 32064 32065 32066 32067 32068 32069 32070 32071 32072 32073 32074 32075 32076 32077 32078 32079 32080 32081 32082 32083 32084 32085 32086 32087 32088 32089 32090 32091 32092 32093 32094 32095 32096 32097 32098 32099 32100 32101 32102 32103 32104 32105 32106 32107 32108 32109 32110 32111 32112 32113 32114 32115 32116 32117 32118 32119 32120 32121 32122 32123 32124 32125 32126 32127 32128 32129 32130 32131 32132 32133 32134 32135 32136 32137 32138 32139 32140 32141 32142 32143 32144 32145 32146 32147 32148 32149 32150 32151 32152 32153 32154 32155 32156 32157 32158 32159 32160 32161 32162 32163 32164 32165 32166 32167 32168 32169 32170 32171 32172 32173 32174 32175 32176 32177 32178 32179 32180 32181 32182 32183 32184 32185 32186 32187 32188 32189 32190 32191 32192 32193 32194 32195 32196 32197 32198 32199 32200 32201 32202 32203 32204 32205 32206 32207 32208 32209 32210 32211 32212 32213 32214 32215 32216 32217 32218 32219 32220 32221 32222 32223 32224 32225 32226 32227 32228 32229 32230 32231 32232 32233 32234 32235 32236 32237 32238 32239 32240 32241 32242 32243 32244 32245 32246 32247 32248 32249 32250 32251 32252 32253 32254 32255 32256 32257 32258 32259 32260 32261 32262 32263 32264 32265 32266 32267 32268 32269 32270 32271 32272 32273 32274 32275 32276 32277 32278 32279 32280 32281 32282 32283 32284 32285 32286 32287 32288 32289 32290 32291 32292 32293 32294 32295 32296 32297 32298 32299 32300 32301 32302 32303 32304 32305 32306 32307 32308 32309 32310 32311 32312 32313 32314 32315 32316 32317 32318 32319 32320 32321 32322 32323 32324 32325 32326 32327 32328 32329 32330 32331 32332 32333 32334 32335 32336 32337 32338 32339 32340 32341 32342 32343 32344 32345 32346 32347 32348 32349 32350 32351 32352 32353 32354 32355 32356 32357 32358 32359 32360 32361 32362 32363 32364 32365 32366 32367 32368 32369 32370 32371 32372 32373 32374 32375 32376 32377 32378 32379 32380 32381 32382 32383 32384 32385 32386 32387 32388 32389 32390 32391 32392 32393 32394 32395 32396 32397 32398 32399 32400 32401 32402 32403 32404 32405 32406 32407 32408 32409 32410 32411 32412 32413 32414 32415 32416 32417 32418 32419 32420 32421 32422 32423 32424 32425 32426 32427 32428 32429 32430 32431 32432 32433 32434 32435 32436 32437 32438 32439 32440 32441 32442 32443 32444 32445 32446 32447 32448 32449 32450 32451 32452 32453 32454 32455 32456 32457 32458 32459 32460 32461 32462 32463 32464 32465 32466 32467 32468 32469 32470 32471 32472 32473 32474 32475 32476 32477 32478 32479 32480 32481 32482 32483 32484 32485 32486 32487 32488 32489 32490 32491 32492 32493 32494 32495 32496 32497 32498 32499 32500 32501 32502 32503 32504 32505 32506 32507 32508 32509 32510 32511 32512 32513 32514 32515 32516 32517 32518 32519 32520 32521 32522 32523 32524 32525 32526 32527 32528 32529 32530 32531 32532 32533 32534 32535 32536 32537 32538 32539 32540 32541 32542 32543 32544 32545 32546 32547 32548 32549 32550 32551 32552 32553 32554 32555 32556 32557 32558 32559 32560 32561 32562 32563 32564 32565 32566 32567 32568 32569 32570 32571 32572 32573 32574 32575 32576 32577 32578 32579 32580 32581 32582 32583 32584 32585 32586 32587 32588 32589 32590 32591 32592 32593 32594 32595 32596 32597 32598 32599 32600 32601 32602 32603 32604 32605 32606 32607 32608 32609 32610 32611 32612 32613 32614 32615 32616 32617 32618 32619 32620 32621 32622 32623 32624 32625 32626 32627 32628 32629 32630 32631 32632 32633 32634 32635 32636 32637 32638 32639 32640 32641 32642 32643 32644 32645 32646 32647 32648 32649 32650 32651 32652 32653 32654 32655 32656 32657 32658 32659 32660 32661 32662 32663 32664 32665 32666 32667 32668 32669 32670 32671 32672 32673 32674 32675 32676 32677 32678 32679 32680 32681 32682 32683 32684 32685 32686 32687 32688 32689 32690 32691 32692 32693 32694 32695 32696 32697 32698 32699 32700 32701 32702 32703 32704 32705 32706 32707 32708 32709 32710 32711 32712 32713 32714 32715 32716 32717 32718 32719 32720 32721 32722 32723 32724 32725 32726 32727 32728 32729 32730 32731 32732 32733 32734 32735 32736 32737 32738 32739 32740 32741 32742 32743 32744 32745 32746 32747 32748 32749 32750 32751 32752 32753 32754 32755 32756 32757 32758 32759 32760 32761 32762 32763 32764 32765 32766 32767 32768 32769 32770 32771 32772 32773 32774 32775 32776 32777 32778 32779 32780 32781 32782 32783 32784 32785 32786 32787 32788 32789 32790 32791 32792 32793 32794 32795 32796 32797 32798 32799 32800 32801 32802 32803 32804 32805 32806 32807 32808 32809 32810 32811 32812 32813 32814 32815 32816 32817 32818 32819 32820 32821 32822 32823 32824 32825 32826 32827 32828 32829 32830 32831 32832 32833 32834 32835 32836 32837 32838 32839 32840 32841 32842 32843 32844 32845 32846 32847 32848 32849 32850 32851 32852 32853 32854 32855 32856 32857 32858 32859 32860 32861 32862 32863 32864 32865 32866 32867 32868 32869 32870 32871 32872 32873 32874 32875 32876 32877 32878 32879 32880 32881 32882 32883 32884 32885 32886 32887 32888 32889 32890 32891 32892 32893 32894 32895 32896 32897 32898 32899 32900 32901 32902 32903 32904 32905 32906 32907 32908 32909 32910 32911 32912 32913 32914 32915 32916 32917 32918 32919 32920 32921 32922 32923 32924 32925 32926 32927 32928 32929 32930 32931 32932 32933 32934 32935 32936 32937 32938 32939 32940 32941 32942 32943 32944 32945 32946 32947 32948 32949 32950 32951 32952 32953 32954 32955 32956 32957 32958 32959 32960 32961 32962 32963 32964 32965 32966 32967 32968 32969 32970 32971 32972 32973 32974 32975 32976 32977 32978 32979 32980 32981 32982 32983 32984 32985 32986 32987 32988 32989 32990 32991 32992 32993 32994 32995 32996 32997 32998 32999 33000 33001 33002 33003 33004 33005 33006 33007 33008 33009 33010 33011 33012 33013 33014 33015 33016 33017 33018 33019 33020 33021 33022 33023 33024 33025 33026 33027 33028 33029 33030 33031 33032 33033 33034 33035 33036 33037 33038 33039 33040 33041 33042 33043 33044 33045 33046 33047 33048 33049 33050 33051 33052 33053 33054 33055 33056 33057 33058 33059 33060 33061 33062 33063 33064 33065 33066 33067 33068 33069 33070 33071 33072 33073 33074 33075 33076 33077 33078 33079 33080 33081 33082 33083 33084 33085 33086 33087 33088 33089 33090 33091 33092 33093 33094 33095 33096 33097 33098 33099 33100 33101 33102 33103 33104 33105 33106 33107 33108 33109 33110 33111 33112 33113 33114 33115 33116 33117 33118 33119 33120 33121 33122 33123 33124 33125 33126 33127 33128 33129 33130 33131 33132 33133 33134 33135 33136 33137 33138 33139 33140 33141 33142 33143 33144 33145 33146 33147 33148 33149 33150 33151 33152 33153 33154 33155 33156 33157 33158 33159 33160 33161 33162 33163 33164 33165 33166 33167 33168 33169 33170 33171 33172 33173 33174 33175 33176 33177 33178 33179 33180 33181 33182 33183 33184 33185 33186 33187 33188 33189 33190 33191 33192 33193 33194 33195 33196 33197 33198 33199 33200 33201 33202 33203 33204 33205 33206 33207 33208 33209 33210 33211 33212 33213 33214 33215 33216 33217 33218 33219 33220 33221 33222 33223 33224 33225 33226 33227 33228 33229 33230 33231 33232 33233 33234 33235 33236 33237 33238 33239 33240 33241 33242 33243 33244 33245 33246 33247 33248 33249 33250 33251 33252 33253 33254 33255 33256 33257 33258 33259 33260 33261 33262 33263 33264 33265 33266 33267 33268 33269 33270 33271 33272 33273 33274 33275 33276 33277 33278 33279 33280 33281 33282 33283 33284 33285 33286 33287 33288 33289 33290 33291 33292 33293 33294 33295 33296 33297 33298 33299 33300 33301 33302 33303 33304 33305 33306 33307 33308 33309 33310 33311 33312 33313 33314 33315 33316 33317 33318 33319 33320 33321 33322 33323 33324 33325 33326 33327 33328 33329 33330 33331 33332 33333 33334 33335 33336 33337 33338 33339 33340 33341 33342 33343 33344 33345 33346 33347 33348 33349 33350 33351 33352 33353 33354 33355 33356 33357 33358 33359 33360 33361 33362 33363 33364 33365 33366 33367 33368 33369 33370 33371 33372 33373 33374 33375 33376 33377 33378 33379 33380 33381 33382 33383 33384 33385 33386 33387 33388 33389 33390 33391 33392 33393 33394 33395 33396 33397 33398 33399 33400 33401 33402 33403 33404 33405 33406 33407 33408 33409 33410 33411 33412 33413 33414 33415 33416 33417 33418 33419 33420 33421 33422 33423 33424 33425 33426 33427 33428 33429 33430 33431 33432 33433 33434 33435 33436 33437 33438 33439 33440 33441 33442 33443 33444 33445 33446 33447 33448 33449 33450 33451 33452 33453 33454 33455 33456 33457 33458 33459 33460 33461 33462 33463 33464 33465 33466 33467 33468 33469 33470 33471 33472 33473 33474 33475 33476 33477 33478 33479 33480 33481 33482 33483 33484 33485 33486 33487 33488 33489 33490 33491 33492 33493 33494 33495 33496 33497 33498 33499 33500 33501 33502 33503 33504 33505 33506 33507 33508 33509 33510 33511 33512 33513 33514 33515 33516 33517 33518 33519 33520 33521 33522 33523 33524 33525 33526 33527 33528 33529 33530 33531 33532 33533 33534 33535 33536 33537 33538 33539 33540 33541 33542 33543 33544 33545 33546 33547 33548 33549 33550 33551 33552 33553 33554 33555 33556 33557 33558 33559 33560 33561 33562 33563 33564 33565 33566 33567 33568 33569 33570 33571 33572 33573 33574 33575 33576 33577 33578 33579 33580 33581 33582 33583 33584 33585 33586 33587 33588 33589 33590 33591 33592 33593 33594 33595 33596 33597 33598 33599 33600 33601 33602 33603 33604 33605 33606 33607 33608 33609 33610 33611 33612 33613 33614 33615 33616 33617 33618 33619 33620 33621 33622 33623 33624 33625 33626 33627 33628 33629 33630 33631 33632 33633 33634 33635 33636 33637 33638 33639 33640 33641 33642 33643 33644 33645 33646 33647 33648 33649 33650 33651 33652 33653 33654 33655 33656 33657 33658 33659 33660 33661 33662 33663 33664 33665 33666 33667 33668 33669 33670 33671 33672 33673 33674 33675 33676 33677 33678 33679 33680 33681 33682 33683 33684 33685 33686 33687 33688 33689 33690 33691 33692 33693 33694 33695 33696 33697 33698 33699 33700 33701 33702 33703 33704 33705 33706 33707 33708 33709 33710 33711 33712 33713 33714 33715 33716 33717 33718 33719 33720 33721 33722 33723 33724 33725 33726 33727 33728 33729 33730 33731 33732 33733 33734 33735 33736 33737 33738 33739 33740 33741 33742 33743 33744 33745 33746 33747 33748 33749 33750 33751 33752 33753 33754 33755 33756 33757 33758 33759 33760 33761 33762 33763 33764 33765 33766 33767 33768 33769 33770 33771 33772 33773 33774 33775 33776 33777 33778 33779 33780 33781 33782 33783 33784 33785 33786 33787 33788 33789 33790 33791 33792 33793 33794 33795 33796 33797 33798 33799 33800 33801 33802 33803 33804 33805 33806 33807 33808 33809 33810 33811 33812 33813 33814 33815 33816 33817 33818 33819 33820 33821 33822 33823 33824 33825 33826 33827 33828 33829 33830 33831 33832 33833 33834 33835 33836 33837 33838 33839 33840 33841 33842 33843 33844 33845 33846 33847 33848 33849 33850 33851 33852 33853 33854 33855 33856 33857 33858 33859 33860 33861 33862 33863 33864 33865 33866 33867 33868 33869 33870 33871 33872 33873 33874 33875 33876 33877 33878 33879 33880 33881 33882 33883 33884 33885 33886 33887 33888 33889 33890 33891 33892 33893 33894 33895 33896 33897 33898 33899 33900 33901 33902 33903 33904 33905 33906 33907 33908 33909 33910 33911 33912 33913 33914 33915 33916 33917 33918 33919 33920 33921 33922 33923 33924 33925 33926 33927 33928 33929 33930 33931 33932 33933 33934 33935 33936 33937 33938 33939 33940 33941 33942 33943 33944 33945 33946 33947 33948 33949 33950 33951 33952 33953 33954 33955 33956 33957 33958 33959 33960 33961 33962 33963 33964 33965 33966 33967 33968 33969 33970 33971 33972 33973 33974 33975 33976 33977 33978 33979 33980 33981 33982 33983 33984 33985 33986 33987 33988 33989 33990 33991 33992 33993 33994 33995 33996 33997 33998 33999 34000 34001 34002 34003 34004 34005 34006 34007 34008 34009 34010 34011 34012 34013 34014 34015 34016 34017 34018 34019 34020 34021 34022 34023 34024 34025 34026 34027 34028 34029 34030 34031 34032 34033 34034 34035 34036 34037 34038 34039 34040 34041 34042 34043 34044 34045 34046 34047 34048 34049 34050 34051 34052 34053 34054 34055 34056 34057 34058 34059 34060 34061 34062 34063 34064 34065 34066 34067 34068 34069 34070 34071 34072 34073 34074 34075 34076 34077 34078 34079 34080 34081 34082 34083 34084 34085 34086 34087 34088 34089 34090 34091 34092 34093 34094 34095 34096 34097 34098 34099 34100 34101 34102 34103 34104 34105 34106 34107 34108 34109 34110 34111 34112 34113 34114 34115 34116 34117 34118 34119 34120 34121 34122 34123 34124 34125 34126 34127 34128 34129 34130 34131 34132 34133 34134 34135 34136 34137 34138 34139 34140 34141 34142 34143 34144 34145 34146 34147 34148 34149 34150 34151 34152 34153 34154 34155 34156 34157 34158 34159 34160 34161 34162 34163 34164 34165 34166 34167 34168 34169 34170 34171 34172 34173 34174 34175 34176 34177 34178 34179 34180 34181 34182 34183 34184 34185 34186 34187 34188 34189 34190 34191 34192 34193 34194 34195 34196 34197 34198 34199 34200 34201 34202 34203 34204 34205 34206 34207 34208 34209 34210 34211 34212 34213 34214 34215 34216 34217 34218 34219 34220 34221 34222 34223 34224 34225 34226 34227 34228 34229 34230 34231 34232 34233 34234 34235 34236 34237 34238 34239 34240 34241 34242 34243 34244 34245 34246 34247 34248 34249 34250 34251 34252 34253 34254 34255 34256 34257 34258 34259 34260 34261 34262 34263 34264 34265 34266 34267 34268 34269 34270 34271 34272 34273 34274 34275 34276 34277 34278 34279 34280 34281 34282 34283 34284 34285 34286 34287 34288 34289 34290 34291 34292 34293 34294 34295 34296 34297 34298 34299 34300 34301 34302 34303 34304 34305 34306 34307 34308 34309 34310 34311 34312 34313 34314 34315 34316 34317 34318 34319 34320 34321 34322 34323 34324 34325 34326 34327 34328 34329 34330 34331 34332 34333 34334 34335 34336 34337 34338 34339 34340 34341 34342 34343 34344 34345 34346 34347 34348 34349 34350 34351 34352 34353 34354 34355 34356 34357 34358 34359 34360 34361 34362 34363 34364 34365 34366 34367 34368 34369 34370 34371 34372 34373 34374 34375 34376 34377 34378 34379 34380 34381 34382 34383 34384 34385 34386 34387 34388 34389 34390 34391 34392 34393 34394 34395 34396 34397 34398 34399 34400 34401 34402 34403 34404 34405 34406 34407 34408 34409 34410 34411 34412 34413 34414 34415 34416 34417 34418 34419 34420 34421 34422 34423 34424 34425 34426 34427 34428 34429 34430 34431 34432 34433 34434 34435 34436 34437 34438 34439 34440 34441 34442 34443 34444 34445 34446 34447 34448 34449 34450 34451 34452 34453 34454 34455 34456 34457 34458 34459 34460 34461 34462 34463 34464 34465 34466 34467 34468 34469 34470 34471 34472 34473 34474 34475 34476 34477 34478 34479 34480 34481 34482 34483 34484 34485 34486 34487 34488 34489 34490 34491 34492 34493 34494 34495 34496 34497 34498 34499 34500 34501 34502 34503 34504 34505 34506 34507 34508 34509 34510 34511 34512 34513 34514 34515 34516 34517 34518 34519 34520 34521 34522 34523 34524 34525 34526 34527 34528 34529 34530 34531 34532 34533 34534 34535 34536 34537 34538 34539 34540 34541 34542 34543 34544 34545 34546 34547 34548 34549 34550 34551 34552 34553 34554 34555 34556 34557 34558 34559 34560 34561 34562 34563 34564 34565 34566 34567 34568 34569 34570 34571 34572 34573 34574 34575 34576 34577 34578 34579 34580 34581 34582 34583 34584 34585 34586 34587 34588 34589 34590 34591 34592 34593 34594 34595 34596 34597 34598 34599 34600 34601 34602 34603 34604 34605 34606 34607 34608 34609 34610 34611 34612 34613 34614 34615 34616 34617 34618 34619 34620 34621 34622 34623 34624 34625 34626 34627 34628 34629 34630 34631 34632 34633 34634 34635 34636 34637 34638 34639 34640 34641 34642 34643 34644 34645 34646 34647 34648 34649 34650 34651 34652 34653 34654 34655 34656 34657 34658 34659 34660 34661 34662 34663 34664 34665 34666 34667 34668 34669 34670 34671 34672 34673 34674 34675 34676 34677 34678 34679 34680 34681 34682 34683 34684 34685 34686 34687 34688 34689 34690 34691 34692 34693 34694 34695 34696 34697 34698 34699 34700 34701 34702 34703 34704 34705 34706 34707 34708 34709 34710 34711 34712 34713 34714 34715 34716 34717 34718 34719 34720 34721 34722 34723 34724 34725 34726 34727 34728 34729 34730 34731 34732 34733 34734 34735 34736 34737 34738 34739 34740 34741 34742 34743 34744 34745 34746 34747 34748 34749 34750 34751 34752 34753 34754 34755 34756 34757 34758 34759 34760 34761 34762 34763 34764 34765 34766 34767 34768 34769 34770 34771 34772 34773 34774 34775 34776 34777 34778 34779 34780 34781 34782 34783 34784 34785 34786 34787 34788 34789 34790 34791 34792 34793 34794 34795 34796 34797 34798 34799 34800 34801 34802 34803 34804 34805 34806 34807 34808 34809 34810 34811 34812 34813 34814 34815 34816 34817 34818 34819 34820 34821 34822 34823 34824 34825 34826 34827 34828 34829 34830 34831 34832 34833 34834 34835 34836 34837 34838 34839 34840 34841 34842 34843 34844 34845 34846 34847 34848 34849 34850 34851 34852 34853 34854 34855 34856 34857 34858 34859 34860 34861 34862 34863 34864 34865 34866 34867 34868 34869 34870 34871 34872 34873 34874 34875 34876 34877 34878 34879 34880 34881 34882 34883 34884 34885 34886 34887 34888 34889 34890 34891 34892 34893 34894 34895 34896 34897 34898 34899 34900 34901 34902 34903 34904 34905 34906 34907 34908 34909 34910 34911 34912 34913 34914 34915 34916 34917 34918 34919 34920 34921 34922 34923 34924 34925 34926 34927 34928 34929 34930 34931 34932 34933 34934 34935 34936 34937 34938 34939 34940 34941 34942 34943 34944 34945 34946 34947 34948 34949 34950 34951 34952 34953 34954 34955 34956 34957 34958 34959 34960 34961 34962 34963 34964 34965 34966 34967 34968 34969 34970 34971 34972 34973 34974 34975 34976 34977 34978 34979 34980 34981 34982 34983 34984 34985 34986 34987 34988 34989 34990 34991 34992 34993 34994 34995 34996 34997 34998 34999 35000 35001 35002 35003 35004 35005 35006 35007 35008 35009 35010 35011 35012 35013 35014 35015 35016 35017 35018 35019 35020 35021 35022 35023 35024 35025 35026 35027 35028 35029 35030 35031 35032 35033 35034 35035 35036 35037 35038 35039 35040 35041 35042 35043 35044 35045 35046 35047 35048 35049 35050 35051 35052 35053 35054 35055 35056 35057 35058 35059 35060 35061 35062 35063 35064 35065 35066 35067 35068 35069 35070 35071 35072 35073 35074 35075 35076 35077 35078 35079 35080 35081 35082 35083 35084 35085 35086 35087 35088 35089 35090 35091 35092 35093 35094 35095 35096 35097 35098 35099 35100 35101 35102 35103 35104 35105 35106 35107 35108 35109 35110 35111 35112 35113 35114 35115 35116 35117 35118 35119 35120 35121 35122 35123 35124 35125 35126 35127 35128 35129 35130 35131 35132 35133 35134 35135 35136 35137 35138 35139 35140 35141 35142 35143 35144 35145 35146 35147 35148 35149 35150 35151 35152 35153 35154 35155 35156 35157 35158 35159 35160 35161 35162 35163 35164 35165 35166 35167 35168 35169 35170 35171 35172 35173 35174 35175 35176 35177 35178 35179 35180 35181 35182 35183 35184 35185 35186 35187 35188 35189 35190 35191 35192 35193 35194 35195 35196 35197 35198 35199 35200 35201 35202 35203 35204 35205 35206 35207 35208 35209 35210 35211 35212 35213 35214 35215 35216 35217 35218 35219 35220 35221 35222 35223 35224 35225 35226 35227 35228 35229 35230 35231 35232 35233 35234 35235 35236 35237 35238 35239 35240 35241 35242 35243 35244 35245 35246 35247 35248 35249 35250 35251 35252 35253 35254 35255 35256 35257 35258 35259 35260 35261 35262 35263 35264 35265 35266 35267 35268 35269 35270 35271 35272 35273 35274 35275 35276 35277 35278 35279 35280 35281 35282 35283 35284 35285 35286 35287 35288 35289 35290 35291 35292 35293 35294 35295 35296 35297 35298 35299 35300 35301 35302 35303 35304 35305 35306 35307 35308 35309 35310 35311 35312 35313 35314 35315 35316 35317 35318 35319 35320 35321 35322 35323 35324 35325 35326 35327 35328 35329 35330 35331 35332 35333 35334 35335 35336 35337 35338 35339 35340 35341 35342 35343 35344 35345 35346 35347 35348 35349 35350 35351 35352 35353 35354 35355 35356 35357 35358 35359 35360 35361 35362 35363 35364 35365 35366 35367 35368 35369 35370 35371 35372 35373 35374 35375 35376 35377 35378 35379 35380 35381 35382 35383 35384 35385 35386 35387 35388 35389 35390 35391 35392 35393 35394 35395 35396 35397 35398 35399 35400 35401 35402 35403 35404 35405 35406 35407 35408 35409 35410 35411 35412 35413 35414 35415 35416 35417 35418 35419 35420 35421 35422 35423 35424 35425 35426 35427 35428 35429 35430 35431 35432 35433 35434 35435 35436 35437 35438 35439 35440 35441 35442 35443 35444 35445 35446 35447 35448 35449 35450 35451 35452 35453 35454 35455 35456 35457 35458 35459 35460 35461 35462 35463 35464 35465 35466 35467 35468 35469 35470 35471 35472 35473 35474 35475 35476 35477 35478 35479 35480 35481 35482 35483 35484 35485 35486 35487 35488 35489 35490 35491 35492 35493 35494 35495 35496 35497 35498 35499 35500 35501 35502 35503 35504 35505 35506 35507 35508 35509 35510 35511 35512 35513 35514 35515 35516 35517 35518 35519 35520 35521 35522 35523 35524 35525 35526 35527 35528 35529 35530 35531 35532 35533 35534 35535 35536 35537 35538 35539 35540 35541 35542 35543 35544 35545 35546 35547 35548 35549 35550 35551 35552 35553 35554 35555 35556 35557 35558 35559 35560 35561 35562 35563 35564 35565 35566 35567 35568 35569 35570 35571 35572 35573 35574 35575 35576 35577 35578 35579 35580 35581 35582 35583 35584 35585 35586 35587 35588 35589 35590 35591 35592 35593 35594 35595 35596 35597 35598 35599 35600 35601 35602 35603 35604 35605 35606 35607 35608 35609 35610 35611 35612 35613 35614 35615 35616 35617 35618 35619 35620 35621 35622 35623 35624 35625 35626 35627 35628 35629 35630 35631 35632 35633 35634 35635 35636 35637 35638 35639 35640 35641 35642 35643 35644 35645 35646 35647 35648 35649 35650 35651 35652 35653 35654 35655 35656 35657 35658 35659 35660 35661 35662 35663 35664 35665 35666 35667 35668 35669 35670 35671 35672 35673 35674 35675 35676 35677 35678 35679 35680 35681 35682 35683 35684 35685 35686 35687 35688 35689 35690 35691 35692 35693 35694 35695 35696 35697 35698 35699 35700 35701 35702 35703 35704 35705 35706 35707 35708 35709 35710 35711 35712 35713 35714 35715 35716 35717 35718 35719 35720 35721 35722 35723 35724 35725 35726 35727 35728 35729 35730 35731 35732 35733 35734 35735 35736 35737 35738 35739 35740 35741 35742 35743 35744 35745 35746 35747 35748 35749 35750 35751 35752 35753 35754 35755 35756 35757 35758 35759 35760 35761 35762 35763 35764 35765 35766 35767 35768 35769 35770 35771 35772 35773 35774 35775 35776 35777 35778 35779 35780 35781 35782 35783 35784 35785 35786 35787 35788 35789 35790 35791 35792 35793 35794 35795 35796 35797 35798 35799 35800 35801 35802 35803 35804 35805 35806 35807 35808 35809 35810 35811 35812 35813 35814 35815 35816 35817 35818 35819 35820 35821 35822 35823 35824 35825 35826 35827 35828 35829 35830 35831 35832 35833 35834 35835 35836 35837 35838 35839 35840 35841 35842 35843 35844 35845 35846 35847 35848 35849 35850 35851 35852 35853 35854 35855 35856 35857 35858 35859 35860 35861 35862 35863 35864 35865 35866 35867 35868 35869 35870 35871 35872 35873 35874 35875 35876 35877 35878 35879 35880 35881 35882 35883 35884 35885 35886 35887 35888 35889 35890 35891 35892 35893 35894 35895 35896 35897 35898 35899 35900 35901 35902 35903 35904 35905 35906 35907 35908 35909 35910 35911 35912 35913 35914 35915 35916 35917 35918 35919 35920 35921 35922 35923 35924 35925 35926 35927 35928 35929 35930 35931 35932 35933 35934 35935 35936 35937 35938 35939 35940 35941 35942 35943 35944 35945 35946 35947 35948 35949 35950 35951 35952 35953 35954 35955 35956 35957 35958 35959 35960 35961 35962 35963 35964 35965 35966 35967 35968 35969 35970 35971 35972 35973 35974 35975 35976 35977 35978 35979 35980 35981 35982 35983 35984 35985 35986 35987 35988 35989 35990 35991 35992 35993 35994 35995 35996 35997 35998 35999 36000 36001 36002 36003 36004 36005 36006 36007 36008 36009 36010 36011 36012 36013 36014 36015 36016 36017 36018 36019 36020 36021 36022 36023 36024 36025 36026 36027 36028 36029 36030 36031 36032 36033 36034 36035 36036 36037 36038 36039 36040 36041 36042 36043 36044 36045 36046 36047 36048 36049 36050 36051 36052 36053 36054 36055 36056 36057 36058 36059 36060 36061 36062 36063 36064 36065 36066 36067 36068 36069 36070 36071 36072 36073 36074 36075 36076 36077 36078 36079 36080 36081 36082 36083 36084 36085 36086 36087 36088 36089 36090 36091 36092 36093 36094 36095 36096 36097 36098 36099 36100 36101 36102 36103 36104 36105 36106 36107 36108 36109 36110 36111 36112 36113 36114 36115 36116 36117 36118 36119 36120 36121 36122 36123 36124 36125 36126 36127 36128 36129 36130 36131 36132 36133 36134 36135 36136 36137 36138 36139 36140 36141 36142 36143 36144 36145 36146 36147 36148 36149 36150 36151 36152 36153 36154 36155 36156 36157 36158 36159 36160 36161 36162 36163 36164 36165 36166 36167 36168 36169 36170 36171 36172 36173 36174 36175 36176 36177 36178 36179 36180 36181 36182 36183 36184 36185 36186 36187 36188 36189 36190 36191 36192 36193 36194 36195 36196 36197 36198 36199 36200 36201 36202 36203 36204 36205 36206 36207 36208 36209 36210 36211 36212 36213 36214 36215 36216 36217 36218 36219 36220 36221 36222 36223 36224 36225 36226 36227 36228 36229 36230 36231 36232 36233 36234 36235 36236 36237 36238 36239 36240 36241 36242 36243 36244 36245 36246 36247 36248 36249 36250 36251 36252 36253 36254 36255 36256 36257 36258 36259 36260 36261 36262 36263 36264 36265 36266 36267 36268 36269 36270 36271 36272 36273 36274 36275 36276 36277 36278 36279 36280 36281 36282 36283 36284 36285 36286 36287 36288 36289 36290 36291 36292 36293 36294 36295 36296 36297 36298 36299 36300 36301 36302 36303 36304 36305 36306 36307 36308 36309 36310 36311 36312 36313 36314 36315 36316 36317 36318 36319 36320 36321 36322 36323 36324 36325 36326 36327 36328 36329 36330 36331 36332 36333 36334 36335 36336 36337 36338 36339 36340 36341 36342 36343 36344 36345 36346 36347 36348 36349 36350 36351 36352 36353 36354 36355 36356 36357 36358 36359 36360 36361 36362 36363 36364 36365 36366 36367 36368 36369 36370 36371 36372 36373 36374 36375 36376 36377 36378 36379 36380 36381 36382 36383 36384 36385 36386 36387 36388 36389 36390 36391 36392 36393 36394 36395 36396 36397 36398 36399 36400 36401 36402 36403 36404 36405 36406 36407 36408 36409 36410 36411 36412 36413 36414 36415 36416 36417 36418 36419 36420 36421 36422 36423 36424 36425 36426 36427 36428 36429 36430 36431 36432 36433 36434 36435 36436 36437 36438 36439 36440 36441 36442 36443 36444 36445 36446 36447 36448 36449 36450 36451 36452 36453 36454 36455 36456 36457 36458 36459 36460 36461 36462 36463 36464 36465 36466 36467 36468 36469 36470 36471 36472 36473 36474 36475 36476 36477 36478 36479 36480 36481 36482 36483 36484 36485 36486 36487 36488 36489 36490 36491 36492 36493 36494 36495 36496 36497 36498 36499 36500 36501 36502 36503 36504 36505 36506 36507 36508 36509 36510 36511 36512 36513 36514 36515 36516 36517 36518 36519 36520 36521 36522 36523 36524 36525 36526 36527 36528 36529 36530 36531 36532 36533 36534 36535 36536 36537 36538 36539 36540 36541 36542 36543 36544 36545 36546 36547 36548 36549 36550 36551 36552 36553 36554 36555 36556 36557 36558 36559 36560 36561 36562 36563 36564 36565 36566 36567 36568 36569 36570 36571 36572 36573 36574 36575 36576 36577 36578 36579 36580 36581 36582 36583 36584 36585 36586 36587 36588 36589 36590 36591 36592 36593 36594 36595 36596 36597 36598 36599 36600 36601 36602 36603 36604 36605 36606 36607 36608 36609 36610 36611 36612 36613 36614 36615 36616 36617 36618 36619 36620 36621 36622 36623 36624 36625 36626 36627 36628 36629 36630 36631 36632 36633 36634 36635 36636 36637 36638 36639 36640 36641 36642 36643 36644 36645 36646 36647 36648 36649 36650 36651 36652 36653 36654 36655 36656 36657 36658 36659 36660 36661 36662 36663 36664 36665 36666 36667 36668 36669 36670 36671 36672 36673 36674 36675 36676 36677 36678 36679 36680 36681 36682 36683 36684 36685 36686 36687 36688 36689 36690 36691 36692 36693 36694 36695 36696 36697 36698 36699 36700 36701 36702 36703 36704 36705 36706 36707 36708 36709 36710 36711 36712 36713 36714 36715 36716 36717 36718 36719 36720 36721 36722 36723 36724 36725 36726 36727 36728 36729 36730 36731 36732 36733 36734 36735 36736 36737 36738 36739 36740 36741 36742 36743 36744 36745 36746 36747 36748 36749 36750 36751 36752 36753 36754 36755 36756 36757 36758 36759 36760 36761 36762 36763 36764 36765 36766 36767 36768 36769 36770 36771 36772 36773 36774 36775 36776 36777 36778 36779 36780 36781 36782 36783 36784 36785 36786 36787 36788 36789 36790 36791 36792 36793 36794 36795 36796 36797 36798 36799 36800 36801 36802 36803 36804 36805 36806 36807 36808 36809 36810 36811 36812 36813 36814 36815 36816 36817 36818 36819 36820 36821 36822 36823 36824 36825 36826 36827 36828 36829 36830 36831 36832 36833 36834 36835 36836 36837 36838 36839 36840 36841 36842 36843 36844 36845 36846 36847 36848 36849 36850 36851 36852 36853 36854 36855 36856 36857 36858 36859 36860 36861 36862 36863 36864 36865 36866 36867 36868 36869 36870 36871 36872 36873 36874 36875 36876 36877 36878 36879 36880 36881 36882 36883 36884 36885 36886 36887 36888 36889 36890 36891 36892 36893 36894 36895 36896 36897 36898 36899 36900 36901 36902 36903 36904 36905 36906 36907 36908 36909 36910 36911 36912 36913 36914 36915 36916 36917 36918 36919 36920 36921 36922 36923 36924 36925 36926 36927 36928 36929 36930 36931 36932 36933 36934 36935 36936 36937 36938 36939 36940 36941 36942 36943 36944 36945 36946 36947 36948 36949 36950 36951 36952 36953 36954 36955 36956 36957 36958 36959 36960 36961 36962 36963 36964 36965 36966 36967 36968 36969 36970 36971 36972 36973 36974 36975 36976 36977 36978 36979 36980 36981 36982 36983 36984 36985 36986 36987 36988 36989 36990 36991 36992 36993 36994 36995 36996 36997 36998 36999 37000 37001 37002 37003 37004 37005 37006 37007 37008 37009 37010 37011 37012 37013 37014 37015 37016 37017 37018 37019 37020 37021 37022 37023 37024 37025 37026 37027 37028 37029 37030 37031 37032 37033 37034 37035 37036 37037 37038 37039 37040 37041 37042 37043 37044 37045 37046 37047 37048 37049 37050 37051 37052 37053 37054 37055 37056 37057 37058 37059 37060 37061 37062 37063 37064 37065 37066 37067 37068 37069 37070 37071 37072 37073 37074 37075 37076 37077 37078 37079 37080 37081 37082 37083 37084 37085 37086 37087 37088 37089 37090 37091 37092 37093 37094 37095 37096 37097 37098 37099 37100 37101 37102 37103 37104 37105 37106 37107 37108 37109 37110 37111 37112 37113 37114 37115 37116 37117 37118 37119 37120 37121 37122 37123 37124 37125 37126 37127 37128 37129 37130 37131 37132 37133 37134 37135 37136 37137 37138 37139 37140 37141 37142 37143 37144 37145 37146 37147 37148 37149 37150 37151 37152 37153 37154 37155 37156 37157 37158 37159 37160 37161 37162 37163 37164 37165 37166 37167 37168 37169 37170 37171 37172 37173 37174 37175 37176 37177 37178 37179 37180 37181 37182 37183 37184 37185 37186 37187 37188 37189 37190 37191 37192 37193 37194 37195 37196 37197 37198 37199 37200 37201 37202 37203 37204 37205 37206 37207 37208 37209 37210 37211 37212 37213 37214 37215 37216 37217 37218 37219 37220 37221 37222 37223 37224 37225 37226 37227 37228 37229 37230 37231 37232 37233 37234 37235 37236 37237 37238 37239 37240 37241 37242 37243 37244 37245 37246 37247 37248 37249 37250 37251 37252 37253 37254 37255 37256 37257 37258 37259 37260 37261 37262 37263 37264 37265 37266 37267 37268 37269 37270 37271 37272 37273 37274 37275 37276 37277 37278 37279 37280 37281 37282 37283 37284 37285 37286 37287 37288 37289 37290 37291 37292 37293 37294 37295 37296 37297 37298 37299 37300 37301 37302 37303 37304 37305 37306 37307 37308 37309 37310 37311 37312 37313 37314 37315 37316 37317 37318 37319 37320 37321 37322 37323 37324 37325 37326 37327 37328 37329 37330 37331 37332 37333 37334 37335 37336 37337 37338 37339 37340 37341 37342 37343 37344 37345 37346 37347 37348 37349 37350 37351 37352 37353 37354 37355 37356 37357 37358 37359 37360 37361 37362 37363 37364 37365 37366 37367 37368 37369 37370 37371 37372 37373 37374 37375 37376 37377 37378 37379 37380 37381 37382 37383 37384 37385 37386 37387 37388 37389 37390 37391 37392 37393 37394 37395 37396 37397 37398 37399 37400 37401 37402 37403 37404 37405 37406 37407 37408 37409 37410 37411 37412 37413 37414 37415 37416 37417 37418 37419 37420 37421 37422 37423 37424 37425 37426 37427 37428 37429 37430 37431 37432 37433 37434 37435 37436 37437 37438 37439 37440 37441 37442 37443 37444 37445 37446 37447 37448 37449 37450 37451 37452 37453 37454 37455 37456 37457 37458 37459 37460 37461 37462 37463 37464 37465 37466 37467 37468 37469 37470 37471 37472 37473 37474 37475 37476 37477 37478 37479 37480 37481 37482 37483 37484 37485 37486 37487 37488 37489 37490 37491 37492 37493 37494 37495 37496 37497 37498 37499 37500 37501 37502 37503 37504 37505 37506 37507 37508 37509 37510 37511 37512 37513 37514 37515 37516 37517 37518 37519 37520 37521 37522 37523 37524 37525 37526 37527 37528 37529 37530 37531 37532 37533 37534 37535 37536 37537 37538 37539 37540 37541 37542 37543 37544 37545 37546 37547 37548 37549 37550 37551 37552 37553 37554 37555 37556 37557 37558 37559 37560 37561 37562 37563 37564 37565 37566 37567 37568 37569 37570 37571 37572 37573 37574 37575 37576 37577 37578 37579 37580 37581 37582 37583 37584 37585 37586 37587 37588 37589 37590 37591 37592 37593 37594 37595 37596 37597 37598 37599 37600 37601 37602 37603 37604 37605 37606 37607 37608 37609 37610 37611 37612 37613 37614 37615 37616 37617 37618 37619 37620 37621 37622 37623 37624 37625 37626 37627 37628 37629 37630 37631 37632 37633 37634 37635 37636 37637 37638 37639 37640 37641 37642 37643 37644 37645 37646 37647 37648 37649 37650 37651 37652 37653 37654 37655 37656 37657 37658 37659 37660 37661 37662 37663 37664 37665 37666 37667 37668 37669 37670 37671 37672 37673 37674 37675 37676 37677 37678 37679 37680 37681 37682 37683 37684 37685 37686 37687 37688 37689 37690 37691 37692 37693 37694 37695 37696 37697 37698 37699 37700 37701 37702 37703 37704 37705 37706 37707 37708 37709 37710 37711 37712 37713 37714 37715 37716 37717 37718 37719 37720 37721 37722 37723 37724 37725 37726 37727 37728 37729 37730 37731 37732 37733 37734 37735 37736 37737 37738 37739 37740 37741 37742 37743 37744 37745 37746 37747 37748 37749 37750 37751 37752 37753 37754 37755 37756 37757 37758 37759 37760 37761 37762 37763 37764 37765 37766 37767 37768 37769 37770 37771 37772 37773 37774 37775 37776 37777 37778 37779 37780 37781 37782 37783 37784 37785 37786 37787 37788 37789 37790 37791 37792 37793 37794 37795 37796 37797 37798 37799 37800 37801 37802 37803 37804 37805 37806 37807 37808 37809 37810 37811 37812 37813 37814 37815 37816 37817 37818 37819 37820 37821 37822 37823 37824 37825 37826 37827 37828 37829 37830 37831 37832 37833 37834 37835 37836 37837 37838 37839 37840 37841 37842 37843 37844 37845 37846 37847 37848 37849 37850 37851 37852 37853 37854 37855 37856 37857 37858 37859 37860 37861 37862 37863 37864 37865 37866 37867 37868 37869 37870 37871 37872 37873 37874 37875 37876 37877 37878 37879 37880 37881 37882 37883 37884 37885 37886 37887 37888 37889 37890 37891 37892 37893 37894 37895 37896 37897 37898 37899 37900 37901 37902 37903 37904 37905 37906 37907 37908 37909 37910 37911 37912 37913 37914 37915 37916 37917 37918 37919 37920 37921 37922 37923 37924 37925 37926 37927 37928 37929 37930 37931 37932 37933 37934 37935 37936 37937 37938 37939 37940 37941 37942 37943 37944 37945 37946 37947 37948 37949 37950 37951 37952 37953 37954 37955 37956 37957 37958 37959 37960 37961 37962 37963 37964 37965 37966 37967 37968 37969 37970 37971 37972 37973 37974 37975 37976 37977 37978 37979 37980 37981 37982 37983 37984 37985 37986 37987 37988 37989 37990 37991 37992 37993 37994 37995 37996 37997 37998 37999 38000 38001 38002 38003 38004 38005 38006 38007 38008 38009 38010 38011 38012 38013 38014 38015 38016 38017 38018 38019 38020 38021 38022 38023 38024 38025 38026 38027 38028 38029 38030 38031 38032 38033 38034 38035 38036 38037 38038 38039 38040 38041 38042 38043 38044 38045 38046 38047 38048 38049 38050 38051 38052 38053 38054 38055 38056 38057 38058 38059 38060 38061 38062 38063 38064 38065 38066 38067 38068 38069 38070 38071 38072 38073 38074 38075 38076 38077 38078 38079 38080 38081 38082 38083 38084 38085 38086 38087 38088 38089 38090 38091 38092 38093 38094 38095 38096 38097 38098 38099 38100 38101 38102 38103 38104 38105 38106 38107 38108 38109 38110 38111 38112 38113 38114 38115 38116 38117 38118 38119 38120 38121 38122 38123 38124 38125 38126 38127 38128 38129 38130 38131 38132 38133 38134 38135 38136 38137 38138 38139 38140 38141 38142 38143 38144 38145 38146 38147 38148 38149 38150 38151 38152 38153 38154 38155 38156 38157 38158 38159 38160 38161 38162 38163 38164 38165 38166 38167 38168 38169 38170 38171 38172 38173 38174 38175 38176 38177 38178 38179 38180 38181 38182 38183 38184 . KeyboardInterrupt Traceback (most recent call last) /Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb Cell 8 in &lt;cell line: 4&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#X10sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; i = 2 &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#X10sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; while i &gt; x: -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#X10sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; print(i) &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-12-05-codecells.ipynb#X10sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; i += 1 File /opt/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:531, in OutStream.write(self, string) 529 is_child = (not self._is_master_process()) 530 # only touch the buffer in the IO thread to avoid races --&gt; 531 self.pub_thread.schedule(lambda: self._buffer.write(string)) 532 if is_child: 533 # mp.Pool cannot be trusted to flush promptly (or ever), 534 # and this helps. 535 if self._subprocess_flush_pending: File /opt/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:216, in IOPubThread.schedule(self, f) 214 self._events.append(f) 215 # wake event thread (message content is ignored) --&gt; 216 self._event_pipe.send(b&#39;&#39;) 217 else: 218 f() File /opt/anaconda3/lib/python3.9/site-packages/zmq/sugar/socket.py:547, in Socket.send(self, data, flags, copy, track, routing_id, group) 540 data = zmq.Frame( 541 data, 542 track=track, 543 copy=copy or None, 544 copy_threshold=self.copy_threshold, 545 ) 546 data.group = group --&gt; 547 return super(Socket, self).send(data, flags=flags, copy=copy, track=track) File zmq/backend/cython/socket.pyx:718, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:765, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:242, in zmq.backend.cython.socket._send_copy() File /opt/anaconda3/lib/python3.9/site-packages/zmq/backend/cython/checkrc.pxd:13, in zmq.backend.cython.checkrc._check_rc() KeyboardInterrupt: . import random password_length = 12 characters = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;] password = &quot;&quot; for index in range(password_length): password = password + random.choice(characters) print(&quot;Password generated: {}&quot;.format(password)) . Password generated: 4d4ecd12bbac . ans = input(&quot;Are you more of a Porsche or a Lamborghini type of guy?&quot;) if ans == &quot;Porsche&quot;: print(&quot;You should drive a Porsche!&quot;) if ans == &quot;Lamborghini&quot;: print(&quot;You should drive a Lamborghini!&quot;) else: print(&quot;That was not one of the options!&quot;) . You should drive a Lamborghini! .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2022/12/05/codecells.html",
            "relUrl": "/2022/12/05/codecells.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "3.8 and 10 Hacks",
            "content": "Example 1 . . This question wasn’t too hard, because I have done things involving iteration before, so I knew pretty quickly how I wanted to accomplish this task. . Example 2 . . This question was harder, and I needed to do some additional research on what a bubble sort was and how to execute one. . Quiz . . I got questions 9 and 10 wrong, which are kind of similar questions. I learned that I need to know what situations for loops are better for and what situations while loops are better for, because I wasn’t entirely sure on those questions. . For the lists and iteration in the JS code, instead of having to define each individual answer as correct or incorrect, you can just select an index out of each list to be correct and have all those turn green while the others turn red. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2022/12/05/3.8-10.html",
            "relUrl": "/markdown/2022/12/05/3.8-10.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "test",
            "content": "test to make sure fastpages is working because it has been bugging for me lately .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/hacks/2022/12/04/fhjsdk.html",
            "relUrl": "/markdown/hacks/2022/12/04/fhjsdk.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Hacks Grades Table",
            "content": "Lesson Grade Description from Grader . Unit 3 Sections 1-2 | 0.9/1 | “completed everything accurately and satisifes requirements” | . Unit 3 Sections 3-4 | 0.9/1 | “he did the work” | . Unit 3 Sections 5-7 | 0.9/1 | “Completed all problems, had good notes” | . Unit 3 Sections 8 and 10 | 0.9/1 | “Nothing extra, overall good reflection.” | . Unit 3 Sections 12-13 | 0.9/1 | “completed everything that was asked for and provided good explanations” | . Unit 3 Sections 14-15 | 1/1 | “Satisfies the requirements, attempted the extra credit” | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/hacks/2022/12/02/grades.html",
            "relUrl": "/markdown/hacks/2022/12/02/grades.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "3.3-3.4",
            "content": "3.3 Video 1 Hacks . Answers commented in code cells . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: # iteration if (numbers[i] % 2 == 0): # selection (if statement) evens.append(numbers[i]) print(evens) . i = 1 starString = &quot;*&quot; while i &lt;= 5: # iteration j = 1 while j &lt;= i: # selection, executing if specific condition is met print (&quot;*&quot;, end= &quot;&quot;) j += 1 print () i += 1 # all of this makes a sequence . 3.3 Video 2 Hacks . a=1, b=7, c=3, d=7 . | Hot and cold are swapped so hot becomes false and cold becomes true . | Two of my own: . | a⟵5 | b⟵10 | c⟵30 | d⟵20 | e⟵15 | e⟵a | d⟵e+b | . ANSWER: a=5, b=10, c=30, d=15, e=5. a, b, and c all remain unchanged, while e gets reassigned to 5 and d becomes 5+10, which is 15. . | num1⟵5 | num2⟵10 | num3⟵30 | num4⟵20 | num5⟵15 | num1⟵num5 | num5⟵num2 | num4⟵num5 + num1 | . ANSWER: num1=15, num2=10, num3=30, num4=25, num5=10. num1 gets reassigned to 15, while num2 and num3 remain unchanged. num5 becomes 10, while num4 becomes 10+15. . Sequencing question . num1=1+5=6, num2=6+5=11 . 3.4 Video 1 Hacks . Test 1: SmithB@gmail.com Test 2: Ompuook (This one was kind of confusing so I looked at the answer) .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/hacks/2022/11/29/hackyshmacky.html",
            "relUrl": "/fastpages/jupyter/hacks/2022/11/29/hackyshmacky.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "3.1-2 Hacks",
            "content": "3.1 Video 2: . I did not get any questions wrong, but some of them took me longer than others, especially since I was doing it all in my head. It is hard to keep track of variables, so maybe actually writing down what the variables change to might make it easier. I did learn that it is important to keep track of variables being rearranged and reassigned to make sure that code is working as intended. . My questions: . num1⟵3 num2⟵5 num3⟵10 num1⟵num2 num3⟵num1 . DISPLAY(num1) DISPLAY(num2) DISPLAY(num3) . ANSWER: 5 5 5 . a⟵5 b⟵10 c⟵15 d⟵20 a⟵d d⟵a c⟵b . DISPLAY(a) DISPLAY(b) DISPLAY(c) DISPLAY(d) . ANSWER: 20 10 10 20 . x⟵1 y⟵2 z⟵3 x⟵y y⟵z z⟵x . DISPLAY(x) DISPLAY(y) DISPLAY(z) . ANSWER: 2 3 2 . a⟵10 b⟵20 c⟵40 c⟵a b⟵c . DISPLAY(a) DISPLAY(b) DISPLAY(c) . ANSWER: 10 10 10 . num1⟵30 num2⟵40 num3⟵50 num4⟵20 num1⟵num2 num3⟵num4 . DISPLAY(num1) DISPLAY(num2) DISPLAY(num3) DISPLAY(num4) . ANSWER: 40 40 20 20 . a⟵2 b⟵4 c⟵6 d⟵8 a⟵d b⟵a c⟵b . DISPLAY(a) DISPLAY(b) DISPLAY(c) DISPLAY(d) . ANSWER: 8 8 8 8 . 3.1 Assignment 1 . numApples and integer is the best, since it is a numerical value | isCold is the best variable, and boolean is the best as it is true or false | IDnumber and string is the best. Even though it is a number you are not adding or subtracting from it | No, isRaining is better, the other one is way too long. | Boolean is best for true or false | Integer is to be added or subtracted to. String is for objects or numbers you are not going to be adding or subtracting to. | My own questions . What would be the best variable for storing first names? . firstName | firstname | first name | peoplesfirstnames | ANSWER: 1. firstName . What type of data would you use to store zip codes? . Integer | String | Boolean | ANSWER: 2. String . What type of data would you use to keep track of the number of oranges? . Integer | String | Boolean | ANSWER: 1. Integer . 3.2 Video 2 . Consider the following code segment: . scores1 &lt;- [89, 78, 92, 63, 95, 88] | scores2 &lt;- [92, 79, 97, 63] | scores1 &lt;- scores2 What are the contents of scores1 after the code segment is executed?: | . [89, 78, 92, 63, 95, 88] | [89, 78, 92, 63, 95, 88, 92, 79, 97, 63] | [92, 79, 97, 63, 89, 78, 92, 63, 95, 88] | [92, 79, 97, 63] | MY ANSWER: 4. [92, 79, 97, 63] (correct) . Consider the following code segment: . listA &lt;- [“Sam”, “Ann”] | listB &lt;- [“Jamal”, “Tamara”] | listB &lt;- listA | listA &lt;- listB What are the contents of listA after the code segment is executed? | . [“Sam”, “Ann”] | [“Jamal”, “Tamara”] | [“Sam”, “Ann”, “Jamal”, “Tamara”] | [“Jamal”, “Tamara”, “Sam”, “Ann”] | MY ANSWER: 1. [“Sam”, “Ann”] (correct) . What is the length of this list? [“Red”, “Orange”, “Yellow”, “Green”, “Blue”, “Purple”] . 5 | 7 | 6 | 4 | MY ANSWER: 1. 5 (incorrect, I was thinking of the index numbers) . What is the index number of “Purple” in this list? [“Red”, “Orange”, “Yellow”, “Green”, “Blue”, “Purple”] . 7 | 0 | 6 | 5 | MY ANSWER: 4. 5 (correct) . Which of the following types of data can be stored in a list? . Boolean | String | Float | All of the above | MY ANSWER: 4. All of the above (correct) . Which of the following variables is a float? . Apples | -106.2 | 34 | True | MY ANSWER: 2. -106.2 (correct) . If a list has a length of 24 items, what is the index number of the 17th item? . 21 | 17 | 16 | 69 | MY ANSWER: 3. 16 (correct) . A variable is permanent and cannot be changed later on. . True | False | MY ANSWER: 2. False (correct) . Which of the following is true about the list? [“Apples”, 42.0, “Bananas”, 0.5, “Avocado”, -902.2, “Lychee”, 6.9, “Orange”, 7.2] . The list has floats and string variable types. | The ratio of float variables to string variables is 2:1. | The length is 9. | The index of “Avocado” is 4. | All of the above | 1 and 4 | 1, 3, and 4 | MY ANSWER: 6. 1 and 4 .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/hacks/2022/11/28/WiSTEMhacks.html",
            "relUrl": "/markdown/hacks/2022/11/28/WiSTEMhacks.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Final Exam Review",
            "content": ". Challenges . Although I got a 50/50, some of the questions took some additional research. Most of the questions I had to put additional research into were the ones involving binary, which I happened to know nearly nothing about. With the help of my table mates, and some additional research, I ended up learning a lot about binary when storing the test and how data is stored, specifically in 4 bits. . 4 bit binary . Number Binary . 0 | 0000 | . 1 | 0001 | . 2 | 0010 | . 3 | 0011 | . 4 | 0100 | . 5 | 0101 | . 6 | 0110 | . 7 | 0111 | . 8 | 1000 | . 9 | 1001 | . 10 | 1010 | . 11 | 1011 | . 12 | 1100 | . 13 | 1101 | . 14 | 1110 | . 15 | 1111 | . Other Challenges . Other challenging questions were not necessarily confusing in concept, but required some time to think about the question. For example there were a lot of questions that included lots of swapping of variables. I would have to read it over multiple times to make sure my answer was correct and I got the final alignment of variables right. There were also questions that were very math oriented. Although the level of math was not very complicated, you would have to look over the code multiple times to find out the order of operations being used. . Takeaways . Overall, I think this shows that I am on good pace for the AP test and I have a good chance of scoring high if I continue on this trend. I still have a long way to go and a lot to learn though. . Trimester Reflection . Looking back, I have realized how much I have learned this trimester. I knew close to nothing about computer science and the tools involved, and if I saw what I was doing today at the beginning of the trimester, I would be very impressed with myself. When we first started, I remember I couldn’t even figure out what GitHub was or what it was used for, which shows just how little I knew. I can’t wait to learn more. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/collegeboard/2022/11/08/final.html",
            "relUrl": "/markdown/collegeboard/2022/11/08/final.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Night at the Museum Experience",
            "content": "My Experience . When I first arrived at the school, I wasn’t exactly sure what to expect or how many people would be there. As I walked into the computer science classroom, I was shocked by the crowds and how many people were inside. . . This was a pleasant surprise because if I’m being honest I did not think that many people would be interested in computer science. It was really fun to present our project to strangers who were passing through as well as other students, some who were involved in CS and others who weren’t. It was also really fun to see the programs that other CS students created and it really showcased the talent we have at this school. . Other Classrooms . After meeting with Mr. Mortensen and showing him our project, I decided to visit some of the other classrooms to see what they had to offer. Just outside this classroom, I saw a table which had maps on it to direct visitors where the different art classes were. . . I decided to visit the ceramics room because I have several friends who are in that class and I wanted to see what they created. I was actually impressed by the things which they created because I hear stories about that class and it sounds like they spend most of their time messing around, but they actually showed effort on their pieces. . . One thing I noticed, however, was that a lot more people were in the CS classroom as compared to the other art rooms. Although I did come late to the Night at the Museum, I was genuinely surprised about how CS seemed to be the main attraction, at least when I was there. I must say that I wasn’t expecting that, and I was glad to see all our hard work being recognized. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2022/11/04/natm.html",
            "relUrl": "/markdown/2022/11/04/natm.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Alarm API",
            "content": "Please listen to the alarm tones found here to choose which alarm to vote for. You may like or dislike any alarm as many times as you like. The alarm with the most likes (with dislikes taken into account) will be implemented as the default. . Alarm Likes Dislikes .",
            "url": "https://trentcardall.github.io/cuddly-succotash/data/alarms",
            "relUrl": "/data/alarms",
            "date": " • Oct 27, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Python Height Calculator",
            "content": "print(&quot;Python Height Calculator&quot;) msg = input(&quot;Enter your height:&quot;) print(&quot;Your height: &quot; + msg) . Python Height Calculator Your height: 186 .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/10/21/height.html",
            "relUrl": "/fastpages/jupyter/2022/10/21/height.html",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Most liked 17 4 If at first you don&#39;t succeed; call it version 1.0. haha: 17 boohoo: 3 Most jeered 6 10 There are 10 types of people in the world: those who understand binary, and those who don’t. haha: 12 boohoo: 6 Random joke 17 An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you? haha: 9 boohoo: 2 Jokes Count: 18 . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) . KeyboardInterrupt Traceback (most recent call last) /Users/Trent/vscode/cuddly-succotash/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb Cell 7 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; responses = [] # responses list &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; # Get the count of jokes on server -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; count_response = requests.get(url+&#34;count&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; count_json = count_response.json() &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#W6sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; count = count_json[&#39;count&#39;] File /opt/anaconda3/lib/python3.9/site-packages/requests/api.py:75, in get(url, params, **kwargs) 64 def get(url, params=None, **kwargs): 65 r&#34;&#34;&#34;Sends a GET request. 66 67 :param url: URL for the new :class:`Request` object. (...) 72 :rtype: requests.Response 73 &#34;&#34;&#34; &gt; 75 return request(&#39;get&#39;, url, params=params, **kwargs) File /opt/anaconda3/lib/python3.9/site-packages/requests/api.py:61, in request(method, url, **kwargs) 57 # By using the &#39;with&#39; statement we are sure the session is closed, thus we 58 # avoid leaving sockets open which can trigger a ResourceWarning in some 59 # cases, and look like a memory leak in others. 60 with sessions.Session() as session: &gt; 61 return session.request(method=method, url=url, **kwargs) File /opt/anaconda3/lib/python3.9/site-packages/requests/sessions.py:529, in Session.request(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json) 524 send_kwargs = { 525 &#39;timeout&#39;: timeout, 526 &#39;allow_redirects&#39;: allow_redirects, 527 } 528 send_kwargs.update(settings) --&gt; 529 resp = self.send(prep, **send_kwargs) 531 return resp File /opt/anaconda3/lib/python3.9/site-packages/requests/sessions.py:645, in Session.send(self, request, **kwargs) 642 start = preferred_clock() 644 # Send the request --&gt; 645 r = adapter.send(request, **kwargs) 647 # Total elapsed time of the request (approximately) 648 elapsed = preferred_clock() - start File /opt/anaconda3/lib/python3.9/site-packages/requests/adapters.py:440, in HTTPAdapter.send(self, request, stream, timeout, verify, cert, proxies) 438 try: 439 if not chunked: --&gt; 440 resp = conn.urlopen( 441 method=request.method, 442 url=url, 443 body=request.body, 444 headers=request.headers, 445 redirect=False, 446 assert_same_host=False, 447 preload_content=False, 448 decode_content=False, 449 retries=self.max_retries, 450 timeout=timeout 451 ) 453 # Send the request. 454 else: 455 if hasattr(conn, &#39;proxy_pool&#39;): File /opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:703, in HTTPConnectionPool.urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw) 700 self._prepare_proxy(conn) 702 # Make the request on the httplib connection object. --&gt; 703 httplib_response = self._make_request( 704 conn, 705 method, 706 url, 707 timeout=timeout_obj, 708 body=body, 709 headers=headers, 710 chunked=chunked, 711 ) 713 # If we&#39;re going to release the connection in ``finally:``, then 714 # the response doesn&#39;t need to know about the connection. Otherwise 715 # it will also try to release it and we&#39;ll have a double-release 716 # mess. 717 response_conn = conn if not release_conn else None File /opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:386, in HTTPConnectionPool._make_request(self, conn, method, url, timeout, chunked, **httplib_request_kw) 384 # Trigger any extra validation we need to do. 385 try: --&gt; 386 self._validate_conn(conn) 387 except (SocketTimeout, BaseSSLError) as e: 388 # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout. 389 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout) File /opt/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:1040, in HTTPSConnectionPool._validate_conn(self, conn) 1038 # Force connect early to allow us to validate the connection. 1039 if not getattr(conn, &#34;sock&#34;, None): # AppEngine might not have `.sock` -&gt; 1040 conn.connect() 1042 if not conn.is_verified: 1043 warnings.warn( 1044 ( 1045 &#34;Unverified HTTPS request is being made to host &#39;%s&#39;. &#34; (...) 1050 InsecureRequestWarning, 1051 ) File /opt/anaconda3/lib/python3.9/site-packages/urllib3/connection.py:358, in HTTPSConnection.connect(self) 356 def connect(self): 357 # Add certificate verification --&gt; 358 self.sock = conn = self._new_conn() 359 hostname = self.host 360 tls_in_tls = False File /opt/anaconda3/lib/python3.9/site-packages/urllib3/connection.py:174, in HTTPConnection._new_conn(self) 171 extra_kw[&#34;socket_options&#34;] = self.socket_options 173 try: --&gt; 174 conn = connection.create_connection( 175 (self._dns_host, self.port), self.timeout, **extra_kw 176 ) 178 except SocketTimeout: 179 raise ConnectTimeoutError( 180 self, 181 &#34;Connection to %s timed out. (connect timeout=%s)&#34; 182 % (self.host, self.timeout), 183 ) File /opt/anaconda3/lib/python3.9/site-packages/urllib3/util/connection.py:85, in create_connection(address, timeout, source_address, socket_options) 83 if source_address: 84 sock.bind(source_address) &gt; 85 sock.connect(sa) 86 return sock 88 except socket.error as e: KeyboardInterrupt: .",
            "url": "https://trentcardall.github.io/cuddly-succotash/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "CollegeBoard-The Internet",
            "content": ". Takeaways . Path: Direct connection of computing devices from sender to receiver . Route: Finding a path from sender to receiver . Computer System: Group of computing devices/programs which work together for a common purpose . Computer Device: Physical artifact which can run program (computers, tablets) . Bandwidth: Maximum amount of data which can be sent in a fixed amount of time . Computer Network: Interconnected devices sending/receiving data . Packet: Small amount of data sent over a network .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/collegeboard/2022/10/16/internet.html",
            "relUrl": "/markdown/collegeboard/2022/10/16/internet.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Weather API",
            "content": "import requests url = &quot;https://yahoo-weather5.p.rapidapi.com/weather&quot; querystring = {&quot;location&quot;:&quot;San Diego&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-weather5.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) #print(response.text) print(&quot;San Diego Weather Forecast:&quot; + &quot; n&quot;) forecast = response.json().get(&quot;forecasts&quot;) i = 0 while i &lt; len(forecast): for key, value in forecast[i].items(): print(&quot; t&quot; + key, value) i += 1 print(&quot; n&quot;) . San Diego Weather Forecast: day Fri date 1666926000 low 53 high 73 text Mostly Sunny code 34 day Sat date 1667012400 low 54 high 74 text Partly Cloudy code 30 day Sun date 1667098800 low 55 high 77 text Partly Cloudy code 30 day Mon date 1667185200 low 58 high 78 text Partly Cloudy code 30 day Tue date 1667271600 low 58 high 70 text Partly Cloudy code 30 day Wed date 1667358000 low 47 high 61 text Mostly Cloudy code 28 day Thu date 1667444400 low 51 high 74 text Sunny code 32 day Fri date 1667530800 low 51 high 72 text Partly Cloudy code 30 day Sat date 1667617200 low 50 high 76 text Mostly Sunny code 34 day Sun date 1667703600 low 51 high 77 text Partly Cloudy code 30 day Mon date 1667790000 low 54 high 78 text Partly Cloudy code 30 day Tue date 1667876400 low 52 high 73 text Mostly Sunny code 34 .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/10/10/API.html",
            "relUrl": "/fastpages/jupyter/2022/10/10/API.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "CollegeBoard Progress",
            "content": "Completed Assignments . .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/collegeboard/2022/10/03/collegeboard.html",
            "relUrl": "/markdown/collegeboard/2022/10/03/collegeboard.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data print(response.json()) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;Spain&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . {&#39;countries_stat&#39;: [{&#39;country_name&#39;: &#39;USA&#39;, &#39;cases&#39;: &#39;82,649,779&#39;, &#39;deaths&#39;: &#39;1,018,316&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;80,434,925&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1,465&#39;, &#39;active_cases&#39;: &#39;1,196,538&#39;, &#39;total_cases_per_1m_population&#39;: &#39;247,080&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,044&#39;, &#39;total_tests&#39;: &#39;1,000,275,726&#39;, &#39;tests_per_1m_population&#39;: &#39;2,990,303&#39;}, {&#39;country_name&#39;: &#39;India&#39;, &#39;cases&#39;: &#39;43,057,545&#39;, &#39;deaths&#39;: &#39;522,193&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;42,519,479&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;698&#39;, &#39;active_cases&#39;: &#39;15,873&#39;, &#39;total_cases_per_1m_population&#39;: &#39;30,657&#39;, &#39;deaths_per_1m_population&#39;: &#39;372&#39;, &#39;total_tests&#39;: &#39;834,717,702&#39;, &#39;tests_per_1m_population&#39;: &#39;594,319&#39;}, {&#39;country_name&#39;: &#39;Brazil&#39;, &#39;cases&#39;: &#39;30,345,654&#39;, &#39;deaths&#39;: &#39;662,663&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;29,364,400&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8,318&#39;, &#39;active_cases&#39;: &#39;318,591&#39;, &#39;total_cases_per_1m_population&#39;: &#39;140,954&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,078&#39;, &#39;total_tests&#39;: &#39;63,776,166&#39;, &#39;tests_per_1m_population&#39;: &#39;296,238&#39;}, {&#39;country_name&#39;: &#39;France&#39;, &#39;cases&#39;: &#39;28,244,977&#39;, &#39;deaths&#39;: &#39;145,020&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;25,852,832&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1,677&#39;, &#39;active_cases&#39;: &#39;2,247,125&#39;, &#39;total_cases_per_1m_population&#39;: &#39;430,996&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,213&#39;, &#39;total_tests&#39;: &#39;266,484,045&#39;, &#39;tests_per_1m_population&#39;: &#39;4,066,333&#39;}, {&#39;country_name&#39;: &#39;Germany&#39;, &#39;cases&#39;: &#39;24,109,433&#39;, &#39;deaths&#39;: &#39;134,624&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;21,243,000&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1,980&#39;, &#39;active_cases&#39;: &#39;2,731,809&#39;, &#39;total_cases_per_1m_population&#39;: &#39;286,106&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,598&#39;, &#39;total_tests&#39;: &#39;122,332,384&#39;, &#39;tests_per_1m_population&#39;: &#39;1,451,714&#39;}, {&#39;country_name&#39;: &#39;UK&#39;, &#39;cases&#39;: &#39;21,933,206&#39;, &#39;deaths&#39;: &#39;173,352&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;20,782,350&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;339&#39;, &#39;active_cases&#39;: &#39;977,504&#39;, &#39;total_cases_per_1m_population&#39;: &#39;320,054&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,530&#39;, &#39;total_tests&#39;: &#39;514,985,782&#39;, &#39;tests_per_1m_population&#39;: &#39;7,514,777&#39;}, {&#39;country_name&#39;: &#39;Russia&#39;, &#39;cases&#39;: &#39;18,137,137&#39;, &#39;deaths&#39;: &#39;374,902&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;17,474,628&#39;, &#39;new_deaths&#39;: &#39;168&#39;, &#39;new_cases&#39;: &#39;8,446&#39;, &#39;serious_critical&#39;: &#39;2,300&#39;, &#39;active_cases&#39;: &#39;287,607&#39;, &#39;total_cases_per_1m_population&#39;: &#39;124,187&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,567&#39;, &#39;total_tests&#39;: &#39;273,400,000&#39;, &#39;tests_per_1m_population&#39;: &#39;1,871,995&#39;}, {&#39;country_name&#39;: &#39;S. Korea&#39;, &#39;cases&#39;: &#39;16,895,194&#39;, &#39;deaths&#39;: &#39;22,133&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;109&#39;, &#39;new_cases&#39;: &#39;64,725&#39;, &#39;serious_critical&#39;: &#39;726&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;329,028&#39;, &#39;deaths_per_1m_population&#39;: &#39;431&#39;, &#39;total_tests&#39;: &#39;15,804,065&#39;, &#39;tests_per_1m_population&#39;: &#39;307,778&#39;}, {&#39;country_name&#39;: &#39;Italy&#39;, &#39;cases&#39;: &#39;16,079,209&#39;, &#39;deaths&#39;: &#39;162,609&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;14,684,371&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;409&#39;, &#39;active_cases&#39;: &#39;1,232,229&#39;, &#39;total_cases_per_1m_population&#39;: &#39;266,648&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,697&#39;, &#39;total_tests&#39;: &#39;211,365,630&#39;, &#39;tests_per_1m_population&#39;: &#39;3,505,156&#39;}, {&#39;country_name&#39;: &#39;Turkey&#39;, &#39;cases&#39;: &#39;15,016,270&#39;, &#39;deaths&#39;: &#39;98,676&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;14,854,475&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;975&#39;, &#39;active_cases&#39;: &#39;63,119&#39;, &#39;total_cases_per_1m_population&#39;: &#39;174,654&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,148&#39;, &#39;total_tests&#39;: &#39;158,110,923&#39;, &#39;tests_per_1m_population&#39;: &#39;1,838,986&#39;}, {&#39;country_name&#39;: &#39;Spain&#39;, &#39;cases&#39;: &#39;11,786,036&#39;, &#39;deaths&#39;: &#39;103,908&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,261,340&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;339&#39;, &#39;active_cases&#39;: &#39;420,788&#39;, &#39;total_cases_per_1m_population&#39;: &#39;251,906&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,221&#39;, &#39;total_tests&#39;: &#39;471,036,328&#39;, &#39;tests_per_1m_population&#39;: &#39;10,067,575&#39;}, {&#39;country_name&#39;: &#39;Vietnam&#39;, &#39;cases&#39;: &#39;10,563,502&#39;, &#39;deaths&#39;: &#39;43,013&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,086,075&#39;, &#39;new_deaths&#39;: &#39;9&#39;, &#39;new_cases&#39;: &#39;8,813&#39;, &#39;serious_critical&#39;: &#39;612&#39;, &#39;active_cases&#39;: &#39;1,434,414&#39;, &#39;total_cases_per_1m_population&#39;: &#39;106,789&#39;, &#39;deaths_per_1m_population&#39;: &#39;435&#39;, &#39;total_tests&#39;: &#39;85,789,114&#39;, &#39;tests_per_1m_population&#39;: &#39;867,262&#39;}, {&#39;country_name&#39;: &#39;Argentina&#39;, &#39;cases&#39;: &#39;9,060,923&#39;, &#39;deaths&#39;: &#39;128,344&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;8,895,999&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;412&#39;, &#39;active_cases&#39;: &#39;36,580&#39;, &#39;total_cases_per_1m_population&#39;: &#39;197,215&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,793&#39;, &#39;total_tests&#39;: &#39;35,716,069&#39;, &#39;tests_per_1m_population&#39;: &#39;777,376&#39;}, {&#39;country_name&#39;: &#39;Netherlands&#39;, &#39;cases&#39;: &#39;8,035,603&#39;, &#39;deaths&#39;: &#39;22,206&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,643,520&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;94&#39;, &#39;active_cases&#39;: &#39;369,877&#39;, &#39;total_cases_per_1m_population&#39;: &#39;467,096&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,291&#39;, &#39;total_tests&#39;: &#39;21,107,399&#39;, &#39;tests_per_1m_population&#39;: &#39;1,226,938&#39;}, {&#39;country_name&#39;: &#39;Japan&#39;, &#39;cases&#39;: &#39;7,621,562&#39;, &#39;deaths&#39;: &#39;29,284&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,135,403&#39;, &#39;new_deaths&#39;: &#39;27&#39;, &#39;new_cases&#39;: &#39;43,721&#39;, &#39;serious_critical&#39;: &#39;195&#39;, &#39;active_cases&#39;: &#39;456,875&#39;, &#39;total_cases_per_1m_population&#39;: &#39;60,596&#39;, &#39;deaths_per_1m_population&#39;: &#39;233&#39;, &#39;total_tests&#39;: &#39;46,690,473&#39;, &#39;tests_per_1m_population&#39;: &#39;371,215&#39;}, {&#39;country_name&#39;: &#39;Iran&#39;, &#39;cases&#39;: &#39;7,216,040&#39;, &#39;deaths&#39;: &#39;140,975&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;6,966,954&#39;, &#39;new_deaths&#39;: &#39;13&#39;, &#39;new_cases&#39;: &#39;528&#39;, &#39;serious_critical&#39;: &#39;1,046&#39;, &#39;active_cases&#39;: &#39;108,111&#39;, &#39;total_cases_per_1m_population&#39;: &#39;83,972&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,641&#39;, &#39;total_tests&#39;: &#39;50,811,054&#39;, &#39;tests_per_1m_population&#39;: &#39;591,284&#39;}, {&#39;country_name&#39;: &#39;Colombia&#39;, &#39;cases&#39;: &#39;6,091,094&#39;, &#39;deaths&#39;: &#39;139,771&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,924,433&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;342&#39;, &#39;active_cases&#39;: &#39;26,890&#39;, &#39;total_cases_per_1m_population&#39;: &#39;117,448&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,695&#39;, &#39;total_tests&#39;: &#39;34,355,022&#39;, &#39;tests_per_1m_population&#39;: &#39;662,433&#39;}, {&#39;country_name&#39;: &#39;Indonesia&#39;, &#39;cases&#39;: &#39;6,043,768&#39;, &#39;deaths&#39;: &#39;156,067&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,868,251&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2,771&#39;, &#39;active_cases&#39;: &#39;19,450&#39;, &#39;total_cases_per_1m_population&#39;: &#39;21,682&#39;, &#39;deaths_per_1m_population&#39;: &#39;560&#39;, &#39;total_tests&#39;: &#39;94,877,499&#39;, &#39;tests_per_1m_population&#39;: &#39;340,374&#39;}, {&#39;country_name&#39;: &#39;Poland&#39;, &#39;cases&#39;: &#39;5,991,197&#39;, &#39;deaths&#39;: &#39;115,948&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,334,375&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;344&#39;, &#39;serious_critical&#39;: &#39;1,588&#39;, &#39;active_cases&#39;: &#39;540,874&#39;, &#39;total_cases_per_1m_population&#39;: &#39;158,616&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,070&#39;, &#39;total_tests&#39;: &#39;36,027,053&#39;, &#39;tests_per_1m_population&#39;: &#39;953,808&#39;}, {&#39;country_name&#39;: &#39;Mexico&#39;, &#39;cases&#39;: &#39;5,733,514&#39;, &#39;deaths&#39;: &#39;324,117&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,033,892&#39;, &#39;new_deaths&#39;: &#39;57&#39;, &#39;new_cases&#39;: &#39;802&#39;, &#39;serious_critical&#39;: &#39;4,798&#39;, &#39;active_cases&#39;: &#39;375,505&#39;, &#39;total_cases_per_1m_population&#39;: &#39;43,641&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,467&#39;, &#39;total_tests&#39;: &#39;15,762,889&#39;, &#39;tests_per_1m_population&#39;: &#39;119,981&#39;}, {&#39;country_name&#39;: &#39;Australia&#39;, &#39;cases&#39;: &#39;5,689,377&#39;, &#39;deaths&#39;: &#39;6,991&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,274,197&#39;, &#39;new_deaths&#39;: &#39;21&#39;, &#39;new_cases&#39;: &#39;34,769&#39;, &#39;serious_critical&#39;: &#39;135&#39;, &#39;active_cases&#39;: &#39;408,189&#39;, &#39;total_cases_per_1m_population&#39;: &#39;218,537&#39;, &#39;deaths_per_1m_population&#39;: &#39;269&#39;, &#39;total_tests&#39;: &#39;68,845,476&#39;, &#39;tests_per_1m_population&#39;: &#39;2,644,452&#39;}, {&#39;country_name&#39;: &#39;Ukraine&#39;, &#39;cases&#39;: &#39;4,997,224&#39;, &#39;deaths&#39;: &#39;108,306&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;177&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;115,517&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,504&#39;, &#39;total_tests&#39;: &#39;19,521,252&#39;, &#39;tests_per_1m_population&#39;: &#39;451,259&#39;}, {&#39;country_name&#39;: &#39;Malaysia&#39;, &#39;cases&#39;: &#39;4,427,067&#39;, &#39;deaths&#39;: &#39;35,491&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;4,310,599&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;89&#39;, &#39;active_cases&#39;: &#39;80,977&#39;, &#39;total_cases_per_1m_population&#39;: &#39;133,690&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,072&#39;, &#39;total_tests&#39;: &#39;58,332,799&#39;, &#39;tests_per_1m_population&#39;: &#39;1,761,549&#39;}, {&#39;country_name&#39;: &#39;Thailand&#39;, &#39;cases&#39;: &#39;4,165,874&#39;, &#39;deaths&#39;: &#39;27,778&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,954,945&#39;, &#39;new_deaths&#39;: &#39;126&#39;, &#39;new_cases&#39;: &#39;17,784&#39;, &#39;serious_critical&#39;: &#39;1,496&#39;, &#39;active_cases&#39;: &#39;183,151&#39;, &#39;total_cases_per_1m_population&#39;: &#39;59,414&#39;, &#39;deaths_per_1m_population&#39;: &#39;396&#39;, &#39;total_tests&#39;: &#39;17,270,775&#39;, &#39;tests_per_1m_population&#39;: &#39;246,317&#39;}, {&#39;country_name&#39;: &#39;Austria&#39;, &#39;cases&#39;: &#39;4,104,859&#39;, &#39;deaths&#39;: &#39;18,047&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,989,860&#39;, &#39;new_deaths&#39;: &#39;12&#39;, &#39;new_cases&#39;: &#39;5,810&#39;, &#39;serious_critical&#39;: &#39;121&#39;, &#39;active_cases&#39;: &#39;96,952&#39;, &#39;total_cases_per_1m_population&#39;: &#39;451,125&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,983&#39;, &#39;total_tests&#39;: &#39;181,825,734&#39;, &#39;tests_per_1m_population&#39;: &#39;19,982,688&#39;}, {&#39;country_name&#39;: &#39;Israel&#39;, &#39;cases&#39;: &#39;4,054,342&#39;, &#39;deaths&#39;: &#39;10,658&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;4,009,152&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;220&#39;, &#39;active_cases&#39;: &#39;34,532&#39;, &#39;total_cases_per_1m_population&#39;: &#39;434,735&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,143&#39;, &#39;total_tests&#39;: &#39;41,373,364&#39;, &#39;tests_per_1m_population&#39;: &#39;4,436,346&#39;}, {&#39;country_name&#39;: &#39;Belgium&#39;, &#39;cases&#39;: &#39;4,015,791&#39;, &#39;deaths&#39;: &#39;31,319&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,726,457&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;169&#39;, &#39;active_cases&#39;: &#39;258,015&#39;, &#39;total_cases_per_1m_population&#39;: &#39;343,798&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,681&#39;, &#39;total_tests&#39;: &#39;33,456,470&#39;, &#39;tests_per_1m_population&#39;: &#39;2,864,259&#39;}, {&#39;country_name&#39;: &#39;Czechia&#39;, &#39;cases&#39;: &#39;3,895,544&#39;, &#39;deaths&#39;: &#39;40,081&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,838,099&#39;, &#39;new_deaths&#39;: &#39;5&#39;, &#39;new_cases&#39;: &#39;911&#39;, &#39;serious_critical&#39;: &#39;43&#39;, &#39;active_cases&#39;: &#39;17,364&#39;, &#39;total_cases_per_1m_population&#39;: &#39;362,550&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,730&#39;, &#39;total_tests&#39;: &#39;55,117,064&#39;, &#39;tests_per_1m_population&#39;: &#39;5,129,629&#39;}, {&#39;country_name&#39;: &#39;Portugal&#39;, &#39;cases&#39;: &#39;3,791,744&#39;, &#39;deaths&#39;: &#39;22,162&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;61&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;373,827&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,185&#39;, &#39;total_tests&#39;: &#39;40,748,372&#39;, &#39;tests_per_1m_population&#39;: &#39;4,017,371&#39;}, {&#39;country_name&#39;: &#39;South Africa&#39;, &#39;cases&#39;: &#39;3,759,689&#39;, &#39;deaths&#39;: &#39;100,298&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,632,572&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;175&#39;, &#39;active_cases&#39;: &#39;26,819&#39;, &#39;total_cases_per_1m_population&#39;: &#39;61,981&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,653&#39;, &#39;total_tests&#39;: &#39;24,313,334&#39;, &#39;tests_per_1m_population&#39;: &#39;400,824&#39;}, {&#39;country_name&#39;: &#39;Canada&#39;, &#39;cases&#39;: &#39;3,695,585&#39;, &#39;deaths&#39;: &#39;38,777&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,426,082&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;426&#39;, &#39;active_cases&#39;: &#39;230,726&#39;, &#39;total_cases_per_1m_population&#39;: &#39;96,391&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,011&#39;, &#39;total_tests&#39;: &#39;60,536,359&#39;, &#39;tests_per_1m_population&#39;: &#39;1,578,955&#39;}, {&#39;country_name&#39;: &#39;Philippines&#39;, &#39;cases&#39;: &#39;3,684,500&#39;, &#39;deaths&#39;: &#39;60,182&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,610,658&#39;, &#39;new_deaths&#39;: &#39;3&#39;, &#39;new_cases&#39;: &#39;205&#39;, &#39;serious_critical&#39;: &#39;289&#39;, &#39;active_cases&#39;: &#39;13,660&#39;, &#39;total_cases_per_1m_population&#39;: &#39;32,835&#39;, &#39;deaths_per_1m_population&#39;: &#39;536&#39;, &#39;total_tests&#39;: &#39;29,427,586&#39;, &#39;tests_per_1m_population&#39;: &#39;262,246&#39;}, {&#39;country_name&#39;: &#39;Switzerland&#39;, &#39;cases&#39;: &#39;3,579,867&#39;, &#39;deaths&#39;: &#39;13,816&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,378,507&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;90&#39;, &#39;active_cases&#39;: &#39;187,544&#39;, &#39;total_cases_per_1m_population&#39;: &#39;408,247&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,576&#39;, &#39;total_tests&#39;: &#39;20,666,182&#39;, &#39;tests_per_1m_population&#39;: &#39;2,356,766&#39;}, {&#39;country_name&#39;: &#39;Peru&#39;, &#39;cases&#39;: &#39;3,559,343&#39;, &#39;deaths&#39;: &#39;212,724&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;356&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;105,303&#39;, &#39;deaths_per_1m_population&#39;: &#39;6,293&#39;, &#39;total_tests&#39;: &#39;29,592,270&#39;, &#39;tests_per_1m_population&#39;: &#39;875,489&#39;}, {&#39;country_name&#39;: &#39;Chile&#39;, &#39;cases&#39;: &#39;3,544,463&#39;, &#39;deaths&#39;: &#39;57,375&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,368,772&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;286&#39;, &#39;active_cases&#39;: &#39;118,316&#39;, &#39;total_cases_per_1m_population&#39;: &#39;182,588&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,956&#39;, &#39;total_tests&#39;: &#39;36,711,724&#39;, &#39;tests_per_1m_population&#39;: &#39;1,891,147&#39;}, {&#39;country_name&#39;: &#39;Greece&#39;, &#39;cases&#39;: &#39;3,277,557&#39;, &#39;deaths&#39;: &#39;28,867&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,151,717&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;277&#39;, &#39;active_cases&#39;: &#39;96,973&#39;, &#39;total_cases_per_1m_population&#39;: &#39;317,250&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,794&#39;, &#39;total_tests&#39;: &#39;78,872,546&#39;, &#39;tests_per_1m_population&#39;: &#39;7,634,431&#39;}, {&#39;country_name&#39;: &#39;Denmark&#39;, &#39;cases&#39;: &#39;2,959,040&#39;, &#39;deaths&#39;: &#39;6,072&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,929,091&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;15&#39;, &#39;active_cases&#39;: &#39;23,877&#39;, &#39;total_cases_per_1m_population&#39;: &#39;507,639&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,042&#39;, &#39;total_tests&#39;: &#39;127,141,200&#39;, &#39;tests_per_1m_population&#39;: &#39;21,811,751&#39;}, {&#39;country_name&#39;: &#39;Romania&#39;, &#39;cases&#39;: &#39;2,888,318&#39;, &#39;deaths&#39;: &#39;65,427&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,606,660&#39;, &#39;new_deaths&#39;: &#39;6&#39;, &#39;new_cases&#39;: &#39;494&#39;, &#39;serious_critical&#39;: &#39;216&#39;, &#39;active_cases&#39;: &#39;216,231&#39;, &#39;total_cases_per_1m_population&#39;: &#39;151,968&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,442&#39;, &#39;total_tests&#39;: &#39;22,594,702&#39;, &#39;tests_per_1m_population&#39;: &#39;1,188,815&#39;}, {&#39;country_name&#39;: &#39;Sweden&#39;, &#39;cases&#39;: &#39;2,498,388&#39;, &#39;deaths&#39;: &#39;18,656&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,464,421&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;19&#39;, &#39;active_cases&#39;: &#39;15,311&#39;, &#39;total_cases_per_1m_population&#39;: &#39;244,630&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,827&#39;, &#39;total_tests&#39;: &#39;18,493,218&#39;, &#39;tests_per_1m_population&#39;: &#39;1,810,763&#39;}, {&#39;country_name&#39;: &#39;Iraq&#39;, &#39;cases&#39;: &#39;2,324,141&#39;, &#39;deaths&#39;: &#39;25,204&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,295,947&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;20&#39;, &#39;active_cases&#39;: &#39;2,990&#39;, &#39;total_cases_per_1m_population&#39;: &#39;55,534&#39;, &#39;deaths_per_1m_population&#39;: &#39;602&#39;, &#39;total_tests&#39;: &#39;18,450,939&#39;, &#39;tests_per_1m_population&#39;: &#39;440,871&#39;}, {&#39;country_name&#39;: &#39;Serbia&#39;, &#39;cases&#39;: &#39;2,001,144&#39;, &#39;deaths&#39;: &#39;15,953&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,967,786&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;25&#39;, &#39;active_cases&#39;: &#39;17,405&#39;, &#39;total_cases_per_1m_population&#39;: &#39;230,710&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,839&#39;, &#39;total_tests&#39;: &#39;9,427,662&#39;, &#39;tests_per_1m_population&#39;: &#39;1,086,907&#39;}, {&#39;country_name&#39;: &#39;Bangladesh&#39;, &#39;cases&#39;: &#39;1,952,532&#39;, &#39;deaths&#39;: &#39;29,127&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,893,131&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1,297&#39;, &#39;active_cases&#39;: &#39;30,274&#39;, &#39;total_cases_per_1m_population&#39;: &#39;11,646&#39;, &#39;deaths_per_1m_population&#39;: &#39;174&#39;, &#39;total_tests&#39;: &#39;13,956,056&#39;, &#39;tests_per_1m_population&#39;: &#39;83,245&#39;}, {&#39;country_name&#39;: &#39;Hungary&#39;, &#39;cases&#39;: &#39;1,890,953&#39;, &#39;deaths&#39;: &#39;46,048&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,776,617&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;45&#39;, &#39;active_cases&#39;: &#39;68,288&#39;, &#39;total_cases_per_1m_population&#39;: &#39;196,645&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,789&#39;, &#39;total_tests&#39;: &#39;11,295,119&#39;, &#39;tests_per_1m_population&#39;: &#39;1,174,608&#39;}, {&#39;country_name&#39;: &#39;Slovakia&#39;, &#39;cases&#39;: &#39;1,774,808&#39;, &#39;deaths&#39;: &#39;19,839&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,730,712&#39;, &#39;new_deaths&#39;: &#39;10&#39;, &#39;new_cases&#39;: &#39;1,155&#39;, &#39;serious_critical&#39;: &#39;88&#39;, &#39;active_cases&#39;: &#39;24,257&#39;, &#39;total_cases_per_1m_population&#39;: &#39;324,794&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,631&#39;, &#39;total_tests&#39;: &#39;7,057,901&#39;, &#39;tests_per_1m_population&#39;: &#39;1,291,611&#39;}, {&#39;country_name&#39;: &#39;Jordan&#39;, &#39;cases&#39;: &#39;1,694,216&#39;, &#39;deaths&#39;: &#39;14,048&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,678,941&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;124&#39;, &#39;active_cases&#39;: &#39;1,227&#39;, &#39;total_cases_per_1m_population&#39;: &#39;163,125&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,353&#39;, &#39;total_tests&#39;: &#39;16,670,254&#39;, &#39;tests_per_1m_population&#39;: &#39;1,605,074&#39;}, {&#39;country_name&#39;: &#39;Georgia&#39;, &#39;cases&#39;: &#39;1,654,255&#39;, &#39;deaths&#39;: &#39;16,800&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,635,791&#39;, &#39;new_deaths&#39;: &#39;3&#39;, &#39;new_cases&#39;: &#39;92&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,664&#39;, &#39;total_cases_per_1m_population&#39;: &#39;416,129&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,226&#39;, &#39;total_tests&#39;: &#39;16,807,205&#39;, &#39;tests_per_1m_population&#39;: &#39;4,227,861&#39;}, {&#39;country_name&#39;: &#39;Pakistan&#39;, &#39;cases&#39;: &#39;1,527,856&#39;, &#39;deaths&#39;: &#39;30,369&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,493,998&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;105&#39;, &#39;serious_critical&#39;: &#39;186&#39;, &#39;active_cases&#39;: &#39;3,489&#39;, &#39;total_cases_per_1m_population&#39;: &#39;6,683&#39;, &#39;deaths_per_1m_population&#39;: &#39;133&#39;, &#39;total_tests&#39;: &#39;28,048,307&#39;, &#39;tests_per_1m_population&#39;: &#39;122,679&#39;}, {&#39;country_name&#39;: &#39;Ireland&#39;, &#39;cases&#39;: &#39;1,509,536&#39;, &#39;deaths&#39;: &#39;6,996&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,415,949&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;41&#39;, &#39;active_cases&#39;: &#39;86,591&#39;, &#39;total_cases_per_1m_population&#39;: &#39;299,669&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,389&#39;, &#39;total_tests&#39;: &#39;12,016,948&#39;, &#39;tests_per_1m_population&#39;: &#39;2,385,571&#39;}, {&#39;country_name&#39;: &#39;Norway&#39;, &#39;cases&#39;: &#39;1,423,509&#39;, &#39;deaths&#39;: &#39;2,871&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;20&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;258,925&#39;, &#39;deaths_per_1m_population&#39;: &#39;522&#39;, &#39;total_tests&#39;: &#39;11,002,430&#39;, &#39;tests_per_1m_population&#39;: &#39;2,001,256&#39;}, {&#39;country_name&#39;: &#39;Kazakhstan&#39;, &#39;cases&#39;: &#39;1,305,457&#39;, &#39;deaths&#39;: &#39;13,660&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,290,988&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;10&#39;, &#39;serious_critical&#39;: &#39;24&#39;, &#39;active_cases&#39;: &#39;809&#39;, &#39;total_cases_per_1m_population&#39;: &#39;68,056&#39;, &#39;deaths_per_1m_population&#39;: &#39;712&#39;, &#39;total_tests&#39;: &#39;11,575,012&#39;, &#39;tests_per_1m_population&#39;: &#39;603,428&#39;}, {&#39;country_name&#39;: &#39;Hong Kong&#39;, &#39;cases&#39;: &#39;1,201,431&#39;, &#39;deaths&#39;: &#39;9,236&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;115&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;157,942&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,214&#39;, &#39;total_tests&#39;: &#39;44,972,952&#39;, &#39;tests_per_1m_population&#39;: &#39;5,912,223&#39;}, {&#39;country_name&#39;: &#39;Singapore&#39;, &#39;cases&#39;: &#39;1,180,124&#39;, &#39;deaths&#39;: &#39;1,325&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,109,387&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;9&#39;, &#39;active_cases&#39;: &#39;69,412&#39;, &#39;total_cases_per_1m_population&#39;: &#39;198,895&#39;, &#39;deaths_per_1m_population&#39;: &#39;223&#39;, &#39;total_tests&#39;: &#39;23,712,995&#39;, &#39;tests_per_1m_population&#39;: &#39;3,996,529&#39;}, {&#39;country_name&#39;: &#39;Morocco&#39;, &#39;cases&#39;: &#39;1,164,670&#39;, &#39;deaths&#39;: &#39;16,065&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,148,154&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;293&#39;, &#39;active_cases&#39;: &#39;451&#39;, &#39;total_cases_per_1m_population&#39;: &#39;30,893&#39;, &#39;deaths_per_1m_population&#39;: &#39;426&#39;, &#39;total_tests&#39;: &#39;11,237,010&#39;, &#39;tests_per_1m_population&#39;: &#39;298,062&#39;}, {&#39;country_name&#39;: &#39;Bulgaria&#39;, &#39;cases&#39;: &#39;1,152,892&#39;, &#39;deaths&#39;: &#39;36,849&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;959,542&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;105&#39;, &#39;active_cases&#39;: &#39;156,501&#39;, &#39;total_cases_per_1m_population&#39;: &#39;168,206&#39;, &#39;deaths_per_1m_population&#39;: &#39;5,376&#39;, &#39;total_tests&#39;: &#39;9,797,011&#39;, &#39;tests_per_1m_population&#39;: &#39;1,429,377&#39;}, {&#39;country_name&#39;: &#39;Croatia&#39;, &#39;cases&#39;: &#39;1,117,175&#39;, &#39;deaths&#39;: &#39;15,778&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,096,829&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;22&#39;, &#39;active_cases&#39;: &#39;4,568&#39;, &#39;total_cases_per_1m_population&#39;: &#39;275,195&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,887&#39;, &#39;total_tests&#39;: &#39;4,762,146&#39;, &#39;tests_per_1m_population&#39;: &#39;1,173,065&#39;}, {&#39;country_name&#39;: &#39;Cuba&#39;, &#39;cases&#39;: &#39;1,101,486&#39;, &#39;deaths&#39;: &#39;8,523&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,091,603&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;23&#39;, &#39;active_cases&#39;: &#39;1,360&#39;, &#39;total_cases_per_1m_population&#39;: &#39;97,355&#39;, &#39;deaths_per_1m_population&#39;: &#39;753&#39;, &#39;total_tests&#39;: &#39;12,920,253&#39;, &#39;tests_per_1m_population&#39;: &#39;1,141,957&#39;}, {&#39;country_name&#39;: &#39;Lebanon&#39;, &#39;cases&#39;: &#39;1,096,320&#39;, &#39;deaths&#39;: &#39;10,374&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,079,455&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;186&#39;, &#39;active_cases&#39;: &#39;6,491&#39;, &#39;total_cases_per_1m_population&#39;: &#39;161,931&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,532&#39;, &#39;total_tests&#39;: &#39;4,795,578&#39;, &#39;tests_per_1m_population&#39;: &#39;708,328&#39;}, {&#39;country_name&#39;: &#39;Lithuania&#39;, &#39;cases&#39;: &#39;1,054,618&#39;, &#39;deaths&#39;: &#39;9,063&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,016,510&#39;, &#39;new_deaths&#39;: &#39;9&#39;, &#39;new_cases&#39;: &#39;427&#39;, &#39;serious_critical&#39;: &#39;31&#39;, &#39;active_cases&#39;: &#39;29,045&#39;, &#39;total_cases_per_1m_population&#39;: &#39;397,407&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,415&#39;, &#39;total_tests&#39;: &#39;8,217,113&#39;, &#39;tests_per_1m_population&#39;: &#39;3,096,414&#39;}, {&#39;country_name&#39;: &#39;Tunisia&#39;, &#39;cases&#39;: &#39;1,039,532&#39;, &#39;deaths&#39;: &#39;28,533&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;29&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;86,327&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,369&#39;, &#39;total_tests&#39;: &#39;4,563,397&#39;, &#39;tests_per_1m_population&#39;: &#39;378,962&#39;}, {&#39;country_name&#39;: &#39;Slovenia&#39;, &#39;cases&#39;: &#39;1,003,970&#39;, &#39;deaths&#39;: &#39;6,576&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;980,501&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;30&#39;, &#39;active_cases&#39;: &#39;16,893&#39;, &#39;total_cases_per_1m_population&#39;: &#39;482,805&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,162&#39;, &#39;total_tests&#39;: &#39;2,640,107&#39;, &#39;tests_per_1m_population&#39;: &#39;1,269,615&#39;}, {&#39;country_name&#39;: &#39;Finland&#39;, &#39;cases&#39;: &#39;1,000,472&#39;, &#39;deaths&#39;: &#39;3,638&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;46,000&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;31&#39;, &#39;active_cases&#39;: &#39;950,834&#39;, &#39;total_cases_per_1m_population&#39;: &#39;180,062&#39;, &#39;deaths_per_1m_population&#39;: &#39;655&#39;, &#39;total_tests&#39;: &#39;10,644,579&#39;, &#39;tests_per_1m_population&#39;: &#39;1,915,782&#39;}, {&#39;country_name&#39;: &#39;Nepal&#39;, &#39;cases&#39;: &#39;978,743&#39;, &#39;deaths&#39;: &#39;11,951&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;966,523&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;11&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;269&#39;, &#39;total_cases_per_1m_population&#39;: &#39;32,535&#39;, &#39;deaths_per_1m_population&#39;: &#39;397&#39;, &#39;total_tests&#39;: &#39;5,616,752&#39;, &#39;tests_per_1m_population&#39;: &#39;186,711&#39;}, {&#39;country_name&#39;: &#39;Belarus&#39;, &#39;cases&#39;: &#39;977,434&#39;, &#39;deaths&#39;: &#39;6,922&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;928,536&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;41,976&#39;, &#39;total_cases_per_1m_population&#39;: &#39;103,501&#39;, &#39;deaths_per_1m_population&#39;: &#39;733&#39;, &#39;total_tests&#39;: &#39;13,092,771&#39;, &#39;tests_per_1m_population&#39;: &#39;1,386,401&#39;}, {&#39;country_name&#39;: &#39;Bolivia&#39;, &#39;cases&#39;: &#39;904,377&#39;, &#39;deaths&#39;: &#39;21,908&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;855,123&#39;, &#39;new_deaths&#39;: &#39;1&#39;, &#39;new_cases&#39;: &#39;83&#39;, &#39;serious_critical&#39;: &#39;220&#39;, &#39;active_cases&#39;: &#39;27,346&#39;, &#39;total_cases_per_1m_population&#39;: &#39;75,614&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,832&#39;, &#39;total_tests&#39;: &#39;2,693,845&#39;, &#39;tests_per_1m_population&#39;: &#39;225,230&#39;}, {&#39;country_name&#39;: &#39;UAE&#39;, &#39;cases&#39;: &#39;897,136&#39;, &#39;deaths&#39;: &#39;2,302&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;879,787&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;244&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;15,047&#39;, &#39;total_cases_per_1m_population&#39;: &#39;88,772&#39;, &#39;deaths_per_1m_population&#39;: &#39;228&#39;, &#39;total_tests&#39;: &#39;154,420,740&#39;, &#39;tests_per_1m_population&#39;: &#39;15,279,961&#39;}, {&#39;country_name&#39;: &#39;Uruguay&#39;, &#39;cases&#39;: &#39;895,775&#39;, &#39;deaths&#39;: &#39;7,197&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;886,654&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;18&#39;, &#39;active_cases&#39;: &#39;1,924&#39;, &#39;total_cases_per_1m_population&#39;: &#39;256,268&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,059&#39;, &#39;total_tests&#39;: &#39;6,091,188&#39;, &#39;tests_per_1m_population&#39;: &#39;1,742,599&#39;}, {&#39;country_name&#39;: &#39;New Zealand&#39;, &#39;cases&#39;: &#39;884,289&#39;, &#39;deaths&#39;: &#39;636&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;824,272&#39;, &#39;new_deaths&#39;: &#39;9&#39;, &#39;new_cases&#39;: &#39;5,714&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;59,381&#39;, &#39;total_cases_per_1m_population&#39;: &#39;176,784&#39;, &#39;deaths_per_1m_population&#39;: &#39;127&#39;, &#39;total_tests&#39;: &#39;6,983,031&#39;, &#39;tests_per_1m_population&#39;: &#39;1,396,020&#39;}, {&#39;country_name&#39;: &#39;Ecuador&#39;, &#39;cases&#39;: &#39;868,053&#39;, &#39;deaths&#39;: &#39;35,581&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;759&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;47,888&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,963&#39;, &#39;total_tests&#39;: &#39;2,470,170&#39;, &#39;tests_per_1m_population&#39;: &#39;136,273&#39;}, {&#39;country_name&#39;: &#39;Costa Rica&#39;, &#39;cases&#39;: &#39;847,784&#39;, &#39;deaths&#39;: &#39;8,383&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;829,515&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;43&#39;, &#39;active_cases&#39;: &#39;9,886&#39;, &#39;total_cases_per_1m_population&#39;: &#39;163,725&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,619&#39;, &#39;total_tests&#39;: &#39;4,240,743&#39;, &#39;tests_per_1m_population&#39;: &#39;818,979&#39;}, {&#39;country_name&#39;: &#39;Guatemala&#39;, &#39;cases&#39;: &#39;841,341&#39;, &#39;deaths&#39;: &#39;17,496&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;821,185&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;2,660&#39;, &#39;total_cases_per_1m_population&#39;: &#39;45,444&#39;, &#39;deaths_per_1m_population&#39;: &#39;945&#39;, &#39;total_tests&#39;: &#39;4,402,305&#39;, &#39;tests_per_1m_population&#39;: &#39;237,787&#39;}, {&#39;country_name&#39;: &#39;Latvia&#39;, &#39;cases&#39;: &#39;817,316&#39;, &#39;deaths&#39;: &#39;5,743&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;803,135&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;322&#39;, &#39;serious_critical&#39;: &#39;9&#39;, &#39;active_cases&#39;: &#39;8,438&#39;, &#39;total_cases_per_1m_population&#39;: &#39;442,135&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,107&#39;, &#39;total_tests&#39;: &#39;7,154,016&#39;, &#39;tests_per_1m_population&#39;: &#39;3,870,035&#39;}, {&#39;country_name&#39;: &#39;Azerbaijan&#39;, &#39;cases&#39;: &#39;792,476&#39;, &#39;deaths&#39;: &#39;9,707&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;782,634&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;135&#39;, &#39;total_cases_per_1m_population&#39;: &#39;76,908&#39;, &#39;deaths_per_1m_population&#39;: &#39;942&#39;, &#39;total_tests&#39;: &#39;6,792,132&#39;, &#39;tests_per_1m_population&#39;: &#39;659,165&#39;}, {&#39;country_name&#39;: &#39;Panama&#39;, &#39;cases&#39;: &#39;771,486&#39;, &#39;deaths&#39;: &#39;8,182&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;759,832&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;3,472&#39;, &#39;total_cases_per_1m_population&#39;: &#39;173,862&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,844&#39;, &#39;total_tests&#39;: &#39;5,820,472&#39;, &#39;tests_per_1m_population&#39;: &#39;1,311,699&#39;}, {&#39;country_name&#39;: &#39;Saudi Arabia&#39;, &#39;cases&#39;: &#39;753,332&#39;, &#39;deaths&#39;: &#39;9,076&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;740,467&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;45&#39;, &#39;active_cases&#39;: &#39;3,789&#39;, &#39;total_cases_per_1m_population&#39;: &#39;21,047&#39;, &#39;deaths_per_1m_population&#39;: &#39;254&#39;, &#39;total_tests&#39;: &#39;41,817,866&#39;, &#39;tests_per_1m_population&#39;: &#39;1,168,345&#39;}, {&#39;country_name&#39;: &#39;Sri Lanka&#39;, &#39;cases&#39;: &#39;663,131&#39;, &#39;deaths&#39;: &#39;16,502&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;642,574&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;4,055&#39;, &#39;total_cases_per_1m_population&#39;: &#39;30,736&#39;, &#39;deaths_per_1m_population&#39;: &#39;765&#39;, &#39;total_tests&#39;: &#39;6,486,117&#39;, &#39;tests_per_1m_population&#39;: &#39;300,627&#39;}, {&#39;country_name&#39;: &#39;Paraguay&#39;, &#39;cases&#39;: &#39;649,034&#39;, &#39;deaths&#39;: &#39;18,795&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;624,673&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;5,566&#39;, &#39;total_cases_per_1m_population&#39;: &#39;89,022&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,578&#39;, &#39;total_tests&#39;: &#39;2,623,300&#39;, &#39;tests_per_1m_population&#39;: &#39;359,816&#39;}, {&#39;country_name&#39;: &#39;Kuwait&#39;, &#39;cases&#39;: &#39;631,294&#39;, &#39;deaths&#39;: &#39;2,555&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;627,899&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;840&#39;, &#39;total_cases_per_1m_population&#39;: &#39;143,981&#39;, &#39;deaths_per_1m_population&#39;: &#39;583&#39;, &#39;total_tests&#39;: &#39;7,999,656&#39;, &#39;tests_per_1m_population&#39;: &#39;1,824,506&#39;}, {&#39;country_name&#39;: &#39;Myanmar&#39;, &#39;cases&#39;: &#39;612,733&#39;, &#39;deaths&#39;: &#39;19,434&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;591,609&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,690&#39;, &#39;total_cases_per_1m_population&#39;: &#39;11,127&#39;, &#39;deaths_per_1m_population&#39;: &#39;353&#39;, &#39;total_tests&#39;: &#39;7,891,077&#39;, &#39;tests_per_1m_population&#39;: &#39;143,296&#39;}, {&#39;country_name&#39;: &#39;Palestine&#39;, &#39;cases&#39;: &#39;581,816&#39;, &#39;deaths&#39;: &#39;5,353&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;575,899&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;17&#39;, &#39;active_cases&#39;: &#39;564&#39;, &#39;total_cases_per_1m_population&#39;: &#39;109,459&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,007&#39;, &#39;total_tests&#39;: &#39;3,078,533&#39;, &#39;tests_per_1m_population&#39;: &#39;579,175&#39;}, {&#39;country_name&#39;: &#39;Dominican Republic&#39;, &#39;cases&#39;: &#39;578,954&#39;, &#39;deaths&#39;: &#39;4,376&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;574,297&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;16&#39;, &#39;active_cases&#39;: &#39;281&#39;, &#39;total_cases_per_1m_population&#39;: &#39;52,421&#39;, &#39;deaths_per_1m_population&#39;: &#39;396&#39;, &#39;total_tests&#39;: &#39;3,261,060&#39;, &#39;tests_per_1m_population&#39;: &#39;295,272&#39;}, {&#39;country_name&#39;: &#39;Estonia&#39;, &#39;cases&#39;: &#39;570,257&#39;, &#39;deaths&#39;: &#39;2,531&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;507,474&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;181&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;60,252&#39;, &#39;total_cases_per_1m_population&#39;: &#39;429,364&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,906&#39;, &#39;total_tests&#39;: &#39;3,311,935&#39;, &#39;tests_per_1m_population&#39;: &#39;2,493,655&#39;}, {&#39;country_name&#39;: &#39;Bahrain&#39;, &#39;cases&#39;: &#39;565,830&#39;, &#39;deaths&#39;: &#39;1,475&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;560,795&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;3,560&#39;, &#39;total_cases_per_1m_population&#39;: &#39;312,916&#39;, &#39;deaths_per_1m_population&#39;: &#39;816&#39;, &#39;total_tests&#39;: &#39;9,695,962&#39;, &#39;tests_per_1m_population&#39;: &#39;5,362,081&#39;}, {&#39;country_name&#39;: &#39;Venezuela&#39;, &#39;cases&#39;: &#39;522,121&#39;, &#39;deaths&#39;: &#39;5,705&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;515,305&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;230&#39;, &#39;active_cases&#39;: &#39;1,111&#39;, &#39;total_cases_per_1m_population&#39;: &#39;18,456&#39;, &#39;deaths_per_1m_population&#39;: &#39;202&#39;, &#39;total_tests&#39;: &#39;3,359,014&#39;, &#39;tests_per_1m_population&#39;: &#39;118,733&#39;}, {&#39;country_name&#39;: &#39;Moldova&#39;, &#39;cases&#39;: &#39;516,986&#39;, &#39;deaths&#39;: &#39;11,489&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;504,142&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;49&#39;, &#39;active_cases&#39;: &#39;1,355&#39;, &#39;total_cases_per_1m_population&#39;: &#39;128,698&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,860&#39;, &#39;total_tests&#39;: &#39;3,216,305&#39;, &#39;tests_per_1m_population&#39;: &#39;800,665&#39;}, {&#39;country_name&#39;: &#39;Egypt&#39;, &#39;cases&#39;: &#39;515,645&#39;, &#39;deaths&#39;: &#39;24,613&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;442,182&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;122&#39;, &#39;active_cases&#39;: &#39;48,850&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,873&#39;, &#39;deaths_per_1m_population&#39;: &#39;233&#39;, &#39;total_tests&#39;: &#39;3,693,367&#39;, &#39;tests_per_1m_population&#39;: &#39;34,903&#39;}, {&#39;country_name&#39;: &#39;Libya&#39;, &#39;cases&#39;: &#39;501,862&#39;, &#39;deaths&#39;: &#39;6,429&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;490,900&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;101&#39;, &#39;active_cases&#39;: &#39;4,533&#39;, &#39;total_cases_per_1m_population&#39;: &#39;71,288&#39;, &#39;deaths_per_1m_population&#39;: &#39;913&#39;, &#39;total_tests&#39;: &#39;2,476,960&#39;, &#39;tests_per_1m_population&#39;: &#39;351,844&#39;}, {&#39;country_name&#39;: &#39;Cyprus&#39;, &#39;cases&#39;: &#39;470,481&#39;, &#39;deaths&#39;: &#39;1,011&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;124,370&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;60&#39;, &#39;active_cases&#39;: &#39;345,100&#39;, &#39;total_cases_per_1m_population&#39;: &#39;384,623&#39;, &#39;deaths_per_1m_population&#39;: &#39;827&#39;, &#39;total_tests&#39;: &#39;9,477,138&#39;, &#39;tests_per_1m_population&#39;: &#39;7,747,665&#39;}, {&#39;country_name&#39;: &#39;Ethiopia&#39;, &#39;cases&#39;: &#39;470,417&#39;, &#39;deaths&#39;: &#39;7,510&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;454,967&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;15&#39;, &#39;active_cases&#39;: &#39;7,940&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,917&#39;, &#39;deaths_per_1m_population&#39;: &#39;63&#39;, &#39;total_tests&#39;: &#39;4,763,756&#39;, &#39;tests_per_1m_population&#39;: &#39;39,665&#39;}, {&#39;country_name&#39;: &#39;Mongolia&#39;, &#39;cases&#39;: &#39;469,580&#39;, &#39;deaths&#39;: &#39;2,177&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;313,256&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;30&#39;, &#39;serious_critical&#39;: &#39;192&#39;, &#39;active_cases&#39;: &#39;154,147&#39;, &#39;total_cases_per_1m_population&#39;: &#39;139,194&#39;, &#39;deaths_per_1m_population&#39;: &#39;645&#39;, &#39;total_tests&#39;: &#39;4,030,048&#39;, &#39;tests_per_1m_population&#39;: &#39;1,194,595&#39;}, {&#39;country_name&#39;: &#39;Armenia&#39;, &#39;cases&#39;: &#39;422,825&#39;, &#39;deaths&#39;: &#39;8,622&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;410,558&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;3&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;3,645&#39;, &#39;total_cases_per_1m_population&#39;: &#39;142,210&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,900&#39;, &#39;total_tests&#39;: &#39;3,035,104&#39;, &#39;tests_per_1m_population&#39;: &#39;1,020,807&#39;}, {&#39;country_name&#39;: &#39;Honduras&#39;, &#39;cases&#39;: &#39;422,275&#39;, &#39;deaths&#39;: &#39;10,892&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;131,100&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;105&#39;, &#39;active_cases&#39;: &#39;280,283&#39;, &#39;total_cases_per_1m_population&#39;: &#39;41,445&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,069&#39;, &#39;total_tests&#39;: &#39;1,263,329&#39;, &#39;tests_per_1m_population&#39;: &#39;123,991&#39;}, {&#39;country_name&#39;: &#39;Oman&#39;, &#39;cases&#39;: &#39;388,995&#39;, &#39;deaths&#39;: &#39;4,257&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;384,055&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;683&#39;, &#39;total_cases_per_1m_population&#39;: &#39;72,833&#39;, &#39;deaths_per_1m_population&#39;: &#39;797&#39;, &#39;total_tests&#39;: &#39;25,000,000&#39;, &#39;tests_per_1m_population&#39;: &#39;4,680,828&#39;}, {&#39;country_name&#39;: &#39;Bosnia and Herzegovina&#39;, &#39;cases&#39;: &#39;376,699&#39;, &#39;deaths&#39;: &#39;15,756&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;192,218&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;168,725&#39;, &#39;total_cases_per_1m_population&#39;: &#39;116,122&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,857&#39;, &#39;total_tests&#39;: &#39;1,752,716&#39;, &#39;tests_per_1m_population&#39;: &#39;540,297&#39;}, {&#39;country_name&#39;: &#39;Réunion&#39;, &#39;cases&#39;: &#39;374,295&#39;, &#39;deaths&#39;: &#39;742&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;355,605&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;10&#39;, &#39;active_cases&#39;: &#39;17,948&#39;, &#39;total_cases_per_1m_population&#39;: &#39;412,744&#39;, &#39;deaths_per_1m_population&#39;: &#39;818&#39;, &#39;total_tests&#39;: &#39;1,603,660&#39;, &#39;tests_per_1m_population&#39;: &#39;1,768,393&#39;}, {&#39;country_name&#39;: &#39;Qatar&#39;, &#39;cases&#39;: &#39;364,089&#39;, &#39;deaths&#39;: &#39;677&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;362,568&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;844&#39;, &#39;total_cases_per_1m_population&#39;: &#39;129,670&#39;, &#39;deaths_per_1m_population&#39;: &#39;241&#39;, &#39;total_tests&#39;: &#39;3,425,362&#39;, &#39;tests_per_1m_population&#39;: &#39;1,219,943&#39;}, {&#39;country_name&#39;: &#39;Kenya&#39;, &#39;cases&#39;: &#39;323,696&#39;, &#39;deaths&#39;: &#39;5,649&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;317,909&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;138&#39;, &#39;total_cases_per_1m_population&#39;: &#39;5,790&#39;, &#39;deaths_per_1m_population&#39;: &#39;101&#39;, &#39;total_tests&#39;: &#39;3,581,506&#39;, &#39;tests_per_1m_population&#39;: &#39;64,060&#39;}, {&#39;country_name&#39;: &#39;Zambia&#39;, &#39;cases&#39;: &#39;318,984&#39;, &#39;deaths&#39;: &#39;3,974&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;314,075&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;935&#39;, &#39;total_cases_per_1m_population&#39;: &#39;16,517&#39;, &#39;deaths_per_1m_population&#39;: &#39;206&#39;, &#39;total_tests&#39;: &#39;3,408,441&#39;, &#39;tests_per_1m_population&#39;: &#39;176,487&#39;}, {&#39;country_name&#39;: &#39;North Macedonia&#39;, &#39;cases&#39;: &#39;309,062&#39;, &#39;deaths&#39;: &#39;9,271&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;299,064&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;727&#39;, &#39;total_cases_per_1m_population&#39;: &#39;148,358&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,450&#39;, &#39;total_tests&#39;: &#39;2,007,553&#39;, &#39;tests_per_1m_population&#39;: &#39;963,678&#39;}, {&#39;country_name&#39;: &#39;Botswana&#39;, &#39;cases&#39;: &#39;305,859&#39;, &#39;deaths&#39;: &#39;2,688&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;303,026&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;145&#39;, &#39;total_cases_per_1m_population&#39;: &#39;125,491&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,103&#39;, &#39;total_tests&#39;: &#39;2,026,898&#39;, &#39;tests_per_1m_population&#39;: &#39;831,613&#39;}, {&#39;country_name&#39;: &#39;Albania&#39;, &#39;cases&#39;: &#39;274,791&#39;, &#39;deaths&#39;: &#39;3,496&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;270,869&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;426&#39;, &#39;total_cases_per_1m_population&#39;: &#39;95,675&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,217&#39;, &#39;total_tests&#39;: &#39;1,799,730&#39;, &#39;tests_per_1m_population&#39;: &#39;626,620&#39;}, {&#39;country_name&#39;: &#39;Algeria&#39;, &#39;cases&#39;: &#39;265,761&#39;, &#39;deaths&#39;: &#39;6,874&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;178,344&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;6&#39;, &#39;active_cases&#39;: &#39;80,543&#39;, &#39;total_cases_per_1m_population&#39;: &#39;5,869&#39;, &#39;deaths_per_1m_population&#39;: &#39;152&#39;, &#39;total_tests&#39;: &#39;230,861&#39;, &#39;tests_per_1m_population&#39;: &#39;5,099&#39;}, {&#39;country_name&#39;: &#39;Nigeria&#39;, &#39;cases&#39;: &#39;255,685&#39;, &#39;deaths&#39;: &#39;3,143&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;249,890&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;11&#39;, &#39;active_cases&#39;: &#39;2,652&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,187&#39;, &#39;deaths_per_1m_population&#39;: &#39;15&#39;, &#39;total_tests&#39;: &#39;5,036,813&#39;, &#39;tests_per_1m_population&#39;: &#39;23,388&#39;}, {&#39;country_name&#39;: &#39;Zimbabwe&#39;, &#39;cases&#39;: &#39;247,524&#39;, &#39;deaths&#39;: &#39;5,468&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;241,362&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;12&#39;, &#39;active_cases&#39;: &#39;694&#39;, &#39;total_cases_per_1m_population&#39;: &#39;16,227&#39;, &#39;deaths_per_1m_population&#39;: &#39;358&#39;, &#39;total_tests&#39;: &#39;2,240,305&#39;, &#39;tests_per_1m_population&#39;: &#39;146,872&#39;}, {&#39;country_name&#39;: &#39;Uzbekistan&#39;, &#39;cases&#39;: &#39;238,469&#39;, &#39;deaths&#39;: &#39;1,637&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;236,483&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;27&#39;, &#39;serious_critical&#39;: &#39;23&#39;, &#39;active_cases&#39;: &#39;349&#39;, &#39;total_cases_per_1m_population&#39;: &#39;6,943&#39;, &#39;deaths_per_1m_population&#39;: &#39;48&#39;, &#39;total_tests&#39;: &#39;1,377,915&#39;, &#39;tests_per_1m_population&#39;: &#39;40,120&#39;}, {&#39;country_name&#39;: &#39;Montenegro&#39;, &#39;cases&#39;: &#39;234,619&#39;, &#39;deaths&#39;: &#39;2,713&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;231,297&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;6&#39;, &#39;active_cases&#39;: &#39;609&#39;, &#39;total_cases_per_1m_population&#39;: &#39;373,473&#39;, &#39;deaths_per_1m_population&#39;: &#39;4,319&#39;, &#39;total_tests&#39;: &#39;2,444,820&#39;, &#39;tests_per_1m_population&#39;: &#39;3,891,730&#39;}, {&#39;country_name&#39;: &#39;Luxembourg&#39;, &#39;cases&#39;: &#39;233,966&#39;, &#39;deaths&#39;: &#39;1,058&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;221,501&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;11,407&#39;, &#39;total_cases_per_1m_population&#39;: &#39;363,099&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,642&#39;, &#39;total_tests&#39;: &#39;4,213,886&#39;, &#39;tests_per_1m_population&#39;: &#39;6,539,666&#39;}, {&#39;country_name&#39;: &#39;Mozambique&#39;, &#39;cases&#39;: &#39;225,358&#39;, &#39;deaths&#39;: &#39;2,201&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;223,104&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;13&#39;, &#39;active_cases&#39;: &#39;53&#39;, &#39;total_cases_per_1m_population&#39;: &#39;6,863&#39;, &#39;deaths_per_1m_population&#39;: &#39;67&#39;, &#39;total_tests&#39;: &#39;1,308,458&#39;, &#39;tests_per_1m_population&#39;: &#39;39,849&#39;}, {&#39;country_name&#39;: &#39;Laos&#39;, &#39;cases&#39;: &#39;205,975&#39;, &#39;deaths&#39;: &#39;732&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,660&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;1,082&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;197,583&#39;, &#39;total_cases_per_1m_population&#39;: &#39;27,588&#39;, &#39;deaths_per_1m_population&#39;: &#39;98&#39;, &#39;total_tests&#39;: &#39;1,232,128&#39;, &#39;tests_per_1m_population&#39;: &#39;165,029&#39;}, {&#39;country_name&#39;: &#39;Kyrgyzstan&#39;, &#39;cases&#39;: &#39;200,983&#39;, &#39;deaths&#39;: &#39;2,991&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;196,386&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;131&#39;, &#39;active_cases&#39;: &#39;1,606&#39;, &#39;total_cases_per_1m_population&#39;: &#39;29,915&#39;, &#39;deaths_per_1m_population&#39;: &#39;445&#39;, &#39;total_tests&#39;: &#39;1,907,195&#39;, &#39;tests_per_1m_population&#39;: &#39;283,874&#39;}, {&#39;country_name&#39;: &#39;China&#39;, &#39;cases&#39;: &#39;200,654&#39;, &#39;deaths&#39;: &#39;4,725&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;166,398&#39;, &#39;new_deaths&#39;: &#39;39&#39;, &#39;new_cases&#39;: &#39;1,580&#39;, &#39;serious_critical&#39;: &#39;236&#39;, &#39;active_cases&#39;: &#39;29,531&#39;, &#39;total_cases_per_1m_population&#39;: &#39;139&#39;, &#39;deaths_per_1m_population&#39;: &#39;3&#39;, &#39;total_tests&#39;: &#39;160,000,000&#39;, &#39;tests_per_1m_population&#39;: &#39;111,163&#39;}, {&#39;country_name&#39;: &#39;Iceland&#39;, &#39;cases&#39;: &#39;183,974&#39;, &#39;deaths&#39;: &#39;112&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;75,685&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;108,177&#39;, &#39;total_cases_per_1m_population&#39;: &#39;532,886&#39;, &#39;deaths_per_1m_population&#39;: &#39;324&#39;, &#39;total_tests&#39;: &#39;1,953,616&#39;, &#39;tests_per_1m_population&#39;: &#39;5,658,702&#39;}, {&#39;country_name&#39;: &#39;Maldives&#39;, &#39;cases&#39;: &#39;178,883&#39;, &#39;deaths&#39;: &#39;298&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;163,687&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;25&#39;, &#39;active_cases&#39;: &#39;14,898&#39;, &#39;total_cases_per_1m_population&#39;: &#39;320,737&#39;, &#39;deaths_per_1m_population&#39;: &#39;534&#39;, &#39;total_tests&#39;: &#39;2,213,831&#39;, &#39;tests_per_1m_population&#39;: &#39;3,969,395&#39;}, {&#39;country_name&#39;: &#39;Afghanistan&#39;, &#39;cases&#39;: &#39;178,689&#39;, &#39;deaths&#39;: &#39;7,682&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;161,748&#39;, &#39;new_deaths&#39;: &#39;1&#39;, &#39;new_cases&#39;: &#39;39&#39;, &#39;serious_critical&#39;: &#39;1,124&#39;, &#39;active_cases&#39;: &#39;9,259&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,411&#39;, &#39;deaths_per_1m_population&#39;: &#39;190&#39;, &#39;total_tests&#39;: &#39;940,341&#39;, &#39;tests_per_1m_population&#39;: &#39;23,212&#39;}, {&#39;country_name&#39;: &#39;Uganda&#39;, &#39;cases&#39;: &#39;164,069&#39;, &#39;deaths&#39;: &#39;3,596&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;100,205&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;60,268&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,394&#39;, &#39;deaths_per_1m_population&#39;: &#39;74&#39;, &#39;total_tests&#39;: &#39;2,612,795&#39;, &#39;tests_per_1m_population&#39;: &#39;54,043&#39;}, {&#39;country_name&#39;: &#39;El Salvador&#39;, &#39;cases&#39;: &#39;162,089&#39;, &#39;deaths&#39;: &#39;4,127&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;150,662&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;7,300&#39;, &#39;total_cases_per_1m_population&#39;: &#39;24,764&#39;, &#39;deaths_per_1m_population&#39;: &#39;631&#39;, &#39;total_tests&#39;: &#39;1,950,448&#39;, &#39;tests_per_1m_population&#39;: &#39;297,993&#39;}, {&#39;country_name&#39;: &#39;Ghana&#39;, &#39;cases&#39;: &#39;161,124&#39;, &#39;deaths&#39;: &#39;1,445&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;159,655&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;24&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,997&#39;, &#39;deaths_per_1m_population&#39;: &#39;45&#39;, &#39;total_tests&#39;: &#39;2,433,244&#39;, &#39;tests_per_1m_population&#39;: &#39;75,465&#39;}, {&#39;country_name&#39;: &#39;Namibia&#39;, &#39;cases&#39;: &#39;158,332&#39;, &#39;deaths&#39;: &#39;4,023&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;153,662&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;647&#39;, &#39;total_cases_per_1m_population&#39;: &#39;60,341&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,533&#39;, &#39;total_tests&#39;: &#39;1,001,354&#39;, &#39;tests_per_1m_population&#39;: &#39;381,621&#39;}, {&#39;country_name&#39;: &#39;Martinique&#39;, &#39;cases&#39;: &#39;147,519&#39;, &#39;deaths&#39;: &#39;918&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;104&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;146,497&#39;, &#39;total_cases_per_1m_population&#39;: &#39;393,657&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,450&#39;, &#39;total_tests&#39;: &#39;828,928&#39;, &#39;tests_per_1m_population&#39;: &#39;2,212,008&#39;}, {&#39;country_name&#39;: &#39;Trinidad and Tobago&#39;, &#39;cases&#39;: &#39;144,359&#39;, &#39;deaths&#39;: &#39;3,812&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;133,604&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;18&#39;, &#39;active_cases&#39;: &#39;6,943&#39;, &#39;total_cases_per_1m_population&#39;: &#39;102,552&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,708&#39;, &#39;total_tests&#39;: &#39;696,148&#39;, &#39;tests_per_1m_population&#39;: &#39;494,540&#39;}, {&#39;country_name&#39;: &#39;Brunei&#39;, &#39;cases&#39;: &#39;141,014&#39;, &#39;deaths&#39;: &#39;218&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;139,724&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;1,072&#39;, &#39;total_cases_per_1m_population&#39;: &#39;316,857&#39;, &#39;deaths_per_1m_population&#39;: &#39;490&#39;, &#39;total_tests&#39;: &#39;717,784&#39;, &#39;tests_per_1m_population&#39;: &#39;1,612,853&#39;}, {&#39;country_name&#39;: &#39;Guadeloupe&#39;, &#39;cases&#39;: &#39;140,130&#39;, &#39;deaths&#39;: &#39;854&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,250&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;19&#39;, &#39;active_cases&#39;: &#39;137,026&#39;, &#39;total_cases_per_1m_population&#39;: &#39;350,108&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,134&#39;, &#39;total_tests&#39;: &#39;938,039&#39;, &#39;tests_per_1m_population&#39;: &#39;2,343,644&#39;}, {&#39;country_name&#39;: &#39;Cambodia&#39;, &#39;cases&#39;: &#39;136,200&#39;, &#39;deaths&#39;: &#39;3,056&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;132,896&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;248&#39;, &#39;total_cases_per_1m_population&#39;: &#39;7,948&#39;, &#39;deaths_per_1m_population&#39;: &#39;178&#39;, &#39;total_tests&#39;: &#39;2,946,965&#39;, &#39;tests_per_1m_population&#39;: &#39;171,969&#39;}, {&#39;country_name&#39;: &#39;Rwanda&#39;, &#39;cases&#39;: &#39;129,764&#39;, &#39;deaths&#39;: &#39;1,458&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;45,522&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;82,784&#39;, &#39;total_cases_per_1m_population&#39;: &#39;9,590&#39;, &#39;deaths_per_1m_population&#39;: &#39;108&#39;, &#39;total_tests&#39;: &#39;5,225,494&#39;, &#39;tests_per_1m_population&#39;: &#39;386,173&#39;}, {&#39;country_name&#39;: &#39;Jamaica&#39;, &#39;cases&#39;: &#39;129,489&#39;, &#39;deaths&#39;: &#39;2,943&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;82,965&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;43,581&#39;, &#39;total_cases_per_1m_population&#39;: &#39;43,387&#39;, &#39;deaths_per_1m_population&#39;: &#39;986&#39;, &#39;total_tests&#39;: &#39;981,688&#39;, &#39;tests_per_1m_population&#39;: &#39;328,929&#39;}, {&#39;country_name&#39;: &#39;Cameroon&#39;, &#39;cases&#39;: &#39;119,780&#39;, &#39;deaths&#39;: &#39;1,927&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;117,791&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;13&#39;, &#39;active_cases&#39;: &#39;62&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,318&#39;, &#39;deaths_per_1m_population&#39;: &#39;69&#39;, &#39;total_tests&#39;: &#39;1,751,774&#39;, &#39;tests_per_1m_population&#39;: &#39;63,154&#39;}, {&#39;country_name&#39;: &#39;Angola&#39;, &#39;cases&#39;: &#39;99,194&#39;, &#39;deaths&#39;: &#39;1,900&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;97,149&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;145&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,858&#39;, &#39;deaths_per_1m_population&#39;: &#39;55&#39;, &#39;total_tests&#39;: &#39;1,499,795&#39;, &#39;tests_per_1m_population&#39;: &#39;43,209&#39;}, {&#39;country_name&#39;: &#39;Malta&#39;, &#39;cases&#39;: &#39;90,595&#39;, &#39;deaths&#39;: &#39;688&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;84,646&#39;, &#39;new_deaths&#39;: &#39;1&#39;, &#39;new_cases&#39;: &#39;196&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;5,261&#39;, &#39;total_cases_per_1m_population&#39;: &#39;204,196&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,551&#39;, &#39;total_tests&#39;: &#39;1,872,465&#39;, &#39;tests_per_1m_population&#39;: &#39;4,220,438&#39;}, {&#39;country_name&#39;: &#39;DRC&#39;, &#39;cases&#39;: &#39;87,023&#39;, &#39;deaths&#39;: &#39;1,337&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;50,930&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;34,756&#39;, &#39;total_cases_per_1m_population&#39;: &#39;921&#39;, &#39;deaths_per_1m_population&#39;: &#39;14&#39;, &#39;total_tests&#39;: &#39;846,704&#39;, &#39;tests_per_1m_population&#39;: &#39;8,962&#39;}, {&#39;country_name&#39;: &#39;Senegal&#39;, &#39;cases&#39;: &#39;85,984&#39;, &#39;deaths&#39;: &#39;1,966&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;84,001&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;17&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,902&#39;, &#39;deaths_per_1m_population&#39;: &#39;112&#39;, &#39;total_tests&#39;: &#39;1,063,849&#39;, &#39;tests_per_1m_population&#39;: &#39;60,653&#39;}, {&#39;country_name&#39;: &#39;Malawi&#39;, &#39;cases&#39;: &#39;85,747&#39;, &#39;deaths&#39;: &#39;2,633&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;81,938&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;67&#39;, &#39;active_cases&#39;: &#39;1,176&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,283&#39;, &#39;deaths_per_1m_population&#39;: &#39;132&#39;, &#39;total_tests&#39;: &#39;571,585&#39;, &#39;tests_per_1m_population&#39;: &#39;28,548&#39;}, {&#39;country_name&#39;: &#39;Ivory Coast&#39;, &#39;cases&#39;: &#39;81,887&#39;, &#39;deaths&#39;: &#39;799&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;81,061&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;27&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,972&#39;, &#39;deaths_per_1m_population&#39;: &#39;29&#39;, &#39;total_tests&#39;: &#39;1,494,624&#39;, &#39;tests_per_1m_population&#39;: &#39;54,238&#39;}, {&#39;country_name&#39;: &#39;French Guiana&#39;, &#39;cases&#39;: &#39;80,422&#39;, &#39;deaths&#39;: &#39;394&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,254&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;68,774&#39;, &#39;total_cases_per_1m_population&#39;: &#39;257,228&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,260&#39;, &#39;total_tests&#39;: &#39;622,646&#39;, &#39;tests_per_1m_population&#39;: &#39;1,991,518&#39;}, {&#39;country_name&#39;: &#39;Suriname&#39;, &#39;cases&#39;: &#39;79,302&#39;, &#39;deaths&#39;: &#39;1,327&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;49,396&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;28,579&#39;, &#39;total_cases_per_1m_population&#39;: &#39;133,030&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,226&#39;, &#39;total_tests&#39;: &#39;235,824&#39;, &#39;tests_per_1m_population&#39;: &#39;395,598&#39;}, {&#39;country_name&#39;: &#39;Channel Islands&#39;, &#39;cases&#39;: &#39;73,609&#39;, &#39;deaths&#39;: &#39;166&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;72,059&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,384&#39;, &#39;total_cases_per_1m_population&#39;: &#39;416,444&#39;, &#39;deaths_per_1m_population&#39;: &#39;939&#39;, &#39;total_tests&#39;: &#39;1,252,808&#39;, &#39;tests_per_1m_population&#39;: &#39;7,087,782&#39;}, {&#39;country_name&#39;: &#39;French Polynesia&#39;, &#39;cases&#39;: &#39;72,648&#39;, &#39;deaths&#39;: &#39;648&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;255,948&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,283&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Eswatini&#39;, &#39;cases&#39;: &#39;70,284&#39;, &#39;deaths&#39;: &#39;1,397&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;68,764&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;11&#39;, &#39;active_cases&#39;: &#39;123&#39;, &#39;total_cases_per_1m_population&#39;: &#39;59,470&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,182&#39;, &#39;total_tests&#39;: &#39;1,012,397&#39;, &#39;tests_per_1m_population&#39;: &#39;856,623&#39;}, {&#39;country_name&#39;: &#39;Barbados&#39;, &#39;cases&#39;: &#39;67,256&#39;, &#39;deaths&#39;: &#39;389&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;63,424&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;3,443&#39;, &#39;total_cases_per_1m_population&#39;: &#39;233,520&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,351&#39;, &#39;total_tests&#39;: &#39;640,085&#39;, &#39;tests_per_1m_population&#39;: &#39;2,222,440&#39;}, {&#39;country_name&#39;: &#39;Fiji&#39;, &#39;cases&#39;: &#39;64,524&#39;, &#39;deaths&#39;: &#39;862&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;62,677&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;985&#39;, &#39;total_cases_per_1m_population&#39;: &#39;71,048&#39;, &#39;deaths_per_1m_population&#39;: &#39;949&#39;, &#39;total_tests&#39;: &#39;506,642&#39;, &#39;tests_per_1m_population&#39;: &#39;557,871&#39;}, {&#39;country_name&#39;: &#39;Madagascar&#39;, &#39;cases&#39;: &#39;64,121&#39;, &#39;deaths&#39;: &#39;1,391&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;59,370&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;14&#39;, &#39;active_cases&#39;: &#39;3,360&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,213&#39;, &#39;deaths_per_1m_population&#39;: &#39;48&#39;, &#39;total_tests&#39;: &#39;418,849&#39;, &#39;tests_per_1m_population&#39;: &#39;14,455&#39;}, {&#39;country_name&#39;: &#39;Guyana&#39;, &#39;cases&#39;: &#39;63,413&#39;, &#39;deaths&#39;: &#39;1,228&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;62,092&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;93&#39;, &#39;total_cases_per_1m_population&#39;: &#39;79,925&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,548&#39;, &#39;total_tests&#39;: &#39;590,638&#39;, &#39;tests_per_1m_population&#39;: &#39;744,436&#39;}, {&#39;country_name&#39;: &#39;Sudan&#39;, &#39;cases&#39;: &#39;62,093&#39;, &#39;deaths&#39;: &#39;4,930&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,359&#39;, &#39;deaths_per_1m_population&#39;: &#39;108&#39;, &#39;total_tests&#39;: &#39;562,941&#39;, &#39;tests_per_1m_population&#39;: &#39;12,319&#39;}, {&#39;country_name&#39;: &#39;New Caledonia&#39;, &#39;cases&#39;: &#39;60,457&#39;, &#39;deaths&#39;: &#39;312&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;60,064&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;9&#39;, &#39;active_cases&#39;: &#39;81&#39;, &#39;total_cases_per_1m_population&#39;: &#39;208,148&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,074&#39;, &#39;total_tests&#39;: &#39;98,964&#39;, &#39;tests_per_1m_population&#39;: &#39;340,724&#39;}, {&#39;country_name&#39;: &#39;Mauritania&#39;, &#39;cases&#39;: &#39;58,683&#39;, &#39;deaths&#39;: &#39;982&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;57,693&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;8&#39;, &#39;total_cases_per_1m_population&#39;: &#39;12,050&#39;, &#39;deaths_per_1m_population&#39;: &#39;202&#39;, &#39;total_tests&#39;: &#39;799,187&#39;, &#39;tests_per_1m_population&#39;: &#39;164,099&#39;}, {&#39;country_name&#39;: &#39;Bhutan&#39;, &#39;cases&#39;: &#39;57,771&#39;, &#39;deaths&#39;: &#39;20&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;53,080&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;431&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;4,671&#39;, &#39;total_cases_per_1m_population&#39;: &#39;73,412&#39;, &#39;deaths_per_1m_population&#39;: &#39;25&#39;, &#39;total_tests&#39;: &#39;2,284,301&#39;, &#39;tests_per_1m_population&#39;: &#39;2,902,749&#39;}, {&#39;country_name&#39;: &#39;Belize&#39;, &#39;cases&#39;: &#39;57,419&#39;, &#39;deaths&#39;: &#39;676&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;56,534&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;6&#39;, &#39;active_cases&#39;: &#39;209&#39;, &#39;total_cases_per_1m_population&#39;: &#39;139,823&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,646&#39;, &#39;total_tests&#39;: &#39;534,770&#39;, &#39;tests_per_1m_population&#39;: &#39;1,302,237&#39;}, {&#39;country_name&#39;: &#39;Taiwan&#39;, &#39;cases&#39;: &#39;56,468&#39;, &#39;deaths&#39;: &#39;856&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;23,729&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;5,172&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;31,883&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,363&#39;, &#39;deaths_per_1m_population&#39;: &#39;36&#39;, &#39;total_tests&#39;: &#39;14,289,370&#39;, &#39;tests_per_1m_population&#39;: &#39;598,017&#39;}, {&#39;country_name&#39;: &#39;Cabo Verde&#39;, &#39;cases&#39;: &#39;56,004&#39;, &#39;deaths&#39;: &#39;401&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;55,538&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;23&#39;, &#39;active_cases&#39;: &#39;65&#39;, &#39;total_cases_per_1m_population&#39;: &#39;98,792&#39;, &#39;deaths_per_1m_population&#39;: &#39;707&#39;, &#39;total_tests&#39;: &#39;400,982&#39;, &#39;tests_per_1m_population&#39;: &#39;707,340&#39;}, {&#39;country_name&#39;: &#39;Syria&#39;, &#39;cases&#39;: &#39;55,795&#39;, &#39;deaths&#39;: &#39;3,150&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;52,090&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;555&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,054&#39;, &#39;deaths_per_1m_population&#39;: &#39;172&#39;, &#39;total_tests&#39;: &#39;146,269&#39;, &#39;tests_per_1m_population&#39;: &#39;8,007&#39;}, {&#39;country_name&#39;: &#39;Gabon&#39;, &#39;cases&#39;: &#39;47,597&#39;, &#39;deaths&#39;: &#39;303&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;47,282&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;12&#39;, &#39;total_cases_per_1m_population&#39;: &#39;20,512&#39;, &#39;deaths_per_1m_population&#39;: &#39;131&#39;, &#39;total_tests&#39;: &#39;1,592,483&#39;, &#39;tests_per_1m_population&#39;: &#39;686,270&#39;}, {&#39;country_name&#39;: &#39;Papua New Guinea&#39;, &#39;cases&#39;: &#39;43,732&#39;, &#39;deaths&#39;: &#39;649&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;43,025&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;58&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,726&#39;, &#39;deaths_per_1m_population&#39;: &#39;70&#39;, &#39;total_tests&#39;: &#39;249,149&#39;, &#39;tests_per_1m_population&#39;: &#39;26,927&#39;}, {&#39;country_name&#39;: &#39;Seychelles&#39;, &#39;cases&#39;: &#39;42,079&#39;, &#39;deaths&#39;: &#39;165&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;41,260&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;654&#39;, &#39;total_cases_per_1m_population&#39;: &#39;423,134&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,659&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Curaçao&#39;, &#39;cases&#39;: &#39;41,966&#39;, &#39;deaths&#39;: &#39;273&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;41,251&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;442&#39;, &#39;total_cases_per_1m_population&#39;: &#39;253,872&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,652&#39;, &#39;total_tests&#39;: &#39;496,693&#39;, &#39;tests_per_1m_population&#39;: &#39;3,004,725&#39;}, {&#39;country_name&#39;: &#39;Andorra&#39;, &#39;cases&#39;: &#39;41,013&#39;, &#39;deaths&#39;: &#39;153&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;40,343&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;14&#39;, &#39;active_cases&#39;: &#39;517&#39;, &#39;total_cases_per_1m_population&#39;: &#39;529,282&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,974&#39;, &#39;total_tests&#39;: &#39;249,838&#39;, &#39;tests_per_1m_population&#39;: &#39;3,224,215&#39;}, {&#39;country_name&#39;: &#39;Burundi&#39;, &#39;cases&#39;: &#39;38,887&#39;, &#39;deaths&#39;: &#39;38&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;773&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;38,076&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,104&#39;, &#39;deaths_per_1m_population&#39;: &#39;3&#39;, &#39;total_tests&#39;: &#39;345,742&#39;, &#39;tests_per_1m_population&#39;: &#39;27,594&#39;}, {&#39;country_name&#39;: &#39;Mauritius&#39;, &#39;cases&#39;: &#39;37,656&#39;, &#39;deaths&#39;: &#39;990&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;35,656&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,010&#39;, &#39;total_cases_per_1m_population&#39;: &#39;29,521&#39;, &#39;deaths_per_1m_population&#39;: &#39;776&#39;, &#39;total_tests&#39;: &#39;358,675&#39;, &#39;tests_per_1m_population&#39;: &#39;281,186&#39;}, {&#39;country_name&#39;: &#39;Mayotte&#39;, &#39;cases&#39;: &#39;37,038&#39;, &#39;deaths&#39;: &#39;187&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,964&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;33,887&#39;, &#39;total_cases_per_1m_population&#39;: &#39;130,099&#39;, &#39;deaths_per_1m_population&#39;: &#39;657&#39;, &#39;total_tests&#39;: &#39;176,919&#39;, &#39;tests_per_1m_population&#39;: &#39;621,442&#39;}, {&#39;country_name&#39;: &#39;Togo&#39;, &#39;cases&#39;: &#39;36,977&#39;, &#39;deaths&#39;: &#39;273&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;36,679&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;25&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,285&#39;, &#39;deaths_per_1m_population&#39;: &#39;32&#39;, &#39;total_tests&#39;: &#39;727,740&#39;, &#39;tests_per_1m_population&#39;: &#39;84,338&#39;}, {&#39;country_name&#39;: &#39;Guinea&#39;, &#39;cases&#39;: &#39;36,459&#39;, &#39;deaths&#39;: &#39;440&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;35,976&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;8&#39;, &#39;active_cases&#39;: &#39;43&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,647&#39;, &#39;deaths_per_1m_population&#39;: &#39;32&#39;, &#39;total_tests&#39;: &#39;660,107&#39;, &#39;tests_per_1m_population&#39;: &#39;47,919&#39;}, {&#39;country_name&#39;: &#39;Faeroe Islands&#39;, &#39;cases&#39;: &#39;34,658&#39;, &#39;deaths&#39;: &#39;28&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,693&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;26,937&#39;, &#39;total_cases_per_1m_population&#39;: &#39;704,460&#39;, &#39;deaths_per_1m_population&#39;: &#39;569&#39;, &#39;total_tests&#39;: &#39;778,000&#39;, &#39;tests_per_1m_population&#39;: &#39;15,813,651&#39;}, {&#39;country_name&#39;: &#39;Aruba&#39;, &#39;cases&#39;: &#39;34,589&#39;, &#39;deaths&#39;: &#39;212&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;34,251&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;126&#39;, &#39;total_cases_per_1m_population&#39;: &#39;321,507&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,971&#39;, &#39;total_tests&#39;: &#39;177,885&#39;, &#39;tests_per_1m_population&#39;: &#39;1,653,452&#39;}, {&#39;country_name&#39;: &#39;Tanzania&#39;, &#39;cases&#39;: &#39;33,864&#39;, &#39;deaths&#39;: &#39;803&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;539&#39;, &#39;deaths_per_1m_population&#39;: &#39;13&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Bahamas&#39;, &#39;cases&#39;: &#39;33,463&#39;, &#39;deaths&#39;: &#39;789&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;32,310&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;11&#39;, &#39;active_cases&#39;: &#39;364&#39;, &#39;total_cases_per_1m_population&#39;: &#39;83,652&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,972&#39;, &#39;total_tests&#39;: &#39;229,817&#39;, &#39;tests_per_1m_population&#39;: &#39;574,504&#39;}, {&#39;country_name&#39;: &#39;Lesotho&#39;, &#39;cases&#39;: &#39;32,910&#39;, &#39;deaths&#39;: &#39;697&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;24,155&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;8,058&#39;, &#39;total_cases_per_1m_population&#39;: &#39;15,146&#39;, &#39;deaths_per_1m_population&#39;: &#39;321&#39;, &#39;total_tests&#39;: &#39;431,221&#39;, &#39;tests_per_1m_population&#39;: &#39;198,454&#39;}, {&#39;country_name&#39;: &#39;Mali&#39;, &#39;cases&#39;: &#39;30,727&#39;, &#39;deaths&#39;: &#39;731&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;29,795&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;201&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,442&#39;, &#39;deaths_per_1m_population&#39;: &#39;34&#39;, &#39;total_tests&#39;: &#39;663,805&#39;, &#39;tests_per_1m_population&#39;: &#39;31,160&#39;}, {&#39;country_name&#39;: &#39;Haiti&#39;, &#39;cases&#39;: &#39;30,640&#39;, &#39;deaths&#39;: &#39;835&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;29,389&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;416&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,629&#39;, &#39;deaths_per_1m_population&#39;: &#39;72&#39;, &#39;total_tests&#39;: &#39;132,422&#39;, &#39;tests_per_1m_population&#39;: &#39;11,363&#39;}, {&#39;country_name&#39;: &#39;Isle of Man&#39;, &#39;cases&#39;: &#39;28,416&#39;, &#39;deaths&#39;: &#39;87&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;26,794&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,535&#39;, &#39;total_cases_per_1m_population&#39;: &#39;331,015&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,013&#39;, &#39;total_tests&#39;: &#39;150,753&#39;, &#39;tests_per_1m_population&#39;: &#39;1,756,107&#39;}, {&#39;country_name&#39;: &#39;Benin&#39;, &#39;cases&#39;: &#39;26,952&#39;, &#39;deaths&#39;: &#39;163&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;25,506&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;1,283&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,123&#39;, &#39;deaths_per_1m_population&#39;: &#39;13&#39;, &#39;total_tests&#39;: &#39;604,310&#39;, &#39;tests_per_1m_population&#39;: &#39;47,598&#39;}, {&#39;country_name&#39;: &#39;Somalia&#39;, &#39;cases&#39;: &#39;26,485&#39;, &#39;deaths&#39;: &#39;1,350&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;13,182&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;11,953&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,587&#39;, &#39;deaths_per_1m_population&#39;: &#39;81&#39;, &#39;total_tests&#39;: &#39;400,466&#39;, &#39;tests_per_1m_population&#39;: &#39;23,990&#39;}, {&#39;country_name&#39;: &#39;Congo&#39;, &#39;cases&#39;: &#39;24,079&#39;, &#39;deaths&#39;: &#39;385&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;20,178&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;3,516&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,178&#39;, &#39;deaths_per_1m_population&#39;: &#39;67&#39;, &#39;total_tests&#39;: &#39;347,815&#39;, &#39;tests_per_1m_population&#39;: &#39;60,352&#39;}, {&#39;country_name&#39;: &#39;Saint Lucia&#39;, &#39;cases&#39;: &#39;23,239&#39;, &#39;deaths&#39;: &#39;368&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;22,736&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;135&#39;, &#39;total_cases_per_1m_population&#39;: &#39;125,520&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,988&#39;, &#39;total_tests&#39;: &#39;142,630&#39;, &#39;tests_per_1m_population&#39;: &#39;770,382&#39;}, {&#39;country_name&#39;: &#39;Timor-Leste&#39;, &#39;cases&#39;: &#39;22,860&#39;, &#39;deaths&#39;: &#39;130&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;22,714&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;16&#39;, &#39;total_cases_per_1m_population&#39;: &#39;16,762&#39;, &#39;deaths_per_1m_population&#39;: &#39;95&#39;, &#39;total_tests&#39;: &#39;261,007&#39;, &#39;tests_per_1m_population&#39;: &#39;191,388&#39;}, {&#39;country_name&#39;: &#39;Cayman Islands&#39;, &#39;cases&#39;: &#39;21,755&#39;, &#39;deaths&#39;: &#39;26&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;8,553&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;13,176&#39;, &#39;total_cases_per_1m_population&#39;: &#39;324,145&#39;, &#39;deaths_per_1m_population&#39;: &#39;387&#39;, &#39;total_tests&#39;: &#39;222,773&#39;, &#39;tests_per_1m_population&#39;: &#39;3,319,273&#39;}, {&#39;country_name&#39;: &#39;Burkina Faso&#39;, &#39;cases&#39;: &#39;20,853&#39;, &#39;deaths&#39;: &#39;382&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;20,439&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;32&#39;, &#39;total_cases_per_1m_population&#39;: &#39;951&#39;, &#39;deaths_per_1m_population&#39;: &#39;17&#39;, &#39;total_tests&#39;: &#39;248,995&#39;, &#39;tests_per_1m_population&#39;: &#39;11,350&#39;}, {&#39;country_name&#39;: &#39;Nicaragua&#39;, &#39;cases&#39;: &#39;18,491&#39;, &#39;deaths&#39;: &#39;225&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;4,225&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;14,041&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,733&#39;, &#39;deaths_per_1m_population&#39;: &#39;33&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Gibraltar&#39;, &#39;cases&#39;: &#39;17,706&#39;, &#39;deaths&#39;: &#39;102&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;16,579&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,025&#39;, &#39;total_cases_per_1m_population&#39;: &#39;525,822&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,029&#39;, &#39;total_tests&#39;: &#39;534,283&#39;, &#39;tests_per_1m_population&#39;: &#39;15,866,807&#39;}, {&#39;country_name&#39;: &#39;South Sudan&#39;, &#39;cases&#39;: &#39;17,422&#39;, &#39;deaths&#39;: &#39;138&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;13,514&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;3,770&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,524&#39;, &#39;deaths_per_1m_population&#39;: &#39;12&#39;, &#39;total_tests&#39;: &#39;376,391&#39;, &#39;tests_per_1m_population&#39;: &#39;32,928&#39;}, {&#39;country_name&#39;: &#39;Tajikistan&#39;, &#39;cases&#39;: &#39;17,388&#39;, &#39;deaths&#39;: &#39;124&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;17,264&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,752&#39;, &#39;deaths_per_1m_population&#39;: &#39;12&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Liechtenstein&#39;, &#39;cases&#39;: &#39;17,103&#39;, &#39;deaths&#39;: &#39;85&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;16,831&#39;, &#39;new_deaths&#39;: &#39;1&#39;, &#39;new_cases&#39;: &#39;12&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;187&#39;, &#39;total_cases_per_1m_population&#39;: &#39;446,251&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,218&#39;, &#39;total_tests&#39;: &#39;102,174&#39;, &#39;tests_per_1m_population&#39;: &#39;2,665,919&#39;}, {&#39;country_name&#39;: &#39;San Marino&#39;, &#39;cases&#39;: &#39;16,140&#39;, &#39;deaths&#39;: &#39;114&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;15,662&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;364&#39;, &#39;total_cases_per_1m_population&#39;: &#39;473,870&#39;, &#39;deaths_per_1m_population&#39;: &#39;3,347&#39;, &#39;total_tests&#39;: &#39;149,271&#39;, &#39;tests_per_1m_population&#39;: &#39;4,382,590&#39;}, {&#39;country_name&#39;: &#39;Equatorial Guinea&#39;, &#39;cases&#39;: &#39;15,907&#39;, &#39;deaths&#39;: &#39;183&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;15,698&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;26&#39;, &#39;total_cases_per_1m_population&#39;: &#39;10,704&#39;, &#39;deaths_per_1m_population&#39;: &#39;123&#39;, &#39;total_tests&#39;: &#39;310,972&#39;, &#39;tests_per_1m_population&#39;: &#39;209,251&#39;}, {&#39;country_name&#39;: &#39;Djibouti&#39;, &#39;cases&#39;: &#39;15,611&#39;, &#39;deaths&#39;: &#39;189&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;15,411&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;11&#39;, &#39;total_cases_per_1m_population&#39;: &#39;15,396&#39;, &#39;deaths_per_1m_population&#39;: &#39;186&#39;, &#39;total_tests&#39;: &#39;303,924&#39;, &#39;tests_per_1m_population&#39;: &#39;299,748&#39;}, {&#39;country_name&#39;: &#39;CAR&#39;, &#39;cases&#39;: &#39;14,649&#39;, &#39;deaths&#39;: &#39;113&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;6,859&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;7,677&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,941&#39;, &#39;deaths_per_1m_population&#39;: &#39;23&#39;, &#39;total_tests&#39;: &#39;81,294&#39;, &#39;tests_per_1m_population&#39;: &#39;16,320&#39;}, {&#39;country_name&#39;: &#39;Grenada&#39;, &#39;cases&#39;: &#39;14,428&#39;, &#39;deaths&#39;: &#39;220&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;13,945&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;263&#39;, &#39;total_cases_per_1m_population&#39;: &#39;127,159&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,939&#39;, &#39;total_tests&#39;: &#39;148,567&#39;, &#39;tests_per_1m_population&#39;: &#39;1,309,376&#39;}, {&#39;country_name&#39;: &#39;Bermuda&#39;, &#39;cases&#39;: &#39;13,143&#39;, &#39;deaths&#39;: &#39;131&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;12,719&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;293&#39;, &#39;total_cases_per_1m_population&#39;: &#39;212,453&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,118&#39;, &#39;total_tests&#39;: &#39;866,313&#39;, &#39;tests_per_1m_population&#39;: &#39;14,003,734&#39;}, {&#39;country_name&#39;: &#39;Solomon Islands&#39;, &#39;cases&#39;: &#39;12,437&#39;, &#39;deaths&#39;: &#39;139&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,194&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;1,104&#39;, &#39;total_cases_per_1m_population&#39;: &#39;17,339&#39;, &#39;deaths_per_1m_population&#39;: &#39;194&#39;, &#39;total_tests&#39;: &#39;5,117&#39;, &#39;tests_per_1m_population&#39;: &#39;7,134&#39;}, {&#39;country_name&#39;: &#39;Dominica&#39;, &#39;cases&#39;: &#39;12,011&#39;, &#39;deaths&#39;: &#39;63&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,926&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;22&#39;, &#39;total_cases_per_1m_population&#39;: &#39;166,107&#39;, &#39;deaths_per_1m_population&#39;: &#39;871&#39;, &#39;total_tests&#39;: &#39;187,690&#39;, &#39;tests_per_1m_population&#39;: &#39;2,595,666&#39;}, {&#39;country_name&#39;: &#39;Gambia&#39;, &#39;cases&#39;: &#39;11,995&#39;, &#39;deaths&#39;: &#39;365&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,591&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;39&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,724&#39;, &#39;deaths_per_1m_population&#39;: &#39;144&#39;, &#39;total_tests&#39;: &#39;155,686&#39;, &#39;tests_per_1m_population&#39;: &#39;61,314&#39;}, {&#39;country_name&#39;: &#39;Greenland&#39;, &#39;cases&#39;: &#39;11,971&#39;, &#39;deaths&#39;: &#39;21&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,761&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;9,189&#39;, &#39;total_cases_per_1m_population&#39;: &#39;210,209&#39;, &#39;deaths_per_1m_population&#39;: &#39;369&#39;, &#39;total_tests&#39;: &#39;164,926&#39;, &#39;tests_per_1m_population&#39;: &#39;2,896,081&#39;}, {&#39;country_name&#39;: &#39;Yemen&#39;, &#39;cases&#39;: &#39;11,818&#39;, &#39;deaths&#39;: &#39;2,148&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,001&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;23&#39;, &#39;active_cases&#39;: &#39;669&#39;, &#39;total_cases_per_1m_population&#39;: &#39;381&#39;, &#39;deaths_per_1m_population&#39;: &#39;69&#39;, &#39;total_tests&#39;: &#39;265,253&#39;, &#39;tests_per_1m_population&#39;: &#39;8,553&#39;}, {&#39;country_name&#39;: &#39;Monaco&#39;, &#39;cases&#39;: &#39;11,604&#39;, &#39;deaths&#39;: &#39;54&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;11,362&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;188&#39;, &#39;total_cases_per_1m_population&#39;: &#39;291,969&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,359&#39;, &#39;total_tests&#39;: &#39;54,960&#39;, &#39;tests_per_1m_population&#39;: &#39;1,382,850&#39;}, {&#39;country_name&#39;: &#39;Saint Martin&#39;, &#39;cases&#39;: &#39;10,279&#39;, &#39;deaths&#39;: &#39;63&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,399&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;7&#39;, &#39;active_cases&#39;: &#39;8,817&#39;, &#39;total_cases_per_1m_population&#39;: &#39;257,903&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,581&#39;, &#39;total_tests&#39;: &#39;112,382&#39;, &#39;tests_per_1m_population&#39;: &#39;2,819,701&#39;}, {&#39;country_name&#39;: &#39;Sint Maarten&#39;, &#39;cases&#39;: &#39;9,990&#39;, &#39;deaths&#39;: &#39;86&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,841&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;10&#39;, &#39;active_cases&#39;: &#39;63&#39;, &#39;total_cases_per_1m_population&#39;: &#39;228,317&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,965&#39;, &#39;total_tests&#39;: &#39;62,056&#39;, &#39;tests_per_1m_population&#39;: &#39;1,418,261&#39;}, {&#39;country_name&#39;: &#39;Eritrea&#39;, &#39;cases&#39;: &#39;9,733&#39;, &#39;deaths&#39;: &#39;103&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,629&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1&#39;, &#39;total_cases_per_1m_population&#39;: &#39;2,678&#39;, &#39;deaths_per_1m_population&#39;: &#39;28&#39;, &#39;total_tests&#39;: &#39;23,693&#39;, &#39;tests_per_1m_population&#39;: &#39;6,518&#39;}, {&#39;country_name&#39;: &#39;Caribbean Netherlands&#39;, &#39;cases&#39;: &#39;9,592&#39;, &#39;deaths&#39;: &#39;34&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9,392&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;166&#39;, &#39;total_cases_per_1m_population&#39;: &#39;359,749&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,275&#39;, &#39;total_tests&#39;: &#39;30,126&#39;, &#39;tests_per_1m_population&#39;: &#39;1,129,880&#39;}, {&#39;country_name&#39;: &#39;Tonga&#39;, &#39;cases&#39;: &#39;9,553&#39;, &#39;deaths&#39;: &#39;11&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;8,306&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1,236&#39;, &#39;total_cases_per_1m_population&#39;: &#39;88,571&#39;, &#39;deaths_per_1m_population&#39;: &#39;102&#39;, &#39;total_tests&#39;: &#39;408,213&#39;, &#39;tests_per_1m_population&#39;: &#39;3,784,761&#39;}, {&#39;country_name&#39;: &#39;Niger&#39;, &#39;cases&#39;: &#39;8,914&#39;, &#39;deaths&#39;: &#39;309&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;8,507&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;98&#39;, &#39;total_cases_per_1m_population&#39;: &#39;346&#39;, &#39;deaths_per_1m_population&#39;: &#39;12&#39;, &#39;total_tests&#39;: &#39;249,026&#39;, &#39;tests_per_1m_population&#39;: &#39;9,657&#39;}, {&#39;country_name&#39;: &#39;Guinea-Bissau&#39;, &#39;cases&#39;: &#39;8,185&#39;, &#39;deaths&#39;: &#39;171&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,515&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;6&#39;, &#39;active_cases&#39;: &#39;499&#39;, &#39;total_cases_per_1m_population&#39;: &#39;3,989&#39;, &#39;deaths_per_1m_population&#39;: &#39;83&#39;, &#39;total_tests&#39;: &#39;132,611&#39;, &#39;tests_per_1m_population&#39;: &#39;64,628&#39;}, {&#39;country_name&#39;: &#39;Comoros&#39;, &#39;cases&#39;: &#39;8,100&#39;, &#39;deaths&#39;: &#39;160&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,933&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;7&#39;, &#39;total_cases_per_1m_population&#39;: &#39;8,970&#39;, &#39;deaths_per_1m_population&#39;: &#39;177&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Sierra Leone&#39;, &#39;cases&#39;: &#39;7,681&#39;, &#39;deaths&#39;: &#39;125&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;929&#39;, &#39;deaths_per_1m_population&#39;: &#39;15&#39;, &#39;total_tests&#39;: &#39;259,958&#39;, &#39;tests_per_1m_population&#39;: &#39;31,435&#39;}, {&#39;country_name&#39;: &#39;Antigua and Barbuda&#39;, &#39;cases&#39;: &#39;7,571&#39;, &#39;deaths&#39;: &#39;135&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7,402&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;34&#39;, &#39;total_cases_per_1m_population&#39;: &#39;76,172&#39;, &#39;deaths_per_1m_population&#39;: &#39;1,358&#39;, &#39;total_tests&#39;: &#39;18,901&#39;, &#39;tests_per_1m_population&#39;: &#39;190,164&#39;}, {&#39;country_name&#39;: &#39;Liberia&#39;, &#39;cases&#39;: &#39;7,432&#39;, &#39;deaths&#39;: &#39;294&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,747&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;2&#39;, &#39;active_cases&#39;: &#39;1,391&#39;, &#39;total_cases_per_1m_population&#39;: &#39;1,410&#39;, &#39;deaths_per_1m_population&#39;: &#39;56&#39;, &#39;total_tests&#39;: &#39;139,824&#39;, &#39;tests_per_1m_population&#39;: &#39;26,521&#39;}, {&#39;country_name&#39;: &#39;Chad&#39;, &#39;cases&#39;: &#39;7,396&#39;, &#39;deaths&#39;: &#39;193&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;4,874&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;2,329&#39;, &#39;total_cases_per_1m_population&#39;: &#39;428&#39;, &#39;deaths_per_1m_population&#39;: &#39;11&#39;, &#39;total_tests&#39;: &#39;191,341&#39;, &#39;tests_per_1m_population&#39;: &#39;11,075&#39;}, {&#39;country_name&#39;: &#39;Samoa&#39;, &#39;cases&#39;: &#39;7,185&#39;, &#39;deaths&#39;: &#39;13&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1,605&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;5,567&#39;, &#39;total_cases_per_1m_population&#39;: &#39;35,783&#39;, &#39;deaths_per_1m_population&#39;: &#39;65&#39;, &#39;total_tests&#39;: &#39;53,893&#39;, &#39;tests_per_1m_population&#39;: &#39;268,399&#39;}, {&#39;country_name&#39;: &#39;Vanuatu&#39;, &#39;cases&#39;: &#39;6,793&#39;, &#39;deaths&#39;: &#39;12&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,991&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;5&#39;, &#39;active_cases&#39;: &#39;790&#39;, &#39;total_cases_per_1m_population&#39;: &#39;21,222&#39;, &#39;deaths_per_1m_population&#39;: &#39;37&#39;, &#39;total_tests&#39;: &#39;24,976&#39;, &#39;tests_per_1m_population&#39;: &#39;78,027&#39;}, {&#39;country_name&#39;: &#39;St. Vincent Grenadines&#39;, &#39;cases&#39;: &#39;6,779&#39;, &#39;deaths&#39;: &#39;106&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;6,641&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;32&#39;, &#39;total_cases_per_1m_population&#39;: &#39;60,757&#39;, &#39;deaths_per_1m_population&#39;: &#39;950&#39;, &#39;total_tests&#39;: &#39;98,860&#39;, &#39;tests_per_1m_population&#39;: &#39;886,033&#39;}, {&#39;country_name&#39;: &#39;British Virgin Islands&#39;, &#39;cases&#39;: &#39;6,296&#39;, &#39;deaths&#39;: &#39;62&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;205,792&#39;, &#39;deaths_per_1m_population&#39;: &#39;2,027&#39;, &#39;total_tests&#39;: &#39;102,862&#39;, &#39;tests_per_1m_population&#39;: &#39;3,362,163&#39;}, {&#39;country_name&#39;: &#39;Sao Tome and Principe&#39;, &#39;cases&#39;: &#39;5,953&#39;, &#39;deaths&#39;: &#39;73&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,875&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;5&#39;, &#39;total_cases_per_1m_population&#39;: &#39;26,282&#39;, &#39;deaths_per_1m_population&#39;: &#39;322&#39;, &#39;total_tests&#39;: &#39;29,036&#39;, &#39;tests_per_1m_population&#39;: &#39;128,193&#39;}, {&#39;country_name&#39;: &#39;Turks and Caicos&#39;, &#39;cases&#39;: &#39;5,941&#39;, &#39;deaths&#39;: &#39;36&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,862&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;43&#39;, &#39;total_cases_per_1m_population&#39;: &#39;149,791&#39;, &#39;deaths_per_1m_population&#39;: &#39;908&#39;, &#39;total_tests&#39;: &#39;478,593&#39;, &#39;tests_per_1m_population&#39;: &#39;12,066,789&#39;}, {&#39;country_name&#39;: &#39;Saint Kitts and Nevis&#39;, &#39;cases&#39;: &#39;5,561&#39;, &#39;deaths&#39;: &#39;43&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;5,517&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1&#39;, &#39;total_cases_per_1m_population&#39;: &#39;103,215&#39;, &#39;deaths_per_1m_population&#39;: &#39;798&#39;, &#39;total_tests&#39;: &#39;65,141&#39;, &#39;tests_per_1m_population&#39;: &#39;1,209,046&#39;}, {&#39;country_name&#39;: &#39;Cook Islands&#39;, &#39;cases&#39;: &#39;4,727&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,990&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;737&#39;, &#39;total_cases_per_1m_population&#39;: &#39;268,686&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;15,740&#39;, &#39;tests_per_1m_population&#39;: &#39;894,674&#39;}, {&#39;country_name&#39;: &#39;St. Barth&#39;, &#39;cases&#39;: &#39;4,432&#39;, &#39;deaths&#39;: &#39;6&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;446,279&#39;, &#39;deaths_per_1m_population&#39;: &#39;604&#39;, &#39;total_tests&#39;: &#39;78,646&#39;, &#39;tests_per_1m_population&#39;: &#39;7,919,243&#39;}, {&#39;country_name&#39;: &#39;Palau&#39;, &#39;cases&#39;: &#39;4,396&#39;, &#39;deaths&#39;: &#39;6&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3,879&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;511&#39;, &#39;total_cases_per_1m_population&#39;: &#39;240,877&#39;, &#39;deaths_per_1m_population&#39;: &#39;329&#39;, &#39;total_tests&#39;: &#39;45,500&#39;, &#39;tests_per_1m_population&#39;: &#39;2,493,151&#39;}, {&#39;country_name&#39;: &#39;Kiribati&#39;, &#39;cases&#39;: &#39;3,076&#39;, &#39;deaths&#39;: &#39;13&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,597&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;3&#39;, &#39;active_cases&#39;: &#39;466&#39;, &#39;total_cases_per_1m_population&#39;: &#39;25,058&#39;, &#39;deaths_per_1m_population&#39;: &#39;106&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Anguilla&#39;, &#39;cases&#39;: &#39;2,731&#39;, &#39;deaths&#39;: &#39;9&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,716&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;4&#39;, &#39;active_cases&#39;: &#39;6&#39;, &#39;total_cases_per_1m_population&#39;: &#39;179,141&#39;, &#39;deaths_per_1m_population&#39;: &#39;590&#39;, &#39;total_tests&#39;: &#39;51,382&#39;, &#39;tests_per_1m_population&#39;: &#39;3,370,417&#39;}, {&#39;country_name&#39;: &#39;Saint Pierre Miquelon&#39;, &#39;cases&#39;: &#39;2,641&#39;, &#39;deaths&#39;: &#39;1&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2,449&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;1&#39;, &#39;active_cases&#39;: &#39;191&#39;, &#39;total_cases_per_1m_population&#39;: &#39;459,864&#39;, &#39;deaths_per_1m_population&#39;: &#39;174&#39;, &#39;total_tests&#39;: &#39;22,941&#39;, &#39;tests_per_1m_population&#39;: &#39;3,994,602&#39;}, {&#39;country_name&#39;: &#39;Diamond Princess&#39;, &#39;cases&#39;: &#39;712&#39;, &#39;deaths&#39;: &#39;13&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;699&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;0&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Wallis and Futuna&#39;, &#39;cases&#39;: &#39;454&#39;, &#39;deaths&#39;: &#39;7&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;438&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;9&#39;, &#39;total_cases_per_1m_population&#39;: &#39;41,713&#39;, &#39;deaths_per_1m_population&#39;: &#39;643&#39;, &#39;total_tests&#39;: &#39;20,508&#39;, &#39;tests_per_1m_population&#39;: &#39;1,884,234&#39;}, {&#39;country_name&#39;: &#39;Montserrat&#39;, &#39;cases&#39;: &#39;183&#39;, &#39;deaths&#39;: &#39;2&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;174&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;7&#39;, &#39;total_cases_per_1m_population&#39;: &#39;36,622&#39;, &#39;deaths_per_1m_population&#39;: &#39;400&#39;, &#39;total_tests&#39;: &#39;9,700&#39;, &#39;tests_per_1m_population&#39;: &#39;1,941,165&#39;}, {&#39;country_name&#39;: &#39;Falkland Islands&#39;, &#39;cases&#39;: &#39;128&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;N/A&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;N/A&#39;, &#39;total_cases_per_1m_population&#39;: &#39;34,944&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;8,632&#39;, &#39;tests_per_1m_population&#39;: &#39;2,356,538&#39;}, {&#39;country_name&#39;: &#39;Macao&#39;, &#39;cases&#39;: &#39;82&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;82&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;123&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;5,375&#39;, &#39;tests_per_1m_population&#39;: &#39;8,079&#39;}, {&#39;country_name&#39;: &#39;Vatican City&#39;, &#39;cases&#39;: &#39;29&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;29&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;36,025&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Marshall Islands&#39;, &#39;cases&#39;: &#39;15&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;8&#39;, &#39;total_cases_per_1m_population&#39;: &#39;250&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Western Sahara&#39;, &#39;cases&#39;: &#39;10&#39;, &#39;deaths&#39;: &#39;1&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;9&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;16&#39;, &#39;deaths_per_1m_population&#39;: &#39;2&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;MS Zaandam&#39;, &#39;cases&#39;: &#39;9&#39;, &#39;deaths&#39;: &#39;2&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;0&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Niue&#39;, &#39;cases&#39;: &#39;8&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;7&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;1&#39;, &#39;total_cases_per_1m_population&#39;: &#39;4,860&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Nauru&#39;, &#39;cases&#39;: &#39;3&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;3&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;274&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Saint Helena&#39;, &#39;cases&#39;: &#39;2&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;2&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;327&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}, {&#39;country_name&#39;: &#39;Micronesia&#39;, &#39;cases&#39;: &#39;1&#39;, &#39;deaths&#39;: &#39;0&#39;, &#39;region&#39;: &#39;&#39;, &#39;total_recovered&#39;: &#39;1&#39;, &#39;new_deaths&#39;: &#39;0&#39;, &#39;new_cases&#39;: &#39;0&#39;, &#39;serious_critical&#39;: &#39;0&#39;, &#39;active_cases&#39;: &#39;0&#39;, &#39;total_cases_per_1m_population&#39;: &#39;9&#39;, &#39;deaths_per_1m_population&#39;: &#39;0&#39;, &#39;total_tests&#39;: &#39;0&#39;, &#39;tests_per_1m_population&#39;: &#39;0&#39;}], &#39;statistic_taken_at&#39;: &#39;2022-04-24 11:18:01&#39;, &#39;world_total&#39;: {&#39;total_cases&#39;: &#39;509,268,964&#39;, &#39;new_cases&#39;: &#39;204,268&#39;, &#39;total_deaths&#39;: &#39;6,242,509&#39;, &#39;new_deaths&#39;: &#39;630&#39;, &#39;total_recovered&#39;: &#39;461,827,849&#39;, &#39;active_cases&#39;: &#39;41,198,606&#39;, &#39;serious_critical&#39;: &#39;42,510&#39;, &#39;total_cases_per_1m_population&#39;: &#39;65,334&#39;, &#39;deaths_per_1m_population&#39;: &#39;800.9&#39;, &#39;statistic_taken_at&#39;: &#39;2022-04-24 11:18:01&#39;}} World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name Spain cases 11,786,036 deaths 103,908 region total_recovered 11,261,340 new_deaths 0 new_cases 0 serious_critical 339 active_cases 420,788 total_cases_per_1m_population 251,906 deaths_per_1m_population 2,221 total_tests 471,036,328 tests_per_1m_population 10,067,575 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) #print(response.text) # End Rapid API Code json = response.json() # convert response to python json object coins = response.json().get(&#39;coins_stat&#39;) for coin in coins: if coin[&quot;coin_name&quot;] == &quot;Bitcoin&quot;: for key, value in coin.items(): print (key, value) # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . TypeError Traceback (most recent call last) /Users/Trent/vscode/cuddly-succotash/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb Cell 6 in &lt;cell line: 20&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#W5sZmlsZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; json = response.json() # convert response to python json object &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#W5sZmlsZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; coins = response.json().get(&#39;coins_stat&#39;) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#W5sZmlsZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; for conn in coins: &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#W5sZmlsZQ%3D%3D?line=20&#39;&gt;21&lt;/a&gt; if conn[&#34;coin_name&#34;] == &#34;Bitcoin&#34;: &lt;a href=&#39;vscode-notebook-cell:/Users/Trent/vscode/cuddly-succotash/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#W5sZmlsZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; for key, value in conn.items(): TypeError: &#39;NoneType&#39; object is not iterable . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; API status: success BTC 20049.9237327966 Icon Url: https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg Rank Url: https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc ETH 1358.6355164439092 Icon Url: https://cdn.coinranking.com/rk4RKHOuW/eth.svg Rank Url: https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth USDT 1.0007683383144264 Icon Url: https://cdn.coinranking.com/mgHqwlCLj/usdt.svg Rank Url: https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt USDC 1.0012907811707508 Icon Url: https://cdn.coinranking.com/jkDf8sQbY/usdc.svg Rank Url: https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc BNB 293.22942267572773 Icon Url: https://cdn.coinranking.com/B1N19L_dZ/bnb.svg Rank Url: https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb XRP 0.49598921502331633 Icon Url: https://cdn.coinranking.com/B1oPuTyfX/xrp.svg Rank Url: https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp BUSD 1.0002974548603891 Icon Url: https://cdn.coinranking.com/6SJHRfClq/busd.svg Rank Url: https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd ADA 0.42885971529577105 Icon Url: https://cdn.coinranking.com/ryY28nXhW/ada.svg Rank Url: https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada SOL 33.69664828989402 Icon Url: https://cdn.coinranking.com/yvUG4Qex5/solana.svg Rank Url: https://coinranking.com/coin/zNZHO_Sjf+solana-sol DOGE 0.06382400338374933 Icon Url: https://cdn.coinranking.com/H1arXIuOZ/doge.svg Rank Url: https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge MATIC 0.8414524945650208 Icon Url: https://cdn.coinranking.com/WulYRq14o/polygon.png Rank Url: https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic DOT 6.375081803170367 Icon Url: https://cdn.coinranking.com/RsljYqnbu/polkadot.svg Rank Url: https://coinranking.com/coin/25W7FG7om+polkadot-dot SHIB 0.000011288914472657 Icon Url: https://cdn.coinranking.com/D69LfI-tm/shib.png Rank Url: https://coinranking.com/coin/xz24e0BjL+shibainu-shib DAI 1.0006291992703804 Icon Url: https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg Rank Url: https://coinranking.com/coin/MoTuySvg7+dai-dai TRX 0.06258052330051515 Icon Url: https://cdn.coinranking.com/behejNqQs/trx.svg Rank Url: https://coinranking.com/coin/qUhEFk1I61atv+tron-trx WETH 1358.9816391781385 Icon Url: https://cdn.coinranking.com/KIviQyZlt/weth.svg Rank Url: https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth UNI 6.883589125213015 Icon Url: https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48 Rank Url: https://coinranking.com/coin/_H5FVG9iW+uniswap-uni AVAX 17.16181307250074 Icon Url: https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png Rank Url: https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax WBTC 20041.261732308747 Icon Url: https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg Rank Url: https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc ATOM 13.16542473542066 Icon Url: https://cdn.coinranking.com/HJzHboruM/atom.svg Rank Url: https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom OKB 15.66022182512388 Icon Url: https://cdn.coinranking.com/xcZdYtX6E/okx.png Rank Url: https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb LTC 54.05648566389233 Icon Url: https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg Rank Url: https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc FTT 24.693691930298066 Icon Url: https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg Rank Url: https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt ETC 27.966996516321945 Icon Url: https://cdn.coinranking.com/rJfyor__W/etc.svg Rank Url: https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc XMR 145.05674939207412 Icon Url: https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg Rank Url: https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr ALGO 0.3507195066967462 Icon Url: https://cdn.coinranking.com/lzbmCkUGB/algo.svg Rank Url: https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo XLM 0.1204735874762962 Icon Url: https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg Rank Url: https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm BCH 120.18749052658397 Icon Url: https://cdn.coinranking.com/By8ziihX7/bch.svg Rank Url: https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch BTCB 20096.064448414432 Icon Url: https://cdn.coinranking.com/Swr_SeZio/4023.png Rank Url: https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb NEAR 3.6497520889605766 Icon Url: https://cdn.coinranking.com/Cth83dCnl/near.png Rank Url: https://coinranking.com/coin/DCrsaMv68+nearprotocol-near CRO 0.10985709390988495 Icon Url: https://cdn.coinranking.com/2o91jm73M/cro.svg Rank Url: https://coinranking.com/coin/65PHZTpmE55b+cronos-cro LUNC 0.000290883860949558 Icon Url: https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg Rank Url: https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc WEMIX 1.8044031649772716 Icon Url: https://cdn.coinranking.com/1N84MQsoO/7548.png Rank Url: https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix FLOW 1.6999659347282123 Icon Url: https://cdn.coinranking.com/xh8X8QBss/flow.png Rank Url: https://coinranking.com/coin/QQ0NCmjVq+flow-flow ENS 17.04218243105481 Icon Url: https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png Rank Url: https://coinranking.com/coin/SbWqqTui-+energyswap-ens FIL 5.538424403837201 Icon Url: https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48 Rank Url: https://coinranking.com/coin/ymQub4fuB+filecoin-fil ICP 6.036603555263508 Icon Url: https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png Rank Url: https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp VET 0.023573370804009435 Icon Url: https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg Rank Url: https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet CAKE 4.7188031496280685 Icon Url: https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png Rank Url: https://coinranking.com/coin/ncYFcP709+pancakeswap-cake MANA 0.7005258478745544 Icon Url: https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg Rank Url: https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana IMX 0.763686997375083 Icon Url: https://cdn.coinranking.com/naRGT2Y_X/10603.png Rank Url: https://coinranking.com/coin/Z96jIvLU7+immutablex-imx HBAR 0.057945529596335796 Icon Url: https://cdn.coinranking.com/dSCnSLilQ/hedera.svg Rank Url: https://coinranking.com/coin/jad286TjB+hedera-hbar FRAX 1.0005527250081132 Icon Url: https://cdn.coinranking.com/BpVNCX-NM/frax.png Rank Url: https://coinranking.com/coin/KfWtaeV1W+frax-frax QNT 138.49826008575053 Icon Url: https://cdn.coinranking.com/a-i9Dl392/quant.png Rank Url: https://coinranking.com/coin/bauj_21eYVwso+quant-qnt XTZ 1.4321978004903466 Icon Url: https://cdn.coinranking.com/HkLUdilQ7/xtz.svg Rank Url: https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz EGLD 54.856351727337156 Icon Url: https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg Rank Url: https://coinranking.com/coin/omwkOTglq+elrond-egld CHZ 0.2156780704663453 Icon Url: https://cdn.coinranking.com/gTsOlSnwR/4066.png Rank Url: https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz SAND 0.8476439614574023 Icon Url: https://cdn.coinranking.com/kd_vwOcnI/sandbox.png Rank Url: https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand LDO 1.5110556907809047 Icon Url: https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png Rank Url: https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo EOS 1.1712521283780641 Icon Url: https://cdn.coinranking.com/PqOYrWSje/eos2.svg Rank Url: https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. . import requests url = &quot;https://airport-info.p.rapidapi.com/airport&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;airport-info.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) . {&#34;error&#34;:{&#34;text&#34;:&#34;No airport code provided&#34;}} .",
            "url": "https://trentcardall.github.io/cuddly-succotash/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter z is the 26 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 1 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter a is the 1 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;shake&quot;: 2.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #ideally the code should prompt the user multiple times def order(): global total item = input(&quot;Please select an item from the menu&quot;) for food, price in menu.items(): if food == item: print(food + &quot;: $&quot; + str(price)) total =+ price more = input(&quot;Anything else?&quot;) if more == &quot;yes&quot;: total order() else: print(&quot;Thank you, your total for today is &quot; + str(total)) print(&quot; n&quot;) print(&quot;Your order:&quot;) order() #code should add the price of the menu items selected by the user . Menu burger $3.99 fries $1.99 drink $0.99 Your order: burger: $3.99 burger: $3.99 Thank you, your total for today is 3.99 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Program Design-Work Watch",
            "content": "The Work Watch . For our program design project, my group will be creating something we will call the Work Watch. This idea came as some of our group members were experimenting with the time function in python. Someone in our group realized that this could be a good idea put to use as a program to help people work more efficiently. . The Work Watch is effectively a clock that runs as you are studying or doing some kind of work. However, it is good for mental health to take occasional breaks while you are working. It can also give you another boost of productivity. With the Work Watch, you can put in how long you are planning on working for and then listing some of your interests. The Watch will time you and tell you when it is time to take a short break and suggest some things you can do during the break to de-stress. . Certain Needs . We don’t know exactly all of our needs, but our ideas are based on internal clocks which we will build using lists of numbers and loops. We will simply allow the code to tell it to print activities when the clock hits a certain time. . User Preferences . -User can decide whether to show or not show the timer . -User can decide how long breaks should be beforehand . -User can decide how much work time goes between breaks . -This will take more work, but we could add a sound that plays when it is time to break/work if we have the time/resources. . College Board 6 Points . Program Purpose and Function . The purpose of this project is to help people get work done more healthy and efficiently. It is to be used in daily life to create a better personal work atmosphere that promotes good mental health . Data Abstraction . We will abstract data from lists of numbers and hobbies in order to set timers and provide break time activities which the user can do. . Managing Complexity . Each member has been assigned different roles for which they will manage different aspects of the project. That being said, we can still help each other and we are not strictly limited to our roles. . Procedural Abstraction . Our project will prompt the user for certain questions so we can determine how much time to give them before and during their break. . Algorithm Implementation . The project will use an internal timer which will use an algorithm to accurately run . Testing . We plan on testing for all possible errors and glitches which could happen before we determine that we are done with the project. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/project/2022/09/29/design.html",
            "relUrl": "/markdown/project/2022/09/29/design.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "HTML Table",
            "content": "Attribute Value About . Name | Trent Cardall | Born on March 9, 2005 | . Age | 17 | Senior in High School | . Hobbies | Playing music, surfing, lacrosse | Play drums and guitar | . Pets | Dog | Named Oscar, Owned for about 5 years | . Class | APCSP | Period 3 | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/table/html/2022/09/25/table.html",
            "relUrl": "/markdown/table/html/2022/09/25/table.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Using JavaScript Kernels",
            "content": "Defining Function to Create Lists . function attribute(category, value, info) { this.category=category; this.value=value; this.info=info; } attribute.prototype.toJSON = function() { const obj = {category: this.category, value: this.value, info: this.info}; const json = JSON.stringify(obj); return json; } function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } var basic = new attribute(&quot;Name&quot;, &quot;Trent&quot;, &quot;Born on March 9, 2005&quot;) logItType(basic) logItType(basic.toJSON()); . object ; attribute { category: &#39;Name&#39;, value: &#39;Trent&#39;, info: &#39;Born on March 9, 2005&#39; } string ; {&#34;category&#34;:&#34;Name&#34;,&#34;value&#34;:&#34;Trent&#34;,&#34;info&#34;:&#34;Born on March 9, 2005&#34;} . Adding Additional Attributes to Person . var additional = [ new attribute(&quot;Age&quot;, &quot;17&quot;, &quot;Senior in high school&quot;), new attribute(&quot;Hobbies&quot;, &quot;Playing music, lacrosse, surfing&quot;, &quot;Plays both drums and guitar&quot;), new attribute(&quot;Pets&quot;, &quot;Dog&quot;, &quot;Named Oscar, owned for about 5 years&quot;), new attribute(&quot;Class&quot;, &quot;APCSP&quot;, &quot;Period 3&quot;) ] function person(basic, additional){ this.basic = basic this.additional = additional this.person = [basic] this.additional.forEach(additional =&gt; { this.person.push(additional) }) this.json = [] this.person.forEach(attribute =&gt; this.json.push(attribute.toJSON())); } me = new person(basic, additional) logItType(me.person); logItType(me.person[0].name); logItType(me.json[0]); logItType(JSON.parse(me.json[0])); . object ; [ attribute { category: &#39;Name&#39;, value: &#39;Trent&#39;, info: &#39;Born on March 9, 2005&#39; }, attribute { category: &#39;Age&#39;, value: &#39;17&#39;, info: &#39;Senior in high school&#39; }, attribute { category: &#39;Hobbies&#39;, value: &#39;Playing music, lacrosse, surfing&#39;, info: &#39;Plays both drums and guitar&#39; }, attribute { category: &#39;Pets&#39;, value: &#39;Dog&#39;, info: &#39;Named Oscar, owned for about 5 years&#39; }, attribute { category: &#39;Class&#39;, value: &#39;APCSP&#39;, info: &#39;Period 3&#39; } ] undefined ; undefined string ; {&#34;category&#34;:&#34;Name&#34;,&#34;value&#34;:&#34;Trent&#34;,&#34;info&#34;:&#34;Born on March 9, 2005&#34;} object ; { category: &#39;Name&#39;, value: &#39;Trent&#39;, info: &#39;Born on March 9, 2005&#39; } . Attempting to create HTML Table . person.prototype._toHtml = function () { var style = ( &quot;display:inline-block;&quot; + &quot;background: #804175;&quot; + &quot;border: 2 px white;&quot; + &quot;box-shadow: 0.8 em 0.4 em 0.4 em black;&quot; ); var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Attribute&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Value&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;More Info&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row of me.person) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.category + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.value + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.info + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); } $$.html(me._toHtml()); . AttributeValueMore Info . Name | Trent | Born on March 9, 2005 | Age | 17 | Senior in high school | Hobbies | Playing music, lacrosse, surfing | Plays both drums and guitar | Pets | Dog | Named Oscar, owned for about 5 years | Class | APCSP | Period 3 | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/09/22/scriptkernel.html",
            "relUrl": "/fastpages/jupyter/2022/09/22/scriptkernel.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Focus and Habits",
            "content": "Main Takeaways . -Nobody’s life is easy . -Everybody goes through tough times . -Anybody can be happy . -It is not necessarily lots of success and money which will make us happy . -We should be grateful for all the privileges we have and all which we have in our lives. Many people don’t realize this until they are taken away. . Things I am Grateful For . -Every day I am alive -Loving, financially stable family -Living in nice neighborhood and city -Friends who care for me . Goals . -Finish high school with straight A’s -Be more social throughout the rest of high school (nothing to lose!) -Get into a good college -Become closer to my friends and family -Remember that if any of the goals above don’t work out, it will be okay! .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2022/09/19/focus.html",
            "relUrl": "/markdown/2022/09/19/focus.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Countdown",
            "content": "Original plan . I originally decided to make a 10 second timer. This was not very hard to make and as I was making the code I realized it was very repetitive, but it worked. . import time def countdown(sec): print(sec + &quot; seconds remaining&quot;) time.sleep(1) countdown(&quot;10&quot;) countdown(&quot;9&quot;) countdown(&quot;8&quot;) countdown(&quot;7&quot;) countdown(&quot;6&quot;) countdown(&quot;5&quot;) countdown(&quot;4&quot;) countdown(&quot;3&quot;) countdown(&quot;2&quot;) countdown(&quot;1&quot;) countdown(&quot;0&quot;) print(&quot;Time&#39;s up!&quot;) . 10 seconds remaining 9 seconds remaining 8 seconds remaining 7 seconds remaining 6 seconds remaining 5 seconds remaining 4 seconds remaining 3 seconds remaining 2 seconds remaining 1 seconds remaining 0 seconds remaining Time&#39;s up! . Using a list . I realized as I was making the code that this is something which could be done by abstracting data. I did not want to type the whole list myself, so I found code on the internet which can create a list with any numbers you want. I chose 0-60 as that made the most sense, regarding the timer is only in seconds. You can make the list as big as you want though. . def create_list(r1, r2): if r1 == r2: return r1 else: res = [] while (r1 &lt; r2+1 ): res.append(r1) r1 += 1 return res # create list of number 0-60 for one minute r1, r2 = 0, 60 print(create_list(r1, r2)) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60] . I then turned this list created into a defined list in my code: . seconds = [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;, &quot;16&quot;, &quot;17&quot;, &quot;18&quot;, &quot;19&quot;, &quot;20&quot;, &quot;21&quot;, &quot;22&quot;, &quot;23&quot;, &quot;24&quot;, &quot;25&quot;, &quot;26&quot;, &quot;27&quot;, &quot;28&quot;, &quot;29&quot;, &quot;30&quot;, &quot;31&quot;, &quot;32&quot;, &quot;33&quot;, &quot;34&quot;, &quot;35&quot;, &quot;36&quot;, &quot;37&quot;, &quot;38&quot;, &quot;39&quot;, &quot;40&quot;, &quot;41&quot;, &quot;42&quot;, &quot;43&quot;, &quot;44&quot;, &quot;45&quot;, &quot;46&quot;, &quot;47&quot;, &quot;48&quot;, &quot;49&quot;, &quot;50&quot;, &quot;51&quot;, &quot;52&quot;, &quot;53&quot;, &quot;54&quot;, &quot;55&quot;, &quot;56&quot;, &quot;57&quot;, &quot;58&quot;, &quot;59&quot;, &quot;60&quot;] print(seconds) . [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;10&#39;, &#39;11&#39;, &#39;12&#39;, &#39;13&#39;, &#39;14&#39;, &#39;15&#39;, &#39;16&#39;, &#39;17&#39;, &#39;18&#39;, &#39;19&#39;, &#39;20&#39;, &#39;21&#39;, &#39;22&#39;, &#39;23&#39;, &#39;24&#39;, &#39;25&#39;, &#39;26&#39;, &#39;27&#39;, &#39;28&#39;, &#39;29&#39;, &#39;30&#39;, &#39;31&#39;, &#39;32&#39;, &#39;33&#39;, &#39;34&#39;, &#39;35&#39;, &#39;36&#39;, &#39;37&#39;, &#39;38&#39;, &#39;39&#39;, &#39;40&#39;, &#39;41&#39;, &#39;42&#39;, &#39;43&#39;, &#39;44&#39;, &#39;45&#39;, &#39;46&#39;, &#39;47&#39;, &#39;48&#39;, &#39;49&#39;, &#39;50&#39;, &#39;51&#39;, &#39;52&#39;, &#39;53&#39;, &#39;54&#39;, &#39;55&#39;, &#39;56&#39;, &#39;57&#39;, &#39;58&#39;, &#39;59&#39;, &#39;60&#39;] . Here is the code for the actual program I created. I realized along the way that it would be really cool if you could choose how long you wanted the timer be instead of just having it a minute long. Using what I learned about loops recently, I realized a while loop can create the function I wanted. However, I ran into multiple problems such as the list counting backwards and the loop never stopping, but after changing parts and a couple internet searches I figured out how to make it work the way I wanted to. You can input any number from 0-60 and it will give you a timer of that long. . def timer(): time_wanted = int(input(&quot;How many seconds do you need?&quot;)) while time_wanted &lt; len(seconds): record = seconds[time_wanted] countdown(record) time_wanted -= 1 if time_wanted == -1: break return timer() print(&quot;Time&#39;s up!&quot;) . 10 seconds remaining 9 seconds remaining 8 seconds remaining 7 seconds remaining 6 seconds remaining 5 seconds remaining 4 seconds remaining 3 seconds remaining 2 seconds remaining 1 seconds remaining 0 seconds remaining Time&#39;s up! .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/09/13/countdown.html",
            "relUrl": "/fastpages/jupyter/2022/09/13/countdown.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "JavaScript Quiz",
            "content": "Planning . I decided to make my quiz about basketball, and have the questions and answers go as follows: . What year was basketball invented? A. 1642 B. 1864 C. 1891 (correct) D. 1492 . | Which of these players is LeBron James? A. Picture of Michael Jordan B. Picture of LeBron James (correct) C. Picture of Tom Brady D. Picture of Giannis Antetokounmpo . | Which team won the championship in 2022? A. Phoenix Suns (+ logo) B. Boston Celtics (+ logo) C. Dallas Mavericks (+ logo) D. Golden State Warriors (+ logo) (correct) . | Who won the MVP in 2022? A. Luka Doncic B. LeBron James C. Stephen Curry D. Nikola Jokic (correct) . | Each correct answer will take the user to the next question. Each wrong answer will take them to an incorrect screen and ask them to try again. . Changes . In order to make my game more original, I decided to have wrong answers take you to a wrong screen which would ask you try again, and have correct answers take you to a correct screen which could take you to the next question. . I also decided to have a screen towards the beginning which would ask the player for their name and welcome them to the quiz. . I tried to make the 4th question free response, where you could type in any answer and try to get the right one, and after some research was able to find the code to do that. However, the website did not seem to recognize one of the functions I was trying to run, and after changing some things I was not able to fix it. I decided to settle by creating a dropdown system with multiple options to still maintain some originality. After running into similar issues, I settled for traditional multiple choice. . I decided to also add a screen at the end which congratulated the player using the same name they entered at the beginning of the quiz and giving them the option to either play again or view my fastpages site. . Link to the quiz: https://studio.code.org/projects/applab/uNCEq2vDZhWKgeIb4BX-sOUqC1NYM_AKitRGIJa3bvo .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/project/2022/09/07/javascriptquiz.html",
            "relUrl": "/markdown/project/2022/09/07/javascriptquiz.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Links and More",
            "content": "About me Notebooks Posts . https://trentcardall.github.io/cuddly-succotash/markdown/2022/09/02/about.html | https://trentcardall.github.io/cuddly-succotash/categories/#jupyter | https://trentcardall.github.io/cuddly-succotash/categories/#markdown | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/info/2022/09/02/markdown-table.html",
            "relUrl": "/info/2022/09/02/markdown-table.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "More about me",
            "content": ". Hi! My name is Trent Cardall and I am currently a student in AP Computer Science Principles. I do not know a whole lot about coding right now but I have already learned so much in the short time I have been in this class. I am taking this class because I want to see if I can potentially have a future in computer science, a field that will only get bigger from now on. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2022/09/02/about.html",
            "relUrl": "/markdown/2022/09/02/about.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Python Game",
            "content": "def word_hint(hint): print(&quot;Can you guess the word?&quot;) print(&quot;Hint:&quot; + hint) msg = input() return msg print(&quot;Welcome to the word guessing game called &#39;Can You Guess the Word?&#39;!&quot;) print(&quot;Press enter to continue:&quot;+&quot; n&quot;) input() rsp = word_hint(&quot;It starts with the letter p and is a common language used in coding.&quot;) if rsp == &quot;python&quot;: print (&quot;Correct! Nicely done!&quot;) else: print(&quot;Wrong! The answer we were looking for was &#39;python&#39;.&quot;) print(&quot;On to the next word...&quot;+&quot; n&quot;) rsp = word_hint(&quot;The word starts with a p and is very common function used in python.&quot;) if rsp == &quot;print&quot;: print(&quot;Wow! Amazing! Great answer!&quot;) else: print(&quot;Oh no! That was wrong! The answer we were looking for was &#39;print&#39;.&quot;) print(&quot;This next word will be the last one! Finish strong!&quot;+&quot; n&quot;) rsp = word_hint(&quot;A common greeting that starts with an H and ends with an O.&quot;) if rsp == &quot;hello&quot;: print(&quot;That is right! Great job!&quot;) else: print(&quot;That was wrong! You can do better than that!&quot;) print(&quot;Thank you for playing Can You Guess the Word! We will catch you on the flippity-flip!&quot;) . Welcome to the word guessing game called &#39;Can You Guess the Word?&#39;! Press enter to continue: Can you guess the word? Hint:It starts with the letter p and is a common language used in coding. Correct! Nicely done! On to the next word... Can you guess the word? Hint:The word starts with a p and is very common function used in python. Wow! Amazing! Great answer! This next word will be the last one! Finish strong! Can you guess the word? Hint:A common greeting that starts with an H and ends with an O. That was wrong! You can do better than that! Thank you for playing Can You Guess the Word! We will catch you on the flippity-flip! .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/08/31/coinflip.html",
            "relUrl": "/fastpages/jupyter/2022/08/31/coinflip.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "InfoDb Lists",
            "content": "In the cell below, the code creates a &quot;dictionary&quot; where all the data is stored. I decided to define certain things about me to show my understanding of data structures. tesst . InfoDb = [] # Creating keys and values for the data structure InfoDb.append({ &quot;FirstName&quot;: &quot;Trent&quot;, &quot;LastName&quot;: &quot;Cardall&quot;, &quot;Class&quot;: &quot;APCSP&quot;, &quot;Date of Birth&quot;: &quot;March 9, 2005&quot;, &quot;Place of Birth&quot;: &quot;Scottsdale, AZ&quot;, &quot;Hobbies&quot;: [&quot;Playing music&quot;, &quot;Surfing&quot;, &quot;Playing Lacrosse&quot;] # [] makes ordered list }) print (InfoDb) . [{&#39;FirstName&#39;: &#39;Trent&#39;, &#39;LastName&#39;: &#39;Cardall&#39;, &#39;Class&#39;: &#39;APCSP&#39;, &#39;Date of Birth&#39;: &#39;March 9, 2005&#39;, &#39;Place of Birth&#39;: &#39;Scottsdale, AZ&#39;, &#39;Hobbies&#39;: [&#39;Playing music&#39;, &#39;Surfing&#39;, &#39;Playing Lacrosse&#39;]}] . The data structure was printed which shows proof that it works. However, it is not exactly easy for the average person to read. By using other functions we can format the list to make the output more organized. There are multiple ways to pull data out of the structure, but all of them will produce the same output. . For loop . Pulls records one by one out of data structure until there is nothing left . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;-Class:&quot;, d_rec[&quot;Class&quot;]) print(&quot; t&quot;, &quot;-Date of Birth:&quot;, d_rec[&quot;Date of Birth&quot;]) print(&quot; t&quot;, &quot;-Place of Birth:&quot;, d_rec[&quot;Place of Birth&quot;]) print(&quot; t&quot;, &quot;-Hobbies:&quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) def for_loop(): print(&quot;A little about myself:&quot;) for record in InfoDb: print_data(record) for_loop() # activating function . A little about myself: Trent Cardall -Class: APCSP -Date of Birth: March 9, 2005 -Place of Birth: Scottsdale, AZ -Hobbies:Playing music, Surfing, Playing Lacrosse . While loop . Counts through the items in the list until record is passed. . def while_loop(): print(&quot;A little about myself:&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i +=1 return while_loop() . A little about myself: Trent Cardall -Class: APCSP -Date of Birth: March 9, 2005 -Place of Birth: Scottsdale, AZ -Hobbies:Playing music, Surfing, Playing Lacrosse . Recursion . Using a function defined as recursive_loop(i), each time data is pulled out it will add a number to i to move on to the next item in the list. Eventually i &lt; len(InfoDb) will be false, and the loop will end . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) print (&quot;A little about myself:&quot;) recursive_loop(0) . A little about myself: Trent Cardall -Class: APCSP -Date of Birth: March 9, 2005 -Place of Birth: Scottsdale, AZ -Hobbies:Playing music, Surfing, Playing Lacrosse . Reverse Order . One of the hacks is to attempt to display the list in reverse order. The first idea that came to mind and seemed easiest was to change the recursive loop so that it subtracts each time, and start it at the highest number of the list. . def reverse_order(i): if i &lt;= len(InfoDb): record = InfoDb[i] print_data(record) reverse_order(i - 1) print(&quot;Reverse order&quot;+&quot; n&quot;) print(&quot;A little about myself:&quot;) reverse_order(6) . Reverse order A little about myself: . That didn&#39;t seem to work, and I couldn&#39;t think of any other ideas, so I tried a quick google search, and attempted new methods . InfoDb.reverse() print(InfoDb) . [{&#39;FirstName&#39;: &#39;Trent&#39;, &#39;LastName&#39;: &#39;Cardall&#39;, &#39;Class&#39;: &#39;APCSP&#39;, &#39;Date of Birth&#39;: &#39;March 9, 2005&#39;, &#39;Place of Birth&#39;: &#39;Scottsdale, AZ&#39;, &#39;Hobbies&#39;: [&#39;Playing music&#39;, &#39;Surfing&#39;, &#39;Playing Lacrosse&#39;]}] . That didn&#39;t seem to do anything either. I am not quite sure how to reverse this particular list, so I am going to attempt making a simpler list and reversing it. . alphabet = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;v&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;] print(&quot;Normal order:&quot;, alphabet, &quot; n&quot;) alphabet.reverse() print(&quot;Reverse order:&quot;, alphabet) . Normal order: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;v&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] Reverse order: [&#39;z&#39;, &#39;y&#39;, &#39;x&#39;, &#39;w&#39;, &#39;v&#39;, &#39;u&#39;, &#39;t&#39;, &#39;s&#39;, &#39;r&#39;, &#39;q&#39;, &#39;v&#39;, &#39;o&#39;, &#39;n&#39;, &#39;m&#39;, &#39;l&#39;, &#39;k&#39;, &#39;j&#39;, &#39;i&#39;, &#39;h&#39;, &#39;g&#39;, &#39;f&#39;, &#39;e&#39;, &#39;d&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;] . That worked! Unfortunately I was not able to find a way to reverse the previous, more complicated list I made but I did reverse a list. . Turning list into a table: . A little about myself: |Key|Value| || | |Class|APCSP| |Date of Birth|March 9, 2005| |Place of Birth|Scottsdale, AZ| |Hobbies|Playing music, Surfing, Playing Lacrosse| .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/08/30/infodb.html",
            "relUrl": "/fastpages/jupyter/2022/08/30/infodb.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;Trent Cardall&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 17 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;BASH&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Trent Cardall &lt;class &#39;str&#39;&gt; age 17 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;BASH&#39;] &lt;class &#39;list&#39;&gt; - langs[3] BASH &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Trent Cardall&#39;, &#39;age&#39;: 17, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;BASH&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Trent Cardall &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # My list InfoDb.append({ &quot;FirstName&quot;: &quot;Trent&quot;, &quot;LastName&quot;: &quot;Cardall&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;trentcardall@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Accord&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Trent&#39;, &#39;LastName&#39;: &#39;Cardall&#39;, &#39;DOB&#39;: &#39;March 9&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;trentcardall@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Accord&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Trent Cardall Residence: San Diego Birth Day: March 9 Cars: Accord . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Trent Cardall Residence: San Diego Birth Day: March 9 Cars: Accord . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Ap Gov",
            "content": "8/26/22: . Event: Passage of a Bipartisan Gun Safety Law . Legislative Process: Bill must pass by majority of house and 60 votes in the Senate. . | the 2nd Amendment is interpreted differently by conservatives and liberals. Liberals believe limits can be placed on the right to bear arms while conservatives believe it means that gun ownership rights should not be limited. . | Not the only gun law under consideration, Assault Weapons ban passed in House but probably won’t pass in Senate . | Uvalde, Texas school shooting made gun control a big topic of debate in the government. Democrats and Republicans worked together to create a gun control bill which they agreed on called the Bipartisan Safer Communities Act (BCSA) . | More specifics on background checks so that guns don’t get in the hands of potentially violent people . Juvenile records for under age of 21 . | Keep guns away from people convicted of abuse . | Provides grants to states to implement red flag laws, where people can petition courts to prevent certain people from owning guns. . | . | Although both Republicans and Democrats generally agreed on the passing of this bill, some think it did not do enough and others think it will make it too hard for civilized people to own guns. . | The passing of this bill signifies that the government truly is under pressure from the public and the people still hold the power. Since gun violence was a pressing topic the government worked quickly to address this issue and make some changes to satisfy the public . | . Event: Recession? . National Bureau of Economic Research defines recession as two quarters of economic decline . | Can lead to unemployment, business failures, bankruptcies . | Pandemic and war in Ukraine are affecting aspects of the economy . | Inflation: rise on prices, decline in purchasing power . | Recession≠depression . | US has experienced 2 quarters of decline and inflation . Fits definition, but economists say it does not necessarily indicate recession . | . | Other signs=higher interest rates, dip in stock market . | Strong signs: Low unemployment, good job growth, low debt . | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2022/08/29/AP-Gov.html",
            "relUrl": "/2022/08/29/AP-Gov.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Bash Hacks",
            "content": "-By typing in the tool you want to verify, followed by --version, you can see what version of the tool you install. For example, running python --version will tell you which version of Python you have installed, which is Python 3.9.12 for me. . -You can use Anaconda to verify tools as well. For example running conda list will reveal all the packages and versions which you have installed. Running conda info will verify which version of Anaconda you have installed. . -By using some of the GitHub commands you can update a repository with BASH. There are many commands involving updating a repository, but some of the main ones that would be used are git pull and git commit. I personally think it is much easier to update a repository through VSCode by using git clone and code . to edit in VSCode and then push the changes onto GitHub, which is what I did to make this post. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2022/08/28/Bash-Hacks.html",
            "relUrl": "/markdown/2022/08/28/Bash-Hacks.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "Terminal Commands",
            "content": ". -mkdir: make new directory . -cd:change directory . -pwd: lets you know what directory you are currently in . -ls: lists files in directory . -clear: clear terminal, clean it up when it gets messy . -echo: echos whatever phrase you put in, can be used to organize outputs . -ls -a: list hidden files . -ls -al: lists files in long format, shows certain properties about them which you can only see in terminal. . -code: code file in VSCode .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2022/08/25/Terminal-Commands.html",
            "relUrl": "/markdown/2022/08/25/Terminal-Commands.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Usingmarkdown",
            "content": "Big heading . smaller heading . very small heading . Normal bold italicized .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2022/08/21/usingmarkdown.html",
            "relUrl": "/2022/08/21/usingmarkdown.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "Notebook test",
            "content": "Below should be python code . print (&quot;Hello&quot;) .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/08/21/good-notebook.html",
            "relUrl": "/fastpages/jupyter/2022/08/21/good-notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Ternary (base 3) Minus . +1 | 00000000 | 0 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". Hi! My name is Trent Cardall and I am currently a student in AP Computer Science Principles. I do not know a whole lot about coding right now but I have already learned so much in the short time I have been in this class. I am taking this class because I want to see if I can potentially have a future in computer science, a field that will only get bigger from now on. .",
          "url": "https://trentcardall.github.io/cuddly-succotash/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "API",
          "content": ". Live Weather API .",
          "url": "https://trentcardall.github.io/cuddly-succotash/api/",
          "relUrl": "/api/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "JavaScript",
          "content": "Links: . JavaScript notebook . HTML Table .",
          "url": "https://trentcardall.github.io/cuddly-succotash/javascript/",
          "relUrl": "/javascript/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://trentcardall.github.io/cuddly-succotash/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}