{
  
    
        "post0": {
            "title": "InfoDb Lists",
            "content": "In the cell below, the code creates a &quot;dictionary&quot; where all the data is stored. I decided to define certain things about me to show my understanding of data structures. tesst . InfoDb = [] # Creating keys and values for the data structure InfoDb.append({ &quot;FirstName&quot;: &quot;Trent&quot;, &quot;LastName&quot;: &quot;Cardall&quot;, &quot;Class&quot;: &quot;APCSP&quot;, &quot;Date of Birth&quot;: &quot;March 9, 2005&quot;, &quot;Place of Birth&quot;: &quot;Scottsdale, AZ&quot;, &quot;Hobbies&quot;: [&quot;Playing music&quot;, &quot;Surfing&quot;, &quot;Playing Lacrosse&quot;] # [] makes ordered list }) print (InfoDb) . [{&#39;FirstName&#39;: &#39;Trent&#39;, &#39;LastName&#39;: &#39;Cardall&#39;, &#39;Class&#39;: &#39;APCSP&#39;, &#39;Date of Birth&#39;: &#39;March 9, 2005&#39;, &#39;Place of Birth&#39;: &#39;Scottsdale, AZ&#39;, &#39;Hobbies&#39;: [&#39;Playing music&#39;, &#39;Surfing&#39;, &#39;Playing Lacrosse&#39;]}] . The data structure was printed which shows proof that it works. However, it is not exactly easy for the average person to read. By using other functions we can format the list to make the output more organized. There are multiple ways to pull data out of the structure, but all of them will produce the same output. . For loop . Pulls records one by one out of data structure until there is nothing left . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;-Class:&quot;, d_rec[&quot;Class&quot;]) print(&quot; t&quot;, &quot;-Date of Birth:&quot;, d_rec[&quot;Date of Birth&quot;]) print(&quot; t&quot;, &quot;-Place of Birth:&quot;, d_rec[&quot;Place of Birth&quot;]) print(&quot; t&quot;, &quot;-Hobbies:&quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) def for_loop(): print(&quot;A little about myself:&quot;) for record in InfoDb: print_data(record) for_loop() # activating function . A little about myself: Trent Cardall -Class: APCSP -Date of Birth: March 9, 2005 -Place of Birth: Scottsdale, AZ -Hobbies:Playing music, Surfing, Playing Lacrosse . While loop . Counts through the items in the list until record is passed. . def while_loop(): print(&quot;A little about myself:&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i +=1 return while_loop() . A little about myself: Trent Cardall -Class: APCSP -Date of Birth: March 9, 2005 -Place of Birth: Scottsdale, AZ -Hobbies:Playing music, Surfing, Playing Lacrosse . Recursion . Using a function defined as recursive_loop(i), each time data is pulled out it will add a number to i to move on to the next item in the list. Eventually i &lt; len(InfoDb) will be false, and the loop will end . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) print (&quot;A little about myself:&quot;) recursive_loop(0) . A little about myself: Trent Cardall -Class: APCSP -Date of Birth: March 9, 2005 -Place of Birth: Scottsdale, AZ -Hobbies:Playing music, Surfing, Playing Lacrosse .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/08/30/infodb.html",
            "relUrl": "/fastpages/jupyter/2022/08/30/infodb.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 18 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Print the data structure print(InfoDb) . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Ap Gov",
            "content": "8/26/22: . Event: Passage of a Bipartisan Gun Safety Law . Legislative Process: Bill must pass by majority of house and 60 votes in the Senate. . | the 2nd Amendment is interpreted differently by conservatives and liberals. Liberals believe limits can be placed on the right to bear arms while conservatives believe it means that gun ownership rights should not be limited. . | Not the only gun law under consideration, Assault Weapons ban passed in House but probably won’t pass in Senate . | Uvalde, Texas school shooting made gun control a big topic of debate in the government. Democrats and Republicans worked together to create a gun control bill which they agreed on called the Bipartisan Safer Communities Act (BCSA) . | More specifics on background checks so that guns don’t get in the hands of potentially violent people . Juvenile records for under age of 21 . | Keep guns away from people convicted of abuse . | Provides grants to states to implement red flag laws, where people can petition courts to prevent certain people from owning guns. . | . | Although both Republicans and Democrats generally agreed on the passing of this bill, some think it did not do enough and others think it will make it too hard for civilized people to own guns. . | The passing of this bill signifies that the government truly is under pressure from the public and the people still hold the power. Since gun violence was a pressing topic the government worked quickly to address this issue and make some changes to satisfy the public . | . Event: Recession? . National Bureau of Economic Research defines recession as two quarters of economic decline . | Can lead to unemployment, business failures, bankruptcies . | Pandemic and war in Ukraine are affecting aspects of the economy . | Inflation: rise on prices, decline in purchasing power . | Recession≠depression . | US has experienced 2 quarters of decline and inflation . Fits definition, but economists say it does not necessarily indicate recession . | . | Other signs=higher interest rates, dip in stock market . | Strong signs: Low unemployment, good job growth, low debt . | .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2022/08/29/AP-Gov.html",
            "relUrl": "/2022/08/29/AP-Gov.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Bash Hacks",
            "content": "-By typing in the tool you want to verify, followed by --version, you can see what version of the tool you install. For example, running python --version will tell you which version of Python you have installed, which is Python 3.9.12 for me. . -You can use Anaconda to verify tools as well. For example running conda list will reveal all the packages and versions which you have installed. Running conda info will verify which version of Anaconda you have installed. . -By using some of the GitHub commands you can update a repository with BASH. There are many commands involving updating a repository, but some of the main ones that would be used are git pull and git commit. I personally think it is much easier to update a repository through VSCode by using git clone and code . to edit in VSCode and then push the changes onto GitHub, which is what I did to make this post. .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2022/08/28/Bash-Hacks.html",
            "relUrl": "/markdown/2022/08/28/Bash-Hacks.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Terminal Commands",
            "content": ". -mkdir: make new directory . -cd:change directory . -pwd: lets you know what directory you are currently in . -ls: lists files in directory . -clear: clear terminal, clean it up when it gets messy . -echo: echos whatever phrase you put in, can be used to organize outputs . -ls -a: list hidden files . -ls -al: lists files in long format, shows certain properties about them which you can only see in terminal. . -code: code file in VSCode .",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2022/08/25/Terminal-Commands.html",
            "relUrl": "/markdown/2022/08/25/Terminal-Commands.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Usingmarkdown",
            "content": "Big heading . smaller heading . very small heading . Normal bold italicized .",
            "url": "https://trentcardall.github.io/cuddly-succotash/2022/08/21/usingmarkdown.html",
            "relUrl": "/2022/08/21/usingmarkdown.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Notebook test",
            "content": "Below should be python code . print (&quot;Hello&quot;) .",
            "url": "https://trentcardall.github.io/cuddly-succotash/fastpages/jupyter/2022/08/21/good-notebook.html",
            "relUrl": "/fastpages/jupyter/2022/08/21/good-notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://trentcardall.github.io/cuddly-succotash/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://trentcardall.github.io/cuddly-succotash/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://trentcardall.github.io/cuddly-succotash/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}